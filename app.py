import os
import sys
import logging
import threading
from fastapi import FastAPI
import uvicorn

from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# ---------- Logging ----------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(name)s: %(message)s",
    stream=sys.stdout,
)
log = logging.getLogger("gptbot")

# ---------- ENV ----------
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
if not TELEGRAM_BOT_TOKEN:
    raise RuntimeError("TELEGRAM_BOT_TOKEN is not set")

OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")  # –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º ‚Äî —Ç–æ–≥–¥–∞ –±–æ—Ç –±—É–¥–µ—Ç –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞—Ç—å-—ç—Ö–æ

# ---------- FastAPI (health) ----------
api = FastAPI()

@api.get("/health")
def health():
    return {"ok": True}

def run_api():
    port = int(os.environ.get("PORT", 8000))
    log.info(f"HTTP: starting Uvicorn on 0.0.0.0:{port}")
    uvicorn.run(api, host="0.0.0.0", port=port, log_level="info")

# ---------- OpenAI ----------
try:
    from openai import OpenAI
    openai_client = OpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY else None
except Exception as e:
    log.warning("OpenAI client not available: %s", e)
    openai_client = None

# ---------- Handlers ----------
HELP_TEXT = (
    "–Ø –æ–Ω–ª–∞–π–Ω ü§ñ\n"
    "/start ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –±–æ—Ç –∂–∏–≤\n"
    "/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞\n\n"
    "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –æ—Ç–≤–µ—á—É —Å –ø–æ–º–æ—â—å—é GPT. "
    "–ï—Å–ª–∏ –∫–ª—é—á–∞ –Ω–µ—Ç, –≤–µ—Ä–Ω—É—Å—å –∫ –ø—Ä–æ—Å—Ç–æ–º—É –æ—Ç–≤–µ—Ç—É."
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Railway! –ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å, –æ—Ç–≤–µ—á—É —Å –ø–æ–º–æ—â—å—é GPT.")

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(HELP_TEXT)

async def reply_with_gpt(text: str) -> str:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ OpenAI (gpt-4o-mini). –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞."""
    if not openai_client:
        return "–£ –º–µ–Ω—è –ø–æ–∫–∞ –Ω–µ—Ç –∫–ª—é—á–∞ OpenAI, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞—é –±–µ–∑ –ò–ò üôÇ"

    try:
        resp = openai_client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –∫—Ä–∞—Ç–∫–∏–π Telegram-–±–æ—Ç. –û—Ç–≤–µ—á–∞–π –ø–æ –¥–µ–ª—É –∏ –ø–æ–Ω—è—Ç–Ω–æ."},
                {"role": "user", "content": text},
            ],
        )
        return resp.choices[0].message.content.strip()
    except Exception as e:
        log.exception("OpenAI error: %s", e)
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ."

async def on_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = (update.message.text or "").strip()
    if not user_text:
        return
    # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if len(user_text) > 4000:
        await update.message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –°–æ–∫—Ä–∞—Ç–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
        return

    reply = await reply_with_gpt(user_text)
    await update.message.reply_text(reply)

def main():
    # 1) HTTP-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=run_api, daemon=True, name="uvicorn-thread").start()

    # 2) Telegram-–ø–æ–ª–ª–∏–Ω–≥ ‚Äî –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ (–±–µ–∑ asyncio-–æ—à–∏–±–æ–∫)
    log.info("Telegram: building application...")
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_message))
    log.info("Telegram: starting polling...")
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    log.info("Process start: python app.py (gpt-enabled)")
    main()
