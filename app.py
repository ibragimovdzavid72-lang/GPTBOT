# app.py
import os
import logging
import asyncio
from typing import Any, Dict, Optional, Deque, Set
from collections import deque
from contextlib import asynccontextmanager

from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import JSONResponse, PlainTextResponse
import httpx

# =========================
# Config & Logging
# =========================
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")
log = logging.getLogger("gptbot")

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET")             # –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
TELEGRAM_WEBHOOK_TOKEN = os.getenv("TELEGRAM_WEBHOOK_TOKEN")  # –¥–ª—è X-Telegram-Bot-Api-Secret-Token
WEBHOOK_BASE = os.getenv("WEBHOOK_BASE")                 # –Ω–∞–ø—Ä–∏–º–µ—Ä: https://gptbot-production-xxxx.up.railway.app
ADMIN_IDS = {
    int(x.strip()) for x in (os.getenv("ADMIN_IDS") or "").replace(",", " ").split() if x.strip().isdigit()
}

if not TELEGRAM_BOT_TOKEN:
    raise RuntimeError("TELEGRAM_BOT_TOKEN is not set")
if not WEBHOOK_SECRET:
    raise RuntimeError("WEBHOOK_SECRET is not set (use a strong random value)")

TG_API = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}"

# =========================
# HTTP client (shared)
# =========================
http: Optional[httpx.AsyncClient] = None

@asynccontextmanager
async def lifespan(app: FastAPI):
    global http
    http = httpx.AsyncClient(
        base_url=TG_API,
        timeout=httpx.Timeout(connect=5.0, read=8.0, write=5.0, pool=5.0),  # –±—ã—Å—Ç—Ä–µ–µ 10—Å –ª–∏–º–∏—Ç–∞ Telegram
        headers={"Accept": "application/json"},
    )
    # –ê–≤—Ç–æ-—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–µ–±—Ö—É–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if WEBHOOK_BASE:
        try:
            url = f"{WEBHOOK_BASE.rstrip('/')}/webhook/{WEBHOOK_SECRET}"
            payload = {
                "url": url,
                # Telegram –ø—Ä–æ–≤–µ—Ä–∏—Ç —ç—Ç–æ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ –≤—Ö–æ–¥–µ
                "secret_token": TELEGRAM_WEBHOOK_TOKEN or "",
                # —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –º–∞–∫—Å–∏–º—É–º ‚Äî –º–µ–Ω—å—à–µ 10 –ú–ë –¥–ª—è —Ñ–æ—Ç–æ/–¥–æ–∫–æ–≤
                "max_connections": 40,
                "allowed_updates": ["message", "edited_message", "callback_query", "channel_post"],
                "drop_pending_updates": False,
            }
            r = await http.post("/setWebhook", json=payload)
            if r.is_error or not r.json().get("ok"):
                log.warning("setWebhook failed: %s %s", r.status_code, r.text)
            else:
                log.info("Webhook set to %s", url)
        except Exception as e:
            log.warning("setWebhook exception: %s", e)

    try:
        yield
    finally:
        await http.aclose()

app = FastAPI(lifespan=lifespan)

# =========================
# Dedup updates (in-memory LRU)
# =========================
MAX_SEEN = 4096
_seen: Set[int] = set()
_queue: Deque[int] = deque(maxlen=MAX_SEEN)

def seen_update(update_id: Optional[int]) -> bool:
    if update_id is None:
        return False
    if update_id in _seen:
        return True
    _seen.add(update_id)
    _queue.append(update_id)
    if len(_seen) > MAX_SEEN:
        oldest = _queue.popleft()
        _seen.discard(oldest)
    return False

# =========================
# Telegram helpers
# =========================
async def tg_request(method: str, payload: Dict[str, Any], *, retries: int = 2) -> Optional[Dict[str, Any]]:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–æ–≤ Telegram —Å –º—è–≥–∫–∏–º–∏ —Ä–µ—Ç—Ä–∞—è–º–∏ –Ω–∞ —Å–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏/5xx.
    """
    assert http is not None
    delay = 0.5
    for attempt in range(retries + 1):
        try:
            r = await http.post(f"/{method}", json=payload)
            if r.is_error:
                # 4xx ‚Äî –±–µ–∑ —Ä–µ—Ç—Ä–∞–µ–≤, 5xx ‚Äî —Å —Ä–µ—Ç—Ä–∞—è–º–∏
                if 500 <= r.status_code < 600 and attempt < retries:
                    await asyncio.sleep(delay)
                    delay *= 2
                    continue
                log.error("%s %s: %s", method, r.status_code, r.text)
                return None
            data = r.json()
            if not data.get("ok", False):
                log.error("%s not ok: %s", method, data)
                return None
            return data.get("result")
        except (httpx.ReadTimeout, httpx.WriteTimeout, httpx.ConnectTimeout):
            if attempt < retries:
                await asyncio.sleep(delay)
                delay *= 2
                continue
            log.exception("%s timeout after retries", method)
            return None
        except Exception:
            log.exception("%s failed", method)
            return None

async def tg_send_message(
    chat_id: int,
    text: str,
    reply_markup: Optional[Dict[str, Any]] = None,
    parse_mode: Optional[str] = "HTML",
    disable_web_page_preview: bool = True,
):
    payload: Dict[str, Any] = {
        "chat_id": chat_id,
        "text": text,
        "disable_web_page_preview": disable_web_page_preview,
    }
    if parse_mode:
        payload["parse_mode"] = parse_mode
    if reply_markup:
        payload["reply_markup"] = reply_markup
    await tg_request("sendMessage", payload)

def escape_html(s: str) -> str:
    return s.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")

def default_keyboard() -> Dict[str, Any]:
    return {
        "keyboard": [
            [{"text": "‚ÑπÔ∏è –ü–æ–º–æ—â—å"}, {"text": "üñºÔ∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞"}],
            [{"text": "üü¢ –í–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞"}, {"text": "üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞"}],
        ],
        "resize_keyboard": True,
        "one_time_keyboard": False,
        "is_persistent": True,
    }

# =========================
# Routes
# =========================
@app.get("/health")
async def health():
    return {"ok": True, "service": "gptbot", "version": "1.2.0"}

@app.post("/webhook/{secret}")
async def webhook(secret: str, request: Request):
    # 1) –ü—É—Ç—å —Å —Å–µ–∫—Ä–µ—Ç–æ–º ‚Äî 404, —á—Ç–æ–±—ã –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å —ç–Ω–¥–ø–æ–∏–Ω—Ç
    if secret != WEBHOOK_SECRET:
        raise HTTPException(status_code=404)

    # 2) –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram secret header (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∏ setWebhook)
    if TELEGRAM_WEBHOOK_TOKEN:
        header = request.headers.get("x-telegram-bot-api-secret-token")
        if header != TELEGRAM_WEBHOOK_TOKEN:
            # –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ –±–µ–∑ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π
            raise HTTPException(status_code=403, detail="Forbidden")

    # 3) –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if "application/json" not in (request.headers.get("content-type") or ""):
        return JSONResponse({"ok": True})

    # 4) –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –±—ã—Å—Ç—Ä–æ, —Å–æ —Å—Ç—Ä–∞—Ö–æ–≤–∫–æ–π –ø–æ —Ç–∞–π–º–∞—É—Ç—É ‚Äî —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å 15s/502 –Ω–∞ Railway
    try:
        raw = await asyncio.wait_for(request.body(), timeout=2.0)
    except asyncio.TimeoutError:
        # –Ω–µ –¥–µ—Ä–∂–∏–º –∫–æ–Ω–Ω–µ–∫—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200, Telegram —Ä–µ—Ç—Ä–∞–π–Ω—ë—Ç —Å —Ç–µ–º –∂–µ update_id
        log.warning("Webhook body read timeout")
        return PlainTextResponse("OK", status_code=200)

    if not raw:
        return JSONResponse({"ok": True})

    # 5) –ü–∞—Ä—Å–∏–º JSON (–±–µ–∑ –ª–∏—à–Ω–µ–π –≤–æ–∑–Ω–∏)
    try:
        # orjson –±—ã—Å—Ç—Ä–µ–µ, –Ω–æ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
        try:
            import orjson  # type: ignore
            update = orjson.loads(raw)
        except Exception:
            import json
            update = json.loads(raw.decode("utf-8"))
    except Exception:
        log.warning("Webhook got non-JSON payload")
        return JSONResponse({"ok": True})

    # 6) –î–µ–¥—É–ø –ø–æ update_id ‚Äî –µ—Å–ª–∏ –ø–æ–≤—Ç–æ—Ä, —Å—Ä–∞–∑—É 200
    if seen_update(update.get("update_id")):
        return JSONResponse({"ok": True})

    # 7) –£—Ö–æ–¥–∏–º –≤ —Ñ–æ–Ω –∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º 200
    asyncio.create_task(handle_update(update))
    return JSONResponse({"ok": True})

# =========================
# Core logic
# =========================
async def handle_update(update: Dict[str, Any]):
    try:
        callback = update.get("callback_query")
        msg = (
            update.get("message")
            or update.get("edited_message")
            or update.get("channel_post")
        )

        if callback:
            chat_id = callback["message"]["chat"]["id"]
            data = (callback.get("data") or "").strip()
            await tg_send_message(chat_id, f"Callback: <code>{escape_html(data)}</code>")
            return

        if not msg:
            return

        chat = msg.get("chat", {})
        chat_id = chat.get("id")
        if chat_id is None:
            return

        text = (msg.get("text") or "").strip()
        normalized = text.casefold()

        # –ö–æ–º–∞–Ω–¥—ã
        if normalized in ("/start", "start"):
            await tg_send_message(
                chat_id,
                "‚úÖ –ë–æ—Ç –Ω–∞ Railway —Å–ª—É—à–∞–µ—Ç –≤–µ–±—Ö—É–∫.\n–ù–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç ‚Äî —è –æ—Ç–≤–µ—á—É.",
                reply_markup=default_keyboard(),
            )
            return

        if normalized in ("‚ÑπÔ∏è –ø–æ–º–æ—â—å", "/help", "help"):
            await tg_send_message(
                chat_id,
                "–î–æ—Å—Ç—É–ø–Ω–æ:\n‚Ä¢ /start ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É\n‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç ‚Äî —ç—Ö–æ-–æ—Ç–≤–µ—Ç\n‚Ä¢ ¬´üñºÔ∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞¬ª ‚Äî –∑–∞–≥–ª—É—à–∫–∞",
                reply_markup=default_keyboard(),
            )
            return

        if normalized in ("üñºÔ∏è –∫–∞—Ä—Ç–∏–Ω–∫–∞", "–∫–∞—Ä—Ç–∏–Ω–∫–∞"):
            await tg_send_message(chat_id, "–ó–∞–≥–ª—É—à–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–ø–æ–¥–∫–ª—é—á–∏–º –ø–æ–∑–∂–µ).")
            return

        if normalized in ("üü¢ –≤–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞", "–≤–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞"):
            # TODO: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–ª–∞–≥ on (Redis/–ë–î)
            await tg_send_message(chat_id, "üü¢ –ë–æ—Ç –≤–∫–ª—é—á—ë–Ω.")
            return

        if normalized in ("üî¥ –≤—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞", "–≤—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞"):
            # TODO: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–ª–∞–≥ off (Redis/–ë–î)
            await tg_send_message(chat_id, "üî¥ –ë–æ—Ç –≤—ã–∫–ª—é—á—ë–Ω.")
            return

        # –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ (–ø—Ä–∏–º–µ—Ä)
        if normalized.startswith("/broadcast ") and chat_id in ADMIN_IDS:
            # TODO: —Ä–∞–∑–æ—Å–ª–∞—Ç—å –ø–æ —Å–ø–∏—Å–∫—É chat_id –∏–∑ –ë–î
            await tg_send_message(chat_id, "üõ∞Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞.")
            return

        # Fallback: —ç—Ö–æ
        await tg_send_message(chat_id, f"–Ø –ø–æ–ª—É—á–∏–ª: <b>{escape_html(text)}</b>", reply_markup=default_keyboard())

    except asyncio.CancelledError:
        raise
    except Exception:
        log.exception("handle_update failed")

# =========================
# Optional root (–¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–∏–Ω–≥–∞)
# =========================
@app.get("/")
async def root():
    return PlainTextResponse("OK")
