# app.py
import os
import sys
import json
import logging
from typing import Dict, List, Optional

from fastapi import FastAPI, Request, HTTPException
import uvicorn

from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
)

# --------- Logging ----------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(name)s: %(message)s",
    stream=sys.stdout,
)
log = logging.getLogger("gptbot")

# --------- ENV --------------
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY", "")
WEBHOOK_BASE = os.environ.get("WEBHOOK_BASE", "").rstrip("/")
WEBHOOK_SECRET = os.environ.get("WEBHOOK_SECRET", "").strip()
ADMIN_IDS_RAW = os.environ.get("ADMIN_IDS", "")
IMAGES_ENABLED = os.environ.get("IMAGES_ENABLED", "false").lower() in ("1", "true", "yes")
IMAGE_SIZE = os.environ.get("IMAGE_SIZE", "1024x1024")
SAFE_MODE = os.environ.get("SAFE_MODE", "true").lower() in ("1", "true", "yes")

if not TELEGRAM_BOT_TOKEN:
    raise RuntimeError("TELEGRAM_BOT_TOKEN is not set")

# --------- OpenAI client (optional) -----------
# –†–∞–±–æ—Ç–∞–µ—Ç –¥–∞–∂–µ –µ—Å–ª–∏ –∫–ª—é—á–∞ –Ω–µ—Ç: —Ñ—É–Ω–∫—Ü–∏–∏ —Å–∞–º–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç –Ω–∞–ª–∏—á–∏–µ
try:
    from openai import OpenAI
    _openai_client = OpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY else None
except Exception as e:
    log.warning("OpenAI SDK not available or failed to init: %s", e)
    _openai_client = None

# --------- Bot state (in-memory, no DB) ------
BOT_ENABLED: bool = True  # –º–æ–∂–Ω–æ –≤—ã–∫–ª—é—á–∞—Ç—å/–≤–∫–ª—é—á–∞—Ç—å –∏–∑ Telegram
DIALOG_MEMORY: Dict[int, List[Dict[str, str]]] = {}  # user_id -> messages (role/content)
MAX_MEMORY = 12  # –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

def is_admin(user_id: Optional[int]) -> bool:
    if not user_id:
        return False
    if not ADMIN_IDS_RAW:
        return False
    try:
        admin_ids = {int(x.strip()) for x in ADMIN_IDS_RAW.split(",") if x.strip()}
    except ValueError:
        admin_ids = set()
    return user_id in admin_ids

# --------- UI helpers -------------------------
def main_menu(admin: bool) -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton("üí¨ –ß–∞—Ç", callback_data="mode_chat"),
         InlineKeyboardButton("üñºÔ∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞", callback_data="mode_image")],
        [InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å", callback_data="clear_memory")],
    ]
    if admin:
        buttons.append([
            InlineKeyboardButton("‚öôÔ∏è Admin: ON/OFF", callback_data="admin_toggle"),
        ])
    return InlineKeyboardMarkup(buttons)

# --------- OpenAI helpers ---------------------
async def ask_openai(messages: List[Dict[str, str]]) -> str:
    """
    messages: [{"role":"system/user/assistant","content":"..."}]
    """
    if not _openai_client or not OPENAI_API_KEY:
        raise RuntimeError("openai_unavailable")

    try:
        resp = _openai_client.chat.completions.create(
            model="gpt-4o-mini",
            messages=messages,
            temperature=0.6,
            max_tokens=400,
        )
        return resp.choices[0].message.content.strip()
    except Exception as e:
        # –ß–∞—Å—Ç—ã–µ –∫–æ–¥—ã: billing_hard_limit_reached / rate_limit_exceeded –∏ —Ç.–¥.
        log.warning("OpenAI chat error: %s", e)
        raise

async def generate_image(prompt: str, size: str = "1024x1024") -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –¢—Ä–µ–±—É–µ—Ç IMAGES_ENABLED=true.
    """
    if not IMAGES_ENABLED:
        raise RuntimeError("images_disabled")
    if not _openai_client or not OPENAI_API_KEY:
        raise RuntimeError("openai_unavailable")

    try:
        img = _openai_client.images.generate(
            model="gpt-image-1",
            prompt=prompt,
            size=size,
        )
        # SDK –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç data[0].url (–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞)
        return img.data[0].url
    except Exception as e:
        log.warning("OpenAI image error: %s", e)
        raise

# --------- Handlers ---------------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id if update.effective_user else None
    DIALOG_MEMORY.pop(uid, None)
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø GPTBOT ü§ñ\n\n"
        "‚Ä¢ –ü–∏—à–∏ —Ç–µ–∫—Å—Ç ‚Äî –æ—Ç–≤–µ—á—É —Å –ø–∞–º—è—Ç—å—é –¥–∏–∞–ª–æ–≥–∞\n"
        "‚Ä¢ –ù–∞–∂–º–∏ ¬´üñºÔ∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞¬ª ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
        "‚Ä¢ ¬´üßπ –û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å¬ª ‚Äî –∑–∞–±—ã—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç\n"
        "‚Ä¢ –ê–¥–º–∏–Ω –º–æ–∂–µ—Ç /on –∏ /off –∏–ª–∏ –∫–Ω–æ–ø–∫–æ–π –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é\n"
    )
    await update.effective_chat.send_message(
        text, reply_markup=main_menu(is_admin(uid))
    )

async def menu_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id if update.effective_user else None
    await update.message.reply_text("–ú–µ–Ω—é:", reply_markup=main_menu(is_admin(uid)))

async def on_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id if update.effective_user else None
    if not is_admin(uid):
        return await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
    global BOT_ENABLED
    BOT_ENABLED = True
    await update.message.reply_text("–ë–æ—Ç: ‚úÖ –≤–∫–ª—é—á—ë–Ω")

async def off_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id if update.effective_user else None
    if not is_admin(uid):
        return await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
    global BOT_ENABLED
    BOT_ENABLED = False
    await update.message.reply_text("–ë–æ—Ç: ‚õîÔ∏è –≤—ã–∫–ª—é—á–µ–Ω")

async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    uid = update.effective_user.id if update.effective_user else None

    if query.data == "mode_chat":
        await query.edit_message_text(
            "–†–µ–∂–∏–º: üí¨ –ß–∞—Ç. –ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ.", reply_markup=main_menu(is_admin(uid))
        )
    elif query.data == "mode_image":
        if not IMAGES_ENABLED:
            return await query.edit_message_text(
                "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–∞.", reply_markup=main_menu(is_admin(uid))
            )
        await query.edit_message_text(
            "–û–ø–∏—à–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚Äî —è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é üñºÔ∏è", reply_markup=main_menu(is_admin(uid))
        )
        context.user_data["await_image_prompt"] = True
    elif query.data == "clear_memory":
        DIALOG_MEMORY.pop(uid, None)
        await query.edit_message_text(
            "–ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞ üßπ", reply_markup=main_menu(is_admin(uid))
        )
    elif query.data == "admin_toggle":
        if not is_admin(uid):
            return await query.edit_message_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        global BOT_ENABLED
        BOT_ENABLED = not BOT_ENABLED
        state = "‚úÖ –≤–∫–ª—é—á—ë–Ω" if BOT_ENABLED else "‚õîÔ∏è –≤—ã–∫–ª—é—á–µ–Ω"
        await query.edit_message_text(
            f"–ë–æ—Ç —Å–µ–π—á–∞—Å: {state}", reply_markup=main_menu(is_admin(uid))
        )

def _push_memory(uid: int, role: str, content: str):
    msgs = DIALOG_MEMORY.setdefault(uid, [])
    msgs.append({"role": role, "content": content})
    if len(msgs) > MAX_MEMORY:
        DIALOG_MEMORY[uid] = msgs[-MAX_MEMORY:]

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id if update.effective_user else None
    text = (update.message.text or "").strip()

    # –ï—Å–ª–∏ –∂–¥—ë–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–∫–∏
    if context.user_data.get("await_image_prompt"):
        context.user_data["await_image_prompt"] = False
        try:
            url = await generate_image(text, IMAGE_SIZE)
            return await update.message.reply_photo(
                photo=url,
                caption="–ì–æ—Ç–æ–≤–æ! –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –Ω–æ–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ ‚Äî –Ω–∞–∂–º–∏ ¬´üñºÔ∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞¬ª.",
                reply_markup=main_menu(is_admin(uid)),
            )
        except Exception as e:
            log.warning("Image gen failed: %s", e)
            hint = (
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n"
                "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: –ª–∏–º–∏—Ç –±–∏–ª–ª–∏–Ω–≥–∞, –∫–ª—é—á –Ω–µ –∑–∞–¥–∞–Ω, IMAGES_ENABLED=false."
            )
            return await update.message.reply_text(
                f"‚ö†Ô∏è {hint}", reply_markup=main_menu(is_admin(uid))
            )

    if not BOT_ENABLED and not is_admin(uid):
        return await update.message.reply_text(
            "‚õîÔ∏è –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )

    # –ü–∞–º—è—Ç—å + –∑–∞–ø—Ä–æ—Å –∫ OpenAI (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á)
    system_prompt = (
        "–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º. "
        "–ï—Å–ª–∏ —Ç–µ–±—è –ø—Ä–æ—Å—è—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É üñºÔ∏è."
    )
    _push_memory(uid, "system", system_prompt)
    _push_memory(uid, "user", text)

    try:
        reply = await ask_openai(DIALOG_MEMORY[uid])
        _push_memory(uid, "assistant", reply)
        await update.message.reply_text(reply, reply_markup=main_menu(is_admin(uid)))
    except Exception as e:
        # fallback: —ç—Ö–æ + –ø–æ–¥—Å–∫–∞–∑–∫–∞
        log.warning("Chat failed, fallback echo: %s", e)
        fallback = (
            "–°–µ–π—á–∞—Å –Ω–µ –º–æ–≥—É –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –º–æ–¥–µ–ª–∏ (–≤–æ–∑–º–æ–∂–Ω–æ, –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –±–∞–ª–∞–Ω—Å / –Ω–µ—Ç –∫–ª—é—á–∞). "
            "–í–µ—Ä–Ω—É—Å—å –∫ —Ä–∞–±–æ—Ç–µ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø. –ê –ø–æ–∫–∞ —ç—Ö–æ: "
        )
        await update.message.reply_text(fallback + text, reply_markup=main_menu(is_admin(uid)))

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    log.error("Update error: %s", context.error, exc_info=context.error)
    try:
        if isinstance(update, Update) and update.effective_chat:
            await update.effective_chat.send_message("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception:
        pass

# --------- Telegram Application ---------------
application: Application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("menu", menu_cmd))
application.add_handler(CommandHandler("on", on_cmd))
application.add_handler(CommandHandler("off", off_cmd))
application.add_handler(CallbackQueryHandler(button_click))
application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), text_handler))
application.add_error_handler(error_handler)

# --------- FastAPI ----------------------------
api = FastAPI()

@api.get("/health")
async def health():
    return {"ok": True}

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞
async def _handle_webhook(request: Request):
    try:
        data = await request.json()
    except Exception:
        raise HTTPException(status_code=400, detail="invalid json")

    update = Update.de_json(data=data, bot=application.bot)
    await application.process_update(update)
    return {"ok": True}

# –†–æ—É—Ç –±–µ–∑ —Å–µ–∫—Ä–µ—Ç–∞
@api.post("/webhook")
async def webhook_plain(request: Request):
    # –ï—Å–ª–∏ —É –Ω–∞—Å –∑–∞–¥–∞–Ω —Å–µ–∫—Ä–µ—Ç ‚Äî –∑–∞–ø—Ä–µ—Ç–∏–º –¥–æ—Å—Ç—É–ø –∫ plain-–ø—É—Ç–∏,
    # —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥—É–±–ª–µ–π (502 —É Telegram –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–∞—Ö).
    if WEBHOOK_SECRET:
        raise HTTPException(status_code=404, detail="not found")
    return await _handle_webhook(request)

# –†–æ—É—Ç —Å —Å–µ–∫—Ä–µ—Ç–æ–º (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω)
if WEBHOOK_SECRET:
    @api.post(f"/webhook/{WEBHOOK_SECRET}")
    async def webhook_secret(request: Request):
        return await _handle_webhook(request)

# –ê–≤—Ç–æ—Å–µ—Ç–∞–ø –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
@api.on_event("startup")
async def on_startup():
    log.info("Starting up...")
    await application.initialize()
    await application.start()

    if WEBHOOK_BASE:
        url = f"{WEBHOOK_BASE}/webhook"
        if WEBHOOK_SECRET:
            url = f"{WEBHOOK_BASE}/webhook/{WEBHOOK_SECRET}"
        try:
            resp = await application.bot.set_webhook(url)
            log.info("setWebhook: %s", resp)
        except Exception as e:
            log.error("Failed to set webhook: %s", e)
    else:
        log.info("WEBHOOK_BASE not set ‚Äî webhook will not be updated automatically.")

    log.info("Application startup complete.")

@api.on_event("shutdown")
async def on_shutdown():
    log.info("Shutting down...")
    try:
        await application.stop()
        await application.shutdown()
    finally:
        log.info("Application shutdown complete.")

# --------- Local run (Railway uses start command) ---------
def run():
    port = int(os.environ.get("PORT", "8080"))
    log.info("HTTP: starting Uvicorn on 0.0.0.0:%s", port)
    uvicorn.run(api, host="0.0.0.0", port=port, log_level="info")

if __name__ == "__main__":
    run()
