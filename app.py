# app.py
import os
import json
import asyncio
import logging
from typing import Any, Dict, Optional

import httpx
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import JSONResponse, PlainTextResponse

# ---------- Logging ----------
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")
log = logging.getLogger("gptbot")

# ---------- Env ----------
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET")
TELEGRAM_WEBHOOK_TOKEN = os.getenv("TELEGRAM_WEBHOOK_TOKEN")  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ secret_token –≤ setWebhook

if not TELEGRAM_BOT_TOKEN or not WEBHOOK_SECRET:
    raise RuntimeError("TELEGRAM_BOT_TOKEN and WEBHOOK_SECRET must be set")

TG_API = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}"

# –û–±—â–∏–π HTTP-–∫–ª–∏–µ–Ω—Ç –∫ Telegram
http: Optional[httpx.AsyncClient] = None

# ---------- FastAPI ----------
async def lifespan(app: FastAPI):
    """–°–æ–∑–¥–∞—ë–º/–∑–∞–∫—Ä—ã–≤–∞–µ–º httpx –∫–ª–∏–µ–Ω—Ç –Ω–∞ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    global http
    http = httpx.AsyncClient(
        base_url=TG_API,
        timeout=httpx.Timeout(connect=5.0, read=8.0, write=5.0, pool=5.0),
        headers={"Accept": "application/json"},
    )
    try:
        yield
    finally:
        await http.aclose()

app = FastAPI(lifespan=lifespan)

# ---------- Helpers ----------
def escape_html(s: str) -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥ parse_mode=HTML."""
    return s.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")

async def tg_send_message(chat_id: int, text: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π."""
    assert http is not None
    try:
        r = await http.post(
            "/sendMessage",
            json={
                "chat_id": chat_id,
                "text": text,
                "parse_mode": "HTML",
                "disable_web_page_preview": True,
            },
        )
        if r.is_error:
            log.error("sendMessage %s: %s", r.status_code, r.text)
    except Exception:
        log.exception("sendMessage failed")

# ---------- Routes ----------
@app.get("/")
async def root():
    return PlainTextResponse("OK")

@app.get("/health")
async def health():
    return {"ok": True}

@app.post("/webhook/{secret}")
async def webhook(secret: str, request: Request):
    # 1) –°–µ–∫—Ä–µ—Ç –≤ –ø—É—Ç–∏
    if secret != WEBHOOK_SECRET:
        # 404, —á—Ç–æ–±—ã –Ω–µ –ø–∞–ª–∏—Ç—å —ç–Ω–¥–ø–æ–∏–Ω—Ç
        raise HTTPException(status_code=404)

    # 2) –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Telegram (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–∏ setWebhook)
    if TELEGRAM_WEBHOOK_TOKEN:
        header = request.headers.get("x-telegram-bot-api-secret-token")
        if header != TELEGRAM_WEBHOOK_TOKEN:
            raise HTTPException(status_code=403)

    # 3) –ë—ã—Å—Ç—Ä–æ —á–∏—Ç–∞–µ–º —Å—ã—Ä–æ–µ —Ç–µ–ª–æ –∏ –°–†–ê–ó–£ –æ—Ç–≤–µ—á–∞–µ–º 200
    try:
        raw = await asyncio.wait_for(request.body(), timeout=1.5)
    except asyncio.TimeoutError:
        # –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–µ—Ä–∂–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ ‚Äî Telegram —Å–∞–º —Ä–µ—Ç—Ä–∞–π–Ω—ë—Ç
        return JSONResponse({"ok": True})

    if not raw:
        return JSONResponse({"ok": True})

    # 4) –í —Ñ–æ–Ω–µ —Ä–∞–∑–±–∏—Ä–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
    asyncio.create_task(process_raw_update(raw))
    return JSONResponse({"ok": True})

# ---------- Background processing ----------
async def process_raw_update(raw: bytes):
    """–ü–∞—Ä—Å–∏–º JSON –∏ –ø–µ—Ä–µ–¥–∞—ë–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É. –û—à–∏–±–∫–∏ –Ω–µ –≤–∞–ª—è—Ç –≤–µ–±—Ö—É–∫."""
    try:
        # orjson –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å, –Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π json –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
        update = json.loads(raw.decode("utf-8"))
    except Exception:
        log.warning("invalid JSON payload")
        return

    await handle_update(update)

async def handle_update(update: Dict[str, Any]):
    """–ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞."""
    try:
        msg = update.get("message") or update.get("edited_message") or update.get("channel_post")
        if not msg:
            return

        chat_id = msg["chat"]["id"]
        text = (msg.get("text") or "").strip()
        low = text.casefold()

        # –ö–æ–º–∞–Ω–¥—ã
        if low in ("/start", "start"):
            await tg_send_message(
                chat_id,
                "‚úÖ –ë–æ—Ç –Ω–∞ Railway —Å–ª—É—à–∞–µ—Ç –≤–µ–±—Ö—É–∫. –ù–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç ‚Äî —è –æ—Ç–≤–µ—á—É.",
            )
            return

        if low in ("‚ÑπÔ∏è –ø–æ–º–æ—â—å", "/help", "help"):
            await tg_send_message(
                chat_id,
                "–î–æ—Å—Ç—É–ø–Ω–æ:\n"
                "‚Ä¢ /start ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞\n"
                "‚Ä¢ /pause ‚Äî –ø–æ—Å—Ç–∞–≤–∏—Ç—å –±–æ—Ç–∞ –Ω–∞ –ø–∞—É–∑—É (–¥–µ–º–æ)\n"
                "‚Ä¢ /image ‚Äî –∑–∞–≥–ª—É—à–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n"
                "‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç ‚Äî —ç—Ö–æ-–æ—Ç–≤–µ—Ç",
            )
            return

        if low in ("/pause", "pause", "üî¥ –≤—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞", "–≤—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞"):
            await tg_send_message(chat_id, "üî¥ –ë–æ—Ç –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø–∞—É–∑—É. (–õ–æ–≥–∏–∫—É on/off –ø–æ–¥–∫–ª—é—á–∏–º –ø–æ–∑–∂–µ.)")
            return

        if low in ("/image", "image", "üñºÔ∏è –∫–∞—Ä—Ç–∏–Ω–∫–∞", "–∫–∞—Ä—Ç–∏–Ω–∫–∞"):
            await tg_send_message(chat_id, "üñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ó–∞–≥–ª—É—à–∫–∞.")
            return

        # –≠—Ö–æ
        await tg_send_message(chat_id, f"–Ø –ø–æ–ª—É—á–∏–ª: <b>{escape_html(text)}</b>")

    except Exception:
        # –≤–∞–∂–Ω–æ–µ: —Å—Ç—Ä–æ–∫—É –∑–∞–∫—Ä—ã–≤–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ ‚Äî –±–µ–∑ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ :)
        log.exception("handle update error")
