import os
import sys
import logging
from collections import deque, defaultdict
from typing import Deque, Dict, List
from datetime import datetime
import base64, io

from fastapi import FastAPI, Request, Header, HTTPException
import uvicorn

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, BotCommand
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# ------------ Logging ------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(name)s: %(message)s",
    stream=sys.stdout,
)
log = logging.getLogger("gptbot")

# ------------ ENV ------------
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY     = os.environ.get("OPENAI_API_KEY")
WEBHOOK_BASE       = (os.environ.get("WEBHOOK_BASE") or "").rstrip("/")
WEBHOOK_SECRET     = os.environ.get("WEBHOOK_SECRET")
DATABASE_URL       = os.environ.get("DATABASE_URL")      # optional
IMAGE_SIZE         = os.environ.get("IMAGE_SIZE", "1024x1024")  # 512x512 –∏–ª–∏ 1024x1024

if not TELEGRAM_BOT_TOKEN:
    raise RuntimeError("TELEGRAM_BOT_TOKEN is not set")
if not WEBHOOK_BASE:
    raise RuntimeError("WEBHOOK_BASE is not set (public Railway URL)")
if not WEBHOOK_SECRET:
    raise RuntimeError("WEBHOOK_SECRET is not set")

# ------------ OpenAI ------------
try:
    from openai import OpenAI
    openai_client = OpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY else None
except Exception as e:
    log.warning("OpenAI client init failed: %s", e)
    openai_client = None

# ------------ Memory (per chat) ------------
MEM_LIMIT = 8  # —Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–µ—Ä–∂–∞—Ç—å –≤ –ø–∞–º—è—Ç–∏
chat_memory: Dict[int, Deque[dict]] = defaultdict(lambda: deque(maxlen=MEM_LIMIT))

def memory_add(chat_id: int, role: str, content: str):
    chat_memory[chat_id].append({"role": role, "content": content})

def memory_messages(chat_id: int) -> List[dict]:
    system = [{"role": "system", "content": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –∫—Ä–∞—Ç–∫–∏–π Telegram-–±–æ—Ç. –û—Ç–≤–µ—á–∞–π –ø–æ –¥–µ–ª—É."}]
    return system + list(chat_memory[chat_id])

# ------------ Postgres logging (optional) ------------
def _pg_enabled() -> bool:
    return bool(DATABASE_URL)

def _pg_exec(sql: str, params: tuple = ()):
    if not _pg_enabled():
        return
    import psycopg2
    conn = psycopg2.connect(DATABASE_URL)
    try:
        with conn:
            with conn.cursor() as cur:
                cur.execute(sql, params)
    finally:
        conn.close()

def pg_init():
    if not _pg_enabled():
        return
    _pg_exec("""
        CREATE TABLE IF NOT EXISTS chat_logs (
            id SERIAL PRIMARY KEY,
            ts TIMESTAMP NOT NULL,
            chat_id BIGINT,
            username TEXT,
            msg_type TEXT,
            user_text TEXT,
            bot_reply TEXT
        )
    """)
    log.info("Postgres: chat_logs table ready")

def pg_log(ts: datetime, chat_id: int, username: str, msg_type: str, user_text: str, bot_reply: str):
    if not _pg_enabled(): return
    _pg_exec(
        "INSERT INTO chat_logs (ts, chat_id, username, msg_type, user_text, bot_reply) VALUES (%s,%s,%s,%s,%s,%s)",
        (ts, chat_id, username, msg_type, user_text, bot_reply)
    )

# ------------ UI helpers ------------
HELP_TEXT = (
    "–Ø –æ–Ω–ª–∞–π–Ω ü§ñ (webhook)\n"
    "/help ‚Äî –ø–æ–º–æ—â—å\n"
    "/image <–æ–ø–∏—Å–∞–Ω–∏–µ> ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É\n"
    "/reset ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç\n"
    "/diag ‚Äî –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞\n\n"
    "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –æ—Ç–≤–µ—á—É —Å GPT –∏ —É—á—Ç—É –∫–æ–Ω—Ç–µ–∫—Å—Ç."
)

def reply_kb():
    return ReplyKeyboardMarkup(
        [[KeyboardButton("/help"), KeyboardButton("/image")],
         [KeyboardButton("/reset"), KeyboardButton("/diag")]],
        resize_keyboard=True, one_time_keyboard=False
    )

# ------------ Handlers ------------
async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –ë–æ—Ç –Ω–∞ webhook. –ö–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É –ø–æ–º–æ–≥—É—Ç –±—ã—Å—Ç—Ä–æ –≤—ã–∑—ã–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã.", reply_markup=reply_kb())

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(HELP_TEXT, reply_markup=reply_kb())

async def reset_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_memory[update.effective_chat.id].clear()
    await update.message.reply_text("üß† –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω.", reply_markup=reply_kb())

async def image_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prompt = " ".join(context.args).strip()
    if not prompt:
        context.user_data["awaiting_image"] = True
        await update.message.reply_text("‚úçÔ∏è –ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.", reply_markup=reply_kb())
        return
    await generate_and_send_image(update, prompt)

async def generate_and_send_image(update: Update, prompt: str):
    """–£—Å—Ç–æ–π—á–∏–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏ URL, –∏ base64 (b64_json)."""
    if not openai_client:
        await update.message.reply_text("–ù–µ—Ç –∫–ª—é—á–∞ OpenAI ‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return
    try:
        resp = openai_client.images.generate(
            model="gpt-image-1",
            prompt=prompt,
            size=IMAGE_SIZE,
            n=1,
        )
        data = resp.data[0]
        if getattr(data, "b64_json", None):
            raw = base64.b64decode(data.b64_json)
            bio = io.BytesIO(raw); bio.name = "image.png"
            await update.message.reply_photo(photo=bio, caption=f"üé® {prompt}")
            pg_log(datetime.utcnow(), update.effective_chat.id, update.effective_user.username or "", "image", prompt, "sent-bytes")
        elif getattr(data, "url", None):
            await update.message.reply_photo(photo=data.url, caption=f"üé® {prompt}")
            pg_log(datetime.utcnow(), update.effective_chat.id, update.effective_user.username or "", "image", prompt, data.url)
        else:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç API.")
    except Exception as e:
        log.exception("Image gen error: %s", e)
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–∑–∂–µ.")

async def on_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()
    if not text: return

    # –∂–¥–∞–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–∫–∏?
    if context.user_data.pop("awaiting_image", False):
        await generate_and_send_image(update, text)
        return

    chat_id   = update.effective_chat.id
    username  = update.effective_user.username or ""
    memory_add(chat_id, "user", text)

    if not openai_client:
        reply = "–£ –º–µ–Ω—è –ø–æ–∫–∞ –Ω–µ—Ç –∫–ª—é—á–∞ OpenAI, –ø–æ—ç—Ç–æ–º—É –æ—Ç–≤–µ—á–∞—é –±–µ–∑ –ò–ò üôÇ"
        await update.message.reply_text(reply, reply_markup=reply_kb())
        pg_log(datetime.utcnow(), chat_id, username, "text", text, reply)
        return

    try:
        messages = memory_messages(chat_id) + [{"role": "user", "content": text}]
        resp = openai_client.chat.completions.create(model="gpt-4o-mini", messages=messages)
        reply = resp.choices[0].message.content.strip()
        memory_add(chat_id, "assistant", reply)
        await update.message.reply_text(reply, reply_markup=reply_kb())
        pg_log(datetime.utcnow(), chat_id, username, "text", text, reply)
    except Exception as e:
        log.exception("OpenAI error: %s", e)
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ GPT. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

async def diag_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîé –¢–µ—Å—Ç: —á–∞—Ç‚Ä¶")
    try:
        if openai_client:
            r = openai_client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role": "user", "content": "–°–∫–∞–∂–∏ OK –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º."}],
            )
            await update.message.reply_text("Chat OK: " + r.choices[0].message.content.strip())
        else:
            await update.message.reply_text("Chat: –Ω–µ—Ç OPENAI_API_KEY")
    except Exception as e:
        log.exception("Diag chat error: %s", e)
        await update.message.reply_text("Chat: –æ—à–∏–±–∫–∞ (—Å–º. –ª–æ–≥–∏ Railway).")

    await update.message.reply_text("üîé –¢–µ—Å—Ç: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ‚Ä¶")
    await generate_and_send_image(update, "–º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –ø–∏–∫—Ç–æ–≥—Ä–∞–º–º–∞ —Å–æ–ª–Ω—Ü–∞")

# ------------ Telegram app (webhook) ------------
tg_app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
tg_app.add_handler(CommandHandler("start", start_cmd))
tg_app.add_handler(CommandHandler("help",  help_cmd))
tg_app.add_handler(CommandHandler("reset", reset_cmd))
tg_app.add_handler(CommandHandler("image", image_cmd))
tg_app.add_handler(CommandHandler("diag",  diag_cmd))
tg_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_message))

# ------------ FastAPI ------------
api = FastAPI()

@api.get("/health")
def health():
    return {"ok": True}

@api.on_event("startup")
async def on_startup():
    pg_init()
    await tg_app.initialize()
    await tg_app.start()

    # –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
    await tg_app.bot.set_my_commands([
        BotCommand("start", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("help",  "–ü–æ–º–æ—â—å"),
        BotCommand("image", "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É"),
        BotCommand("reset", "–û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç"),
        BotCommand("diag",  "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"),
    ])

    webhook_url = f"{WEBHOOK_BASE}/webhook/{WEBHOOK_SECRET}"
    await tg_app.bot.set_webhook(url=webhook_url, secret_token=WEBHOOK_SECRET)
    log.info("Webhook set: %s", webhook_url)

@api.on_event("shutdown")
async def on_shutdown():
    try:
        await tg_app.bot.delete_webhook()
    except Exception:
        pass
    await tg_app.stop()
    await tg_app.shutdown()
    log.info("Telegram application stopped")

@api.post("/webhook/{secret}")
async def telegram_webhook(
    secret: str,
    request: Request,
    x_telegram_bot_api_secret_token: str | None = Header(None),
):
    if secret != WEBHOOK_SECRET:
        raise HTTPException(status_code=403, detail="bad path secret")
    if x_telegram_bot_api_secret_token != WEBHOOK_SECRET:
        raise HTTPException(status_code=403, detail="bad header secret")

    data = await request.json()
    update = Update.de_json(data, tg_app.bot)
    await tg_app.process_update(update)
    return {"ok": True}

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8000))
    log.info("Starting Uvicorn on 0.0.0.0:%s (webhook+buttons+memory+images+logs)", port)
    uvicorn.run(api, host="0.0.0.0", port=port, log_level="info")
