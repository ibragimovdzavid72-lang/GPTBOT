# app.py
import os
import logging
from typing import Any, Dict

from fastapi import FastAPI, Request, HTTPException
import httpx

# --------- Config ---------
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")
log = logging.getLogger("gptbot")

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "supersecret123456")  # –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω–æ

if not TELEGRAM_BOT_TOKEN:
    raise RuntimeError("TELEGRAM_BOT_TOKEN is not set")

TG_API = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}"

# HTTP –∫–ª–∏–µ–Ω—Ç (–ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è)
http = httpx.AsyncClient(timeout=15)

# --------- App ---------
app = FastAPI()


@app.get("/health")
async def health():
    return {"ok": True}


async def tg_send_message(chat_id: int, text: str, reply_markup: Dict[str, Any] | None = None):
    payload: Dict[str, Any] = {"chat_id": chat_id, "text": text}
    if reply_markup:
        payload["reply_markup"] = reply_markup
    r = await http.post(f"{TG_API}/sendMessage", json=payload)
    if r.is_error:
        log.error("sendMessage error %s: %s", r.status_code, r.text)


def default_keyboard() -> Dict[str, Any]:
    # –ü—Ä–æ—Å—Ç—ã–µ ‚Äú–≥–æ—Ç–æ–≤—ã–µ‚Äù –∫–Ω–æ–ø–∫–∏ (Reply Keyboard)
    return {
        "keyboard": [
            [{"text": "‚ÑπÔ∏è –ü–æ–º–æ—â—å"}, {"text": "üñºÔ∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞"}],
            [{"text": "üü¢ –í–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞"}, {"text": "üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞"}],
        ],
        "resize_keyboard": True,
        "one_time_keyboard": False,
    }


@app.post("/webhook/{secret}")
async def webhook(secret: str, request: Request):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç –ø—É—Ç–∏, —á—Ç–æ–±—ã –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –Ω–µ –¥–µ—Ä–≥–∞–ª–∏ –Ω–∞—à —ç–Ω–¥–ø–æ–∏–Ω—Ç
    if secret != WEBHOOK_SECRET:
        raise HTTPException(status_code=404)

    update = await request.json()
    log.debug("update: %s", update)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if "message" in update:
        msg = update["message"]
        chat_id = msg["chat"]["id"]
        text = msg.get("text", "") or ""

        # –ö–æ–º–∞–Ω–¥—ã/–∫–Ω–æ–ø–∫–∏
        normalized = text.strip().lower()
        if normalized in ("/start", "start"):
            await tg_send_message(
                chat_id,
                "‚úÖ –ë–æ—Ç –Ω–∞ Railway –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –≤–µ–±—Ö—É–∫!\n–ù–∞–ø–∏—à–∏ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç ‚Äî —è –æ—Ç–≤–µ—á—É.",
                reply_markup=default_keyboard(),
            )
        elif normalized in ("‚ÑπÔ∏è –ø–æ–º–æ—â—å", "/help", "help"):
            await tg_send_message(
                chat_id,
                "–î–æ—Å—Ç—É–ø–Ω–æ:\n‚Ä¢ /start ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É\n‚Ä¢ –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç ‚Äî —è –µ–≥–æ –ø–æ–≤—Ç–æ—Ä—é\n‚Ä¢ ‚ÄúüñºÔ∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞‚Äù ‚Äî –∑–∞–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é",
                reply_markup=default_keyboard(),
            )
        elif normalized in ("üñºÔ∏è –∫–∞—Ä—Ç–∏–Ω–∫–∞", "–∫–∞—Ä—Ç–∏–Ω–∫–∞"):
            await tg_send_message(chat_id, "–ó–∞–≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. (–°–µ–π—á–∞—Å –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç.)")
        elif normalized in ("üü¢ –≤–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞", "–≤–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞", "üî¥ –≤—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞", "–≤—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞"):
            await tg_send_message(chat_id, "–û–∫, –ø—Ä–∏–Ω—è–ª. (–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π on/off —Ñ–ª–∞–≥.)")
        else:
            # —ç—Ö–æ-–æ—Ç–≤–µ—Ç
            await tg_send_message(chat_id, f"–Ø –ø–æ–ª—É—á–∏–ª: {text}", reply_markup=default_keyboard())

    # –ú–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å: callback_query, edited_message –∏ —Ç.–¥.
    return {"ok": True}
