import os
import logging
import asyncio
from typing import Any, Dict, Optional

from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import JSONResponse
from contextlib import asynccontextmanager
import httpx
from openai import AsyncOpenAI

# --------- Config ---------
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")
log = logging.getLogger("gptbot")

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "supers3cr3t123456")

OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o")          # Chat
OPENAI_IMAGE_MODEL = os.getenv("OPENAI_IMAGE_MODEL", "dall-e-3")  # Images

if not TELEGRAM_BOT_TOKEN:
    raise RuntimeError("‚ùå TELEGRAM_BOT_TOKEN is not set")
if not OPENAI_API_KEY:
    raise RuntimeError("‚ùå OPENAI_API_KEY is not set")

TG_API = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}"
http: Optional[httpx.AsyncClient] = None
client = AsyncOpenAI(api_key=OPENAI_API_KEY)

# –ê–¥–º–∏–Ω –∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
ADMIN_IDS = {1752390166}  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π Telegram ID
BOT_ENABLED = True
CHAT_MODES: Dict[int, str] = {}

# --------- Lifespan ---------
@asynccontextmanager
async def lifespan(app: FastAPI):
    global http
    http = httpx.AsyncClient(timeout=10.0)
    try:
        yield
    finally:
        await http.aclose()

app = FastAPI(lifespan=lifespan)

# --------- Helpers ---------
async def tg_send_message(chat_id: int, text: str, reply_markup: Dict[str, Any] | None = None):
    assert http is not None
    payload: Dict[str, Any] = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "HTML"
    }
    if reply_markup:
        payload["reply_markup"] = reply_markup
    try:
        r = await http.post(f"{TG_API}/sendMessage", json=payload)
        if r.is_error:
            log.error("sendMessage %s: %s", r.status_code, r.text)
    except Exception as e:
        log.exception("sendMessage failed: %s", e)


def kb_main(is_admin: bool = False) -> Dict[str, Any]:
    kb = {
        "keyboard": [
            [{"text": "üí¨ –ß–∞—Ç —Å GPT"}, {"text": "üé® –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"}],
            [{"text": "‚ÑπÔ∏è –ü–æ–º–æ—â—å"}],
        ],
        "resize_keyboard": True,
    }
    if is_admin:
        kb["keyboard"].append([{"text": "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"}])
    return kb


def kb_admin() -> Dict[str, Any]:
    return {
        "keyboard": [
            [{"text": "üü¢ –í–∫–ª—é—á–∏—Ç—å –±–æ—Ç"}, {"text": "üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç"}],
            [{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"}],
        ],
        "resize_keyboard": True,
    }

# --------- OpenAI ---------
async def do_chat(chat_id: int, text: str):
    try:
        response = await client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=[{"role": "user", "content": text}],
        )
        answer = response.choices[0].message.content
        await tg_send_message(chat_id, answer)
    except Exception as e:
        log.exception("chat failed")
        await tg_send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ò–ò: {e}")


async def do_image(chat_id: int, prompt: str):
    try:
        resp = await client.images.generate(
            model=OPENAI_IMAGE_MODEL,
            prompt=prompt,
            size="1024x1024",
        )
        image_url = resp.data[0].url
        await tg_send_message(chat_id, f"üñº <b>–ì–æ—Ç–æ–≤–æ!</b>\n{image_url}")
    except Exception as e:
        log.exception("image failed")
        await tg_send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

# --------- Routes ---------
@app.get("/health")
async def health():
    return {"ok": True}


@app.post("/webhook/{secret}")
async def webhook(secret: str, request: Request):
    if secret != WEBHOOK_SECRET:
        raise HTTPException(status_code=404)

    try:
        update = await request.json()
    except Exception:
        log.warning("Non-JSON update")
        return JSONResponse({"ok": True})

    asyncio.create_task(handle_update(update))
    return JSONResponse({"ok": True})

# --------- Main Logic ---------
async def handle_update(update: Dict[str, Any]):
    global BOT_ENABLED
    try:
        msg = update.get("message") or update.get("edited_message")
        if not msg:
            return

        chat_id = msg["chat"]["id"]
        text = (msg.get("text") or "").strip()
        low = text.casefold()
        is_admin = chat_id in ADMIN_IDS

        # –ï—Å–ª–∏ –±–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω
        if not BOT_ENABLED and not is_admin:
            await tg_send_message(chat_id, "‚è∏ –ë–æ—Ç –Ω–∞ –ø–∞—É–∑–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        # --- –ö–æ–º–∞–Ω–¥—ã ---
        if low in ("/start", "start"):
            CHAT_MODES[chat_id] = "chat"
            await tg_send_message(
                chat_id,
                "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GPTBOT!</b>\n\n"
                "üü¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã:\n"
                "‚Ä¢ <b>–ß–∞—Ç —Å GPT</b> ‚Äî –æ—Ç–≤–µ—á–∞—é –∫–∞–∫ –ò–ò\n"
                "‚Ä¢ <b>–°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</b> ‚Äî —Ä–∏—Å—É—é –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∫–Ω–æ–ø–∫–æ–π –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
                reply_markup=kb_main(is_admin=is_admin),
            )
            return

        if low in ("‚ÑπÔ∏è –ø–æ–º–æ—â—å", "/help", "help"):
            await tg_send_message(
                chat_id,
                "‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞</b>\n\n"
                "‚Ä¢ ¬´üí¨ –ß–∞—Ç —Å GPT¬ª ‚Äî —Ç–µ–∫—Å—Ç –ø–æ–π–¥—ë—Ç –≤ –ò–ò\n"
                "‚Ä¢ ¬´üé® –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ¬ª ‚Äî —Ç–µ–∫—Å—Ç = –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏\n"
                "‚Ä¢ –ö–æ–º–∞–Ω–¥–∞: <code>/image –≤–∞—à_—Ç–µ–∫—Å—Ç</code>\n",
            )
            return

        # --- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ---
        if low in ("/admin", "üõ† –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"):
            if not is_admin:
                await tg_send_message(chat_id, "üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                return
            status = "üü¢ –í–ö–õ–Æ–ß–ï–ù" if BOT_ENABLED else "üî¥ –í–´–ö–õ–Æ–ß–ï–ù"
            await tg_send_message(
                chat_id,
                f"üõ† <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n–°—Ç–∞—Ç—É—Å: {status}\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /on /off",
                reply_markup=kb_admin(),
            )
            return

        if low in ("/on", "üü¢ –≤–∫–ª—é—á–∏—Ç—å –±–æ—Ç", "–≤–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞"):
            if not is_admin:
                await tg_send_message(chat_id, "üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
                return
            BOT_ENABLED = True
            await tg_send_message(chat_id, "‚úÖ –ë–æ—Ç –≤–∫–ª—é—á—ë–Ω.", reply_markup=kb_admin())
            return

        if low in ("/off", "üî¥ –≤—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç", "–≤—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞"):
            if not is_admin:
                await tg_send_message(chat_id, "üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
                return
            BOT_ENABLED = False
            await tg_send_message(chat_id, "‚è∏ –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω.", reply_markup=kb_admin())
            return

        if low in ("‚¨ÖÔ∏è –Ω–∞–∑–∞–¥",):
            await tg_send_message(chat_id, "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é.", reply_markup=kb_main(is_admin=is_admin))
            return

        # --- –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤ ---
        if low in ("üí¨ —á–∞—Ç —Å gpt",):
            CHAT_MODES[chat_id] = "chat"
            await tg_send_message(chat_id, "üó£ –†–µ–∂–∏–º: –ß–∞—Ç —Å GPT")
            return

        if low in ("üé® —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",):
            CHAT_MODES[chat_id] = "image"
            await tg_send_message(chat_id, "üñº –†–µ–∂–∏–º: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ.")
            return

        if low.startswith("/image"):
            prompt = text[len("/image"):].strip()
            if not prompt:
                await tg_send_message(chat_id, "üì∏ –ü—Ä–∏–º–µ—Ä: /image –∑–∞–∫–∞—Ç –Ω–∞–¥ –º–æ—Ä–µ–º")
                return
            await do_image(chat_id, prompt)
            return

        # --- –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ ---
        mode = CHAT_MODES.get(chat_id, "chat")
        if mode == "image":
            await do_image(chat_id, text)
        else:
            await do_chat(chat_id, text)

    except Exception as e:
        log.exception("handle_update failed: %s", e)
