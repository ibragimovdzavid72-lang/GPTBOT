# app.py
import os
import json
import base64
import asyncio
import logging
from typing import Any, Dict, Optional

import httpx
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import JSONResponse, PlainTextResponse

# ==================  CONFIG  ==================
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")
log = logging.getLogger("gptbot")

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET")
TELEGRAM_WEBHOOK_TOKEN = os.getenv("TELEGRAM_WEBHOOK_TOKEN")  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")  # –¥–æ–±–∞–≤—å –≤ Railway, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –ò–ò
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o-mini")       # –º–æ–∂–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å
OPENAI_IMAGE_MODEL = os.getenv("OPENAI_IMAGE_MODEL", "gpt-image-1")
IMAGE_SIZE = os.getenv("IMAGE_SIZE", "1024x1024")             # 256x256, 512x512, 1024x1024

if not TELEGRAM_BOT_TOKEN or not WEBHOOK_SECRET:
    raise RuntimeError("TELEGRAM_BOT_TOKEN and WEBHOOK_SECRET must be set")

TG_API = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}"

# HTTP-–∫–ª–∏–µ–Ω—Ç –∫ Telegram
http: Optional[httpx.AsyncClient] = None

# –ü–∞–º—è—Ç—å —Ä–µ–∂–∏–º–æ–≤ –Ω–∞ —á–∞—Ç (–ø—Ä–æ—Å—Ç–∞—è, –≤ –û–ó–£, –ø–µ—Ä–µ–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π –∑–∞–ø—É—Å–∫)
CHAT_MODES: Dict[int, str] = {}  # chat_id -> "chat" | "image"

# ------------------ OpenAI Async client ------------------
try:
    # –ù–æ–≤—ã–π SDK (openai>=1.0): AsyncOpenAI
    from openai import AsyncOpenAI
    openai_client = AsyncOpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY else None
except Exception:
    openai_client = None

# ==================  FASTAPI  ==================
async def lifespan(app: FastAPI):
    global http
    http = httpx.AsyncClient(
        base_url=TG_API,
        timeout=httpx.Timeout(connect=5.0, read=15.0, write=5.0, pool=5.0),
        headers={"Accept": "application/json"},
    )
    try:
        yield
    finally:
        await http.aclose()

app = FastAPI(lifespan=lifespan)

# ==================  TG HELPERS  ==================
def escape_html(s: str) -> str:
    return s.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")

def default_keyboard() -> Dict[str, Any]:
    return {
        "keyboard": [
            [{"text": "üí¨ –ß–∞—Ç —Å GPT"}, {"text": "üé® –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"}],
            [{"text": "‚ÑπÔ∏è –ü–æ–º–æ—â—å"}],
        ],
        "resize_keyboard": True,
        "one_time_keyboard": False,
        "is_persistent": True,
    }

async def tg_send_message(chat_id: int, text: str, reply_markup: Dict[str, Any] | None = None):
    assert http is not None
    payload = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "HTML",
        "disable_web_page_preview": True,
    }
    if reply_markup:
        payload["reply_markup"] = reply_markup
    try:
        r = await http.post("/sendMessage", json=payload)
        if r.is_error:
            log.error("sendMessage %s: %s", r.status_code, r.text)
    except Exception:
        log.exception("sendMessage failed")

async def tg_send_photo(chat_id: int, image_bytes: bytes, caption: str | None = None):
    assert http is not None
    try:
        files = {"photo": ("image.png", image_bytes, "image/png")}
        data = {"chat_id": str(chat_id)}
        if caption:
            data["caption"] = caption
            data["parse_mode"] = "HTML"
        r = await http.post("/sendPhoto", data=data, files=files)
        if r.is_error:
            log.error("sendPhoto %s: %s", r.status_code, r.text)
    except Exception:
        log.exception("sendPhoto failed")

# ==================  ROUTES  ==================
@app.get("/")
async def root():
    return PlainTextResponse("OK")

@app.get("/health")
async def health():
    return {"ok": True}

@app.post("/webhook/{secret}")
async def webhook(secret: str, request: Request):
    # 1) –°–µ–∫—Ä–µ—Ç –ø—É—Ç–∏
    if secret != WEBHOOK_SECRET:
        raise HTTPException(status_code=404)
    # 2) –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Telegram (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø—Ä–∏ setWebhook)
    if TELEGRAM_WEBHOOK_TOKEN:
        header = request.headers.get("x-telegram-bot-api-secret-token")
        if header != TELEGRAM_WEBHOOK_TOKEN:
            raise HTTPException(status_code=403)
    # 3) –ë—ã—Å—Ç—Ä–æ —á–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∏ —Å—Ä–∞–∑—É 200
    try:
        raw = await asyncio.wait_for(request.body(), timeout=1.5)
    except asyncio.TimeoutError:
        return JSONResponse({"ok": True})
    if not raw:
        return JSONResponse({"ok": True})
    asyncio.create_task(process_raw_update(raw))
    return JSONResponse({"ok": True})

# ==================  BACKGROUND LOGIC  ==================
async def process_raw_update(raw: bytes):
    try:
        update = json.loads(raw.decode("utf-8"))
    except Exception:
        log.warning("invalid JSON payload")
        return
    await handle_update(update)

async def handle_update(update: Dict[str, Any]):
    try:
        msg = update.get("message") or update.get("edited_message") or update.get("channel_post")
        if not msg:
            return

        chat_id = msg["chat"]["id"]
        text = (msg.get("text") or "").strip()
        low = text.casefold()

        # --- –ö–æ–º–∞–Ω–¥—ã/–∫–Ω–æ–ø–∫–∏ ---
        if low in ("/start", "start"):
            CHAT_MODES[chat_id] = "chat"
            await tg_send_message(
                chat_id,
                "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GPTBOT!</b>\n\n"
                "–Ø –≥–æ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –¥–≤—É—Ö —Ä–µ–∂–∏–º–∞—Ö:\n"
                "‚Ä¢ <b>–ß–∞—Ç —Å GPT</b> ‚Äî –æ—Ç–≤–µ—á–∞—é –∫–∞–∫ –ò–ò\n"
                "‚Ä¢ <b>–°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</b> ‚Äî —Ä–∏—Å—É—é –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
                reply_markup=default_keyboard(),
            )
            await tg_send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=default_keyboard())
            return

        if low in ("‚ÑπÔ∏è –ø–æ–º–æ—â—å", "/help", "help"):
            await tg_send_message(
                chat_id,
                "‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞</b>\n\n"
                "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ ¬´üí¨ –ß–∞—Ç —Å GPT¬ª ‚Äî –∏ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –ø–æ–π–¥—ë—Ç –≤ –ò–ò.\n"
                "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ ¬´üé® –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ¬ª ‚Äî –∏ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞–Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ–º –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–∫–∏.\n"
                "‚Ä¢ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/image –≤–∞—à_–æ–ø–∏—Å–∞–Ω–∏–µ</code>",
            )
            return

        if low in ("üí¨ —á–∞—Ç —Å gpt",):
            CHAT_MODES[chat_id] = "chat"
            await tg_send_message(chat_id, "üó£ –†–µ–∂–∏–º: <b>–ß–∞—Ç —Å GPT</b>. –ü–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å ‚Äî –æ—Ç–≤–µ—á—É –∫–∞–∫ –ò–ò.")
            return

        if low in ("üé® —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",):
            CHAT_MODES[chat_id] = "image"
            await tg_send_message(
                chat_id,
                "üñº –†–µ–∂–∏–º: <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</b>.\n"
                "–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å. –ü—Ä–∏–º–µ—Ä: <i>–∫–æ—Ç –Ω–∞ —Å–∫–µ–π—Ç–µ –≤ –≥–æ—Ä–æ–¥–µ</i>.",
            )
            return

        # /image c –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º ‚Äî –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
        if low.startswith("/image"):
            prompt = text[len("/image"):].strip()
            if not prompt:
                await tg_send_message(
                    chat_id,
                    "üì∏ –§–æ—Ä–º–∞—Ç: <code>/image –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç –Ω–∞–¥ –º–æ—Ä–µ–º</code>\n"
                    "–ò–ª–∏ –≤–∫–ª—é—á–∏—Ç–µ —Ä–µ–∂–∏–º ¬´üé® –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ¬ª –∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ.",
                )
                return
            await do_image(chat_id, prompt)
            return

        # --- –†–µ–∂–∏–º—ã: chat / image ---
        mode = CHAT_MODES.get(chat_id, "chat")

        if mode == "image":
            # –õ—é–±–æ–π —Ç–µ–∫—Å—Ç ‚Äî —ç—Ç–æ prompt –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–∫–∏
            await do_image(chat_id, text)
            return

        # –ò–Ω–∞—á–µ ‚Äî —Ä–µ–∂–∏–º chat
        await do_chat(chat_id, text)

    except Exception:
        log.exception("handle update error")

# ==================  CHAT & IMAGE IMPLEMENTATION  ==================
async def do_chat(chat_id: int, user_text: str):
    # –ï—Å–ª–∏ –Ω–µ—Ç –∫–ª—é—á–∞ OpenAI ‚Äî –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –∏ –Ω–µ –ø–∞–¥–∞–µ–º
    if not openai_client:
        await tg_send_message(
            chat_id,
            "‚ö†Ô∏è –ò–ò –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é <b>OPENAI_API_KEY</b> –≤ Railway ‚Äî –∏ —è —Å—Ç–∞–Ω—É —É–º–Ω—ã–º ü§ñ",
        )
        return
    try:
        resp = await openai_client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=[
                {"role": "system", "content": "–í—ã –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π—Ç–µ –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."},
                {"role": "user", "content": user_text},
            ],
            temperature=0.7,
            max_tokens=700,
        )
        answer = (resp.choices[0].message.content or "").strip()
        if not answer:
            answer = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —Å–º–æ–≥ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç."
        await tg_send_message(chat_id, escape_html(answer))
    except Exception as e:
        log.exception("openai chat failed")
        await tg_send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ò–ò: <code>{escape_html(str(e))}</code>")

async def do_image(chat_id: int, prompt: str):
    if not openai_client:
        await tg_send_message(
            chat_id,
            "‚ö†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –î–æ–±–∞–≤—å—Ç–µ <b>OPENAI_API_KEY</b> –≤ Railway.",
        )
        return
    # –°–æ–æ–±—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ–º
    await tg_send_message(chat_id, f"üé® –†–∏—Å—É—é –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é: <i>{escape_html(prompt)}</i> ‚Ä¶")
    try:
        img = await openai_client.images.generate(
            model=OPENAI_IMAGE_MODEL,
            prompt=prompt,
            size=IMAGE_SIZE,
            response_format="b64_json",
        )
        b64 = img.data[0].b64_json
        image_bytes = base64.b64decode(b64)
        await tg_send_photo(chat_id, image_bytes, caption=f"–ì–æ—Ç–æ–≤–æ: <i>{escape_html(prompt)}</i>")
    except Exception as e:
        log.exception("openai image failed")
        await tg_send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: <code>{escape_html(str(e))}</code>")
