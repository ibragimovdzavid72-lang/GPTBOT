# app.py
import os
import json
import base64
import asyncio
import logging
from typing import Any, Dict, Optional, List

import httpx
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import JSONResponse, PlainTextResponse

# ============== LOGGING & CONFIG ==============
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")
log = logging.getLogger("gptbot")

# ---- –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞–≤–∞–π –≤ Railway ‚Üí Variables (–∏–ª–∏ –æ—Å—Ç–∞–≤—å —Ç—É—Ç –¥–µ—Ñ–æ–ª—Ç—ã –¥–ª—è –ª–æ–∫–∞–ª–∫–∏) ----
TELEGRAM_BOT_TOKEN       = os.getenv("TELEGRAM_BOT_TOKEN", "PASTE_TELEGRAM_BOT_TOKEN_HERE")
WEBHOOK_SECRET           = os.getenv("WEBHOOK_SECRET", "supersecret123456")
TELEGRAM_WEBHOOK_TOKEN   = os.getenv("TELEGRAM_WEBHOOK_TOKEN", "")  # –º–æ–∂–Ω–æ –ø—É—Å—Ç–æ

OPENAI_API_KEY           = os.getenv("OPENAI_API_KEY", "")
OPENAI_MODEL             = os.getenv("OPENAI_MODEL", "gpt-4o-mini")
OPENAI_IMAGE_MODEL       = os.getenv("OPENAI_IMAGE_MODEL", "gpt-image-1")  # –∏–ª–∏ "dall-e-3"
IMAGE_SIZE               = os.getenv("IMAGE_SIZE", "1024x1024")

# –ê–¥–º–∏–Ω—ã: —Å–ø–∏—Å–æ–∫ ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä. "123456,987654"
ADMIN_IDS_RAW            = os.getenv("ADMIN_IDS", "")
ADMIN_IDS: List[int]     = [int(x) for x in ADMIN_IDS_RAW.replace(" ", "").split(",") if x.strip().isdigit()]

if not TELEGRAM_BOT_TOKEN or not WEBHOOK_SECRET:
    raise RuntimeError("TELEGRAM_BOT_TOKEN and WEBHOOK_SECRET must be set")

TG_API = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}"

# HTTP –∫–ª–∏–µ–Ω—Ç –∫ Telegram
http: Optional[httpx.AsyncClient] = None

# –°–æ—Å—Ç–æ—è–Ω–∏—è
CHAT_MODES: Dict[int, str] = {}        # chat_id -> "chat" | "image"
BOT_ENABLED: bool = True               # –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç—É–º–±–ª–µ—Ä; –∞–¥–º–∏–Ω –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç /on /off

# OpenAI client (async)
try:
    from openai import AsyncOpenAI
    openai_client = AsyncOpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY else None
except Exception:
    openai_client = None

# ============== FASTAPI LIFESPAN ==============
async def lifespan(app: FastAPI):
    global http
    http = httpx.AsyncClient(
        base_url=TG_API,
        timeout=httpx.Timeout(connect=5.0, read=20.0, write=5.0, pool=5.0),
        headers={"Accept": "application/json"},
    )
    try:
        yield
    finally:
        await http.aclose()

app = FastAPI(lifespan=lifespan)

# ============== HELPERS (TG) ==============
def escape_html(s: str) -> str:
    return s.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")

def kb_main(is_admin: bool = False) -> Dict[str, Any]:
    rows = [
        [{"text": "üí¨ –ß–∞—Ç —Å GPT"}, {"text": "üé® –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"}],
        [{"text": "‚ÑπÔ∏è –ü–æ–º–æ—â—å"}],
    ]
    if is_admin:
        rows.append([{"text": "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"}])
    return {"keyboard": rows, "resize_keyboard": True, "is_persistent": True}

def kb_admin() -> Dict[str, Any]:
    return {
        "keyboard": [
            [{"text": "üü¢ –í–∫–ª—é—á–∏—Ç—å –±–æ—Ç"}, {"text": "üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç"}],
            [{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"}],
        ],
        "resize_keyboard": True,
        "is_persistent": True,
    }

async def tg_send_message(chat_id: int, text: str, reply_markup: Dict[str, Any] | None = None):
    assert http is not None
    payload = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "HTML",
        "disable_web_page_preview": True,
    }
    if reply_markup:
        payload["reply_markup"] = reply_markup
    try:
        r = await http.post("/sendMessage", json=payload)
        if r.is_error:
            log.error("sendMessage %s: %s", r.status_code, r.text)
    except Exception:
        log.exception("sendMessage failed")

async def tg_send_photo_bytes(chat_id: int, image_bytes: bytes, caption: str | None = None):
    assert http is not None
    try:
        files = {"photo": ("image.png", image_bytes, "image/png")}
        data = {"chat_id": str(chat_id)}
        if caption:
            data["caption"] = caption
            data["parse_mode"] = "HTML"
        r = await http.post("/sendPhoto", data=data, files=files)
        if r.is_error:
            log.error("sendPhoto(bytes) %s: %s", r.status_code, r.text)
    except Exception:
        log.exception("sendPhoto(bytes) failed")

async def tg_send_photo_url(chat_id: int, url: str, caption: str | None = None):
    assert http is not None
    try:
        data = {"chat_id": str(chat_id), "photo": url}
        if caption:
            data["caption"] = caption
            data["parse_mode"] = "HTML"
        r = await http.post("/sendPhoto", data=data)
        if r.is_error:
            log.error("sendPhoto(url) %s: %s", r.status_code, r.text)
    except Exception:
        log.exception("sendPhoto(url) failed")

# ============== ROUTES ==============
@app.get("/")
async def root():
    return PlainTextResponse("OK")

@app.get("/health")
async def health():
    return {"ok": True, "enabled": BOT_ENABLED}

@app.post("/webhook/{secret}")
async def webhook(secret: str, request: Request):
    if secret != WEBHOOK_SECRET:
        raise HTTPException(status_code=404)
    if TELEGRAM_WEBHOOK_TOKEN:
        header = request.headers.get("x-telegram-bot-api-secret-token")
        if header != TELEGRAM_WEBHOOK_TOKEN:
            raise HTTPException(status_code=403)
    try:
        raw = await asyncio.wait_for(request.body(), timeout=1.5)
    except asyncio.TimeoutError:
        return JSONResponse({"ok": True})
    if not raw:
        return JSONResponse({"ok": True})
    asyncio.create_task(process_raw_update(raw))
    return JSONResponse({"ok": True})

# ============== BACKGROUND ==============
async def process_raw_update(raw: bytes):
    try:
        update = json.loads(raw.decode("utf-8"))
    except Exception:
        log.warning("invalid JSON payload")
        return
    await handle_update(update)

async def handle_update(update: Dict[str, Any]):
    global BOT_ENABLED  # –æ–±—ä—è–≤–ª—è–µ–º —Å—Ä–∞–∑—É –≤ –Ω–∞—á–∞–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏
    try:
        msg = update.get("message") or update.get("edited_message") or update.get("channel_post")
        if not msg:
            return

        chat_id = msg["chat"]["id"]
        text = (msg.get("text") or "").strip()
        low = text.casefold()
        is_admin = chat_id in ADMIN_IDS

        # --- –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç—É–º–±–ª–µ—Ä ---
        if not BOT_ENABLED and not is_admin:
            await tg_send_message(chat_id, "‚è∏ –ë–æ—Ç –Ω–∞ –ø–∞—É–∑–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        # --- –ö–æ–º–∞–Ω–¥—ã/–∫–Ω–æ–ø–∫–∏ ---
        if low in ("/start", "start"):
            CHAT_MODES[chat_id] = "chat"
            await tg_send_message(
                chat_id,
                "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GPTBOT!</b>\n\n"
                "–†–µ–∂–∏–º—ã:\n"
                "‚Ä¢ <b>–ß–∞—Ç —Å GPT</b> ‚Äî –æ—Ç–≤–µ—á–∞—é –∫–∞–∫ –ò–ò\n"
                "‚Ä¢ <b>–°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</b> ‚Äî —Ä–∏—Å—É—é –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
                reply_markup=kb_main(is_admin=is_admin),
            )
            await tg_send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb_main(is_admin=is_admin))
            return

        if low in ("‚ÑπÔ∏è –ø–æ–º–æ—â—å", "/help", "help"):
            await tg_send_message(
                chat_id,
                "‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞</b>\n\n"
                "‚Ä¢ ¬´üí¨ –ß–∞—Ç —Å GPT¬ª ‚Äî —Ç–µ–∫—Å—Ç –ø–æ–π–¥—ë—Ç –≤ –ò–ò\n"
                "‚Ä¢ ¬´üé® –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ¬ª ‚Äî —Ç–µ–∫—Å—Ç = –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏\n"
                "‚Ä¢ –ö–æ–º–∞–Ω–¥–∞: <code>/image –≤–∞—à_–æ–ø–∏—Å–∞–Ω–∏–µ</code>\n"
                "‚Ä¢ –ê–¥–º–∏–Ω: /on /off /admin",
            )
            return

        # ----- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å -----
        if low in ("/admin", "üõ† –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"):
            if not is_admin:
                await tg_send_message(chat_id, "üö´ –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                return
            status = "üü¢ –í–ö–õ–Æ–ß–ï–ù" if BOT_ENABLED else "üî¥ –í–´–ö–õ–Æ–ß–ï–ù"
            await tg_send_message(
                chat_id,
                f"üõ† <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: {status}\n–ö–æ–º–∞–Ω–¥—ã: /on, /off",
                reply_markup=kb_admin(),
            )
            return

        if low in ("/on", "üü¢ –≤–∫–ª—é—á–∏—Ç—å –±–æ—Ç", "–≤–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞"):
            if not is_admin:
                await tg_send_message(chat_id, "üö´ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤–∫–ª—é—á–∞—Ç—å –±–æ—Ç–∞.")
                return
            BOT_ENABLED = True
            await tg_send_message(chat_id, "‚úÖ –ë–æ—Ç –≤–∫–ª—é—á—ë–Ω.", reply_markup=kb_admin())
            return

        if low in ("/off", "üî¥ –≤—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç", "–≤—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞"):
            if not is_admin:
                await tg_send_message(chat_id, "üö´ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤—ã–∫–ª—é—á–∞—Ç—å –±–æ—Ç–∞.")
                return
            BOT_ENABLED = False
            await tg_send_message(chat_id, "‚è∏ –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", reply_markup=kb_admin())
            return

        if low in ("‚¨ÖÔ∏è –Ω–∞–∑–∞–¥",):
            await tg_send_message(chat_id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é.", reply_markup=kb_main(is_admin=is_admin))
            return

        # ----- –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ —Ä–µ–∂–∏–º–æ–≤ -----
        if low in ("üí¨ —á–∞—Ç —Å gpt",):
            CHAT_MODES[chat_id] = "chat"
            await tg_send_message(chat_id, "üó£ –†–µ–∂–∏–º: <b>–ß–∞—Ç —Å GPT</b>. –ü–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å ‚Äî –æ—Ç–≤–µ—á—É –∫–∞–∫ –ò–ò.")
            return

        if low in ("üé® —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",):
            CHAT_MODES[chat_id] = "image"
            await tg_send_message(chat_id, "üñº –†–µ–∂–∏–º: <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</b>. –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å.")
            return

        # ----- /image –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è -----
        if low.startswith("/image"):
            prompt = text[len("/image"):].strip()
            if not prompt:
                await tg_send_message(
                    chat_id,
                    "üì∏ –§–æ—Ä–º–∞—Ç: <code>/image –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç –Ω–∞–¥ –º–æ—Ä–µ–º</code>\n"
                    "–ò–ª–∏ –≤–∫–ª—é—á–∏—Ç–µ —Ä–µ–∂–∏–º ¬´üé® –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ¬ª –∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ.",
                )
                return
            await do_image(chat_id, prompt)
            return

        # ----- –†–µ–∂–∏–º—ã -----
        mode = CHAT_MODES.get(chat_id, "chat")
        if mode == "image":
            await do_image(chat_id, text)
            return

        await do_chat(chat_id, text)

    except Exception:
        log.exception("handle update error")

# ============== CHAT & IMAGE ==============
async def do_chat(chat_id: int, user_text: str):
    if not openai_client:
        await tg_send_message(
            chat_id,
            "‚ö†Ô∏è –ò–ò –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é <b>OPENAI_API_KEY</b> –≤ Railway.",
        )
        return
    try:
        resp = await openai_client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=[
                {"role": "system", "content": "–í—ã –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π—Ç–µ –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."},
                {"role": "user", "content": user_text},
            ],
            temperature=0.7,
            max_tokens=700,
        )
        answer = (resp.choices[0].message.content or "").strip()
        await tg_send_message(chat_id, escape_html(answer) or "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —Å–º–æ–≥ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç.")
    except Exception as e:
        log.exception("openai chat failed")
        await tg_send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ò–ò: <code>{escape_html(str(e))}</code>")

async def do_image(chat_id: int, prompt: str):
    if not openai_client:
        await tg_send_message(
            chat_id,
            "‚ö†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –î–æ–±–∞–≤—å—Ç–µ <b>OPENAI_API_KEY</b> –≤ Railway.",
        )
        return
    await tg_send_message(chat_id, f"üé® –†–∏—Å—É—é –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é: <i>{escape_html(prompt)}</i> ‚Ä¶")
    try:
        # –ë–µ–∑ response_format ‚Äî —Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å —Ç–µ–∫—É—â–∏–º–∏ API.
        img = await openai_client.images.generate(
            model=OPENAI_IMAGE_MODEL,
            prompt=prompt,
            size=IMAGE_SIZE,
        )
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ: –ø—Ä–æ–±—É–µ–º b64 –∏–ª–∏ url
        data0 = img.data[0]
        b64 = getattr(data0, "b64_json", None) or (data0.get("b64_json") if isinstance(data0, dict) else None)
        url = getattr(data0, "url", None) or (data0.get("url") if isinstance(data0, dict) else None)

        if b64:
            image_bytes = base64.b64decode(b64)
            await tg_send_photo_bytes(chat_id, image_bytes, caption=f"–ì–æ—Ç–æ–≤–æ: <i>{escape_html(prompt)}</i>")
        elif url:
            await tg_send_photo_url(chat_id, url, caption=f"–ì–æ—Ç–æ–≤–æ: <i>{escape_html(prompt)}</i>")
        else:
            await tg_send_message(chat_id, "‚ùå –ù–µ –ø–æ–ª—É—á–∏–ª –∫–∞—Ä—Ç–∏–Ω–∫—É –æ—Ç –º–æ–¥–µ–ª–∏.")
    except Exception as e:
        log.exception("openai image failed")
        await tg_send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: <code>{escape_html(str(e))}</code>")
