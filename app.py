import os
import json
import asyncio
from typing import Dict, Any, List, Optional

import httpx
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import JSONResponse

# ---------- ENV ----------
BOT_TOKEN       = os.getenv("TELEGRAM_BOT_TOKEN", "")
OPENAI_API_KEY  = os.getenv("OPENAI_API_KEY", "")
WEBHOOK_BASE    = os.getenv("WEBHOOK_BASE", "")       # https://gptbot-....up.railway.app
WEBHOOK_SECRET  = os.getenv("WEBHOOK_SECRET", "supersecret123456")
ADMIN_IDS       = [i.strip() for i in os.getenv("ADMIN_IDS", "").split(",") if i.strip()]
IMAGES_ENABLED  = os.getenv("IMAGES_ENABLED", "true").lower() == "true"
IMAGE_SIZE      = os.getenv("IMAGE_SIZE", "1024x1024")

if not (BOT_TOKEN and OPENAI_API_KEY and WEBHOOK_BASE and WEBHOOK_SECRET):
    raise RuntimeError("Some of TELEGRAM_BOT_TOKEN / OPENAI_API_KEY / WEBHOOK_BASE / WEBHOOK_SECRET are not set")

TG_API = f"https://api.telegram.org/bot{BOT_TOKEN}"
OPENAI_CHAT_MODEL = os.getenv("OPENAI_CHAT_MODEL", "gpt-4o-mini")
OPENAI_IMAGE_MODEL = os.getenv("OPENAI_IMAGE_MODEL", "gpt-image-1")  # —Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å images.generate

# ---------- STATE (–≤ –ø–∞–º—è—Ç–∏, –±–µ–∑ –ë–î) ----------
# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ (–≤–∫–ª/–≤—ã–∫–ª –±–æ—Ç). –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å.
STATE: Dict[str, Any] = {
    "paused": False,            # –µ—Å–ª–∏ True ‚Äî –±–æ—Ç –º–æ–ª—á–∏—Ç (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–æ–≤/–∫–æ–º–∞–Ω–¥)
    "images_enabled": IMAGES_ENABLED
}

# –ü–∞–º—è—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –ø–æ chat_id (—Ö—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π)
MEMORY: Dict[str, List[Dict[str, str]]] = {}
MAX_MEM = 20

# –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —á–∞—Ç—É: –ø–∞–º—è—Ç—å –≤–∫–ª/–≤—ã–∫–ª, –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤–∫–ª/–≤—ã–∫–ª
CHAT_FLAGS: Dict[str, Dict[str, Any]] = {}  # {chat_id: {"memory":True, "images":True}}

# ---------- APP ----------
app = FastAPI(title="Telegram GPT Bot")

# ---------- UI / –ö–ù–û–ü–ö–ò ----------
def main_menu_kb(chat_id: str) -> Dict[str, Any]:
    flags = CHAT_FLAGS.setdefault(chat_id, {"memory": True, "images": STATE["images_enabled"]})
    memory_label = "üß† –ü–∞–º—è—Ç—å: –í–ö–õ" if flags["memory"] else "üß† –ü–∞–º—è—Ç—å: –í–´–ö–õ"
    images_label = "üñº –ö–∞—Ä—Ç–∏–Ω–∫–∏: –í–ö–õ" if flags["images"] else "üñº –ö–∞—Ä—Ç–∏–Ω–∫–∏: –í–´–ö–õ"

    rows = [
        [
            {"text": "üß† –ü–∞–º—è—Ç—å", "callback_data": "toggle:memory"},
            {"text": "üñº –ö–∞—Ä—Ç–∏–Ω–∫–∏", "callback_data": "toggle:images"},
        ],
        [
            {"text": "üìú –ü–æ–º–æ—â—å", "callback_data": "help"},
            {"text": "üßπ –û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å", "callback_data": "clear_mem"},
        ],
    ]

    # –ê–¥–º–∏–Ω-–∫–Ω–æ–ø–∫–∏
    if flags and "admin" in flags or False:  # —Ñ–ª–∞–≥ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º; –ø—Ä–æ–≤–µ—Ä–∏–º –ø–æ —Å–ø–∏—Å–∫—É ADMIN_IDS –Ω–∏–∂–µ
        pass

    return {
        "inline_keyboard": rows
    }

ADMIN_KB = {
    "inline_keyboard": [
        [
            {"text": "‚è∏ –ü–∞—É–∑–∞", "callback_data": "admin:pause"},
            {"text": "‚ñ∂Ô∏è –†–µ–∑—é–ºe", "callback_data": "admin:resume"},
        ],
        [
            {"text": "‚öôÔ∏è –°—Ç–∞—Ç—É—Å", "callback_data": "admin:status"},
            {"text": "üöø –°–±—Ä–æ—Å –≤–µ–±—Ö—É–∫–∞", "callback_data": "admin:reset_webhook"},
        ]
    ]
}

# ---------- OPENAI ----------
# –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç new-style
from openai import OpenAI
client = OpenAI(api_key=OPENAI_API_KEY)

async def ai_answer(chat_id: str, user_text: str) -> str:
    """–û—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ OpenAI —Å –ø—Ä–æ—Å—Ç–æ–π –ø–∞–º—è—Ç—å—é (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)."""
    flags = CHAT_FLAGS.setdefault(chat_id, {"memory": True, "images": STATE["images_enabled"]})
    history = MEMORY.setdefault(chat_id, [])

    msgs = []
    if flags["memory"] and history:
        msgs.extend(history[-MAX_MEM:])

    msgs.append({"role": "user", "content": user_text})

    # –∑–∞–ø—Ä–æ—Å
    resp = await asyncio.to_thread(
        client.chat.completions.create,
        model=OPENAI_CHAT_MODEL,
        messages=msgs
    )
    text = resp.choices[0].message.content.strip()

    # –æ–±–Ω–æ–≤–ª—è–µ–º –ø–∞–º—è—Ç—å
    if flags["memory"]:
        history.extend([{"role": "user", "content": user_text},
                        {"role": "assistant", "content": text}])
        if len(history) > MAX_MEM:
            del history[:-MAX_MEM]

    return text

async def ai_image(prompt: str, size: str = IMAGE_SIZE) -> Optional[str]:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL) ‚Äî —Ç—Ä–µ–±—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–∏–ª–ª–∏–Ω–≥–∞ –≤ OpenAI."""
    try:
        resp = await asyncio.to_thread(
            client.images.generate,
            model=OPENAI_IMAGE_MODEL,
            prompt=prompt,
            size=size
        )
        return resp.data[0].url
    except Exception as e:
        # –õ–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è Railway
        print("Image error:", repr(e))
        return None

# ---------- TELEGRAM API ----------
async def tg_send_text(chat_id: str, text: str, reply_markup: Optional[Dict]=None, parse_mode: Optional[str]="HTML"):
    payload = {"chat_id": chat_id, "text": text}
    if parse_mode:
        payload["parse_mode"] = parse_mode
    if reply_markup:
        payload["reply_markup"] = json.dumps(reply_markup)
    async with httpx.AsyncClient(timeout=30) as cl:
        r = await cl.post(f"{TG_API}/sendMessage", data=payload)
        if r.status_code != 200:
            print("sendMessage error:", r.text)

async def tg_send_photo(chat_id: str, photo_url: str, caption: Optional[str]=None):
    payload = {"chat_id": chat_id, "photo": photo_url}
    if caption:
        payload["caption"] = caption
        payload["parse_mode"] = "HTML"
    async with httpx.AsyncClient(timeout=60) as cl:
        r = await cl.post(f"{TG_API}/sendPhoto", data=payload)
        if r.status_code != 200:
            print("sendPhoto error:", r.text)

async def tg_answer_cb(cb_id: str, text: Optional[str] = None, show_alert: bool=False):
    payload = {"callback_query_id": cb_id}
    if text:
        payload["text"] = text
    if show_alert:
        payload["show_alert"] = True
    async with httpx.AsyncClient(timeout=15) as cl:
        await cl.post(f"{TG_API}/answerCallbackQuery", data=payload)

async def set_my_commands():
    cmds = [
        {"command": "start", "description": "–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é"},
        {"command": "help",  "description": "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è"},
        {"command": "image", "description": "–°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é"},
        {"command": "pause", "description": "–ü–æ—Å—Ç–∞–≤–∏—Ç—å –±–æ—Ç–∞ –Ω–∞ –ø–∞—É–∑—É (–∞–¥–º–∏–Ω)"},
        {"command": "resume","description": "–°–Ω—è—Ç—å –ø–∞—É–∑—É (–∞–¥–º–∏–Ω)"},
    ]
    async with httpx.AsyncClient(timeout=15) as cl:
        await cl.post(f"{TG_API}/setMyCommands", json={"commands": cmds})

# ---------- WEBHOOK ----------
async def set_webhook():
    url = f"{WEBHOOK_BASE}/webhook/{WEBHOOK_SECRET}"
    async with httpx.AsyncClient(timeout=15) as cl:
        r = await cl.post(f"{TG_API}/setWebhook", data={"url": url})
        print("setWebhook:", r.text)

async def delete_webhook():
    async with httpx.AsyncClient(timeout=15) as cl:
        r = await cl.post(f"{TG_API}/deleteWebhook")
        print("deleteWebhook:", r.text)

# ---------- FASTAPI ROUTES ----------
@app.get("/health")
async def health():
    return {"ok": True, "paused": STATE["paused"]}

@app.on_event("startup")
async def on_startup():
    print("Starting up...")
    await set_webhook()
    await set_my_commands()

@app.on_event("shutdown")
async def on_shutdown():
    print("Shutting down...")
    await delete_webhook()

@app.post("/webhook/{secret}")
async def webhook(secret: str, request: Request):
    if secret != WEBHOOK_SECRET:
        raise HTTPException(status_code=404)

    update = await request.json()
    # –õ–æ–≥ –≤ Railway (–≤–∏–¥–Ω–æ –≤ Deploy/HTTP logs)
    print("UPDATE:", json.dumps(update, ensure_ascii=False))

    # callback_buttons
    if "callback_query" in update:
        cb = update["callback_query"]
        cb_id = cb["id"]
        from_id = str(cb["from"]["id"])
        chat_id = str(cb["message"]["chat"]["id"])
        data = cb.get("data", "")

        # –∞–¥–º–∏–Ω?
        is_admin = from_id in ADMIN_IDS

        if data == "toggle:memory":
            flags = CHAT_FLAGS.setdefault(chat_id, {"memory": True, "images": STATE["images_enabled"]})
            flags["memory"] = not flags["memory"]
            await tg_answer_cb(cb_id, f"–ü–∞–º—è—Ç—å: {'–í–ö–õ' if flags['memory'] else '–í–´–ö–õ'}")
        elif data == "toggle:images":
            flags = CHAT_FLAGS.setdefault(chat_id, {"memory": True, "images": STATE["images_enabled"]})
            flags["images"] = not flags["images"]
            await tg_answer_cb(cb_id, f"–ö–∞—Ä—Ç–∏–Ω–∫–∏: {'–í–ö–õ' if flags['images'] else '–í–´–ö–õ'}")
        elif data == "clear_mem":
            MEMORY[chat_id] = []
            await tg_answer_cb(cb_id, "–ü–∞–º—è—Ç—å —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞.")
        elif data == "help":
            await tg_answer_cb(cb_id, "–ü–∏—à–∏ —Ç–µ–∫—Å—Ç ‚Äî –æ—Ç–≤–µ—á—É. –ö–Ω–æ–ø–∫–∞ ¬´–ö–∞—Ä—Ç–∏–Ω–∫–∏¬ª –≤–∫–ª—é—á–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥–æ–π /image.")
        elif data == "admin:pause":
            if is_admin:
                STATE["paused"] = True
                await tg_answer_cb(cb_id, "–ë–æ—Ç –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø–∞—É–∑—É ‚úÖ", show_alert=True)
            else:
                await tg_answer_cb(cb_id, "–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞", show_alert=True)
        elif data == "admin:resume":
            if is_admin:
                STATE["paused"] = False
                await tg_answer_cb(cb_id, "–ü–∞—É–∑–∞ —Å–Ω—è—Ç–∞ ‚úÖ", show_alert=True)
            else:
                await tg_answer_cb(cb_id, "–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞", show_alert=True)
        elif data == "admin:status":
            if is_admin:
                chats = len(MEMORY)
                paused = STATE["paused"]
                await tg_answer_cb(cb_id, f"–°—Ç–∞—Ç—É—Å: paused={paused}, –ø–∞–º—è—Ç–∏ –ø–æ —á–∞—Ç–∞–º={chats}", show_alert=True)
            else:
                await tg_answer_cb(cb_id, "–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞", show_alert=True)
        elif data == "admin:reset_webhook":
            if is_admin:
                await delete_webhook()
                await set_webhook()
                await tg_answer_cb(cb_id, "–í–µ–±—Ö—É–∫ –ø–µ—Ä–µ–∑–∞–¥–∞–Ω ‚úÖ", show_alert=True)
            else:
                await tg_answer_cb(cb_id, "–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞", show_alert=True)
        else:
            await tg_answer_cb(cb_id, "–û–∫")

        # –û–±–Ω–æ–≤–∏–º –º–µ–Ω—é (–ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞)
        await tg_send_text(chat_id, "–ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ. –í—ã–±–∏—Ä–∞–π:", reply_markup=main_menu_kb(chat_id))
        return JSONResponse({"ok": True})

    # –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if "message" in update:
        msg = update["message"]
        chat_id = str(msg["chat"]["id"])
        from_id = str(msg["from"]["id"])
        text = msg.get("text", "") or ""
        is_admin = from_id in ADMIN_IDS

        # /start
        if text.startswith("/start"):
            welcome = (
                "<b>–ü—Ä–∏–≤–µ—Ç!</b> –Ø GPT-–±–æ—Ç —Å –ø–∞–º—è—Ç—å—é, –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏ –∏ –∞–¥–º–∏–Ω-–∫–Ω–æ–ø–∫–∞–º–∏.\n\n"
                "–ü–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –æ—Ç–≤–µ—á—É. –ö–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É –ø–æ–º–æ–≥—É—Ç –≤–∫–ª—é—á–∏—Ç—å –ø–∞–º—è—Ç—å, –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ."
            )
            await tg_send_text(chat_id, welcome, reply_markup=main_menu_kb(chat_id))
            # –µ—Å–ª–∏ –∞–¥–º–∏–Ω ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å
            if is_admin:
                await tg_send_text(chat_id, "<b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>", reply_markup=ADMIN_KB)
            return {"ok": True}

        # help
        if text.startswith("/help"):
            await tg_send_text(chat_id, "–ö–æ–º–∞–Ω–¥—ã: /start, /help, /image <–æ–ø–∏—Å–∞–Ω–∏–µ>, /pause (–∞–¥–º–∏–Ω), /resume (–∞–¥–º–∏–Ω)")
            return {"ok": True}

        # admin pause/resume
        if text.startswith("/pause"):
            if is_admin:
                STATE["paused"] = True
                await tg_send_text(chat_id, "–ü–∞—É–∑–∞ –≤–∫–ª—é—á–µ–Ω–∞ ‚úÖ")
            else:
                await tg_send_text(chat_id, "–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.")
            return {"ok": True}

        if text.startswith("/resume"):
            if is_admin:
                STATE["paused"] = False
                await tg_send_text(chat_id, "–ü–∞—É–∑–∞ —Å–Ω—è—Ç–∞ ‚úÖ")
            else:
                await tg_send_text(chat_id, "–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.")
            return {"ok": True}

        # –µ—Å–ª–∏ –ø–∞—É–∑–∞ ‚Äî –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–æ–≤)
        if STATE["paused"] and not is_admin:
            return {"ok": True}

        # /image
        if text.startswith("/image"):
            prompt = text.replace("/image", "", 1).strip()
            if not prompt:
                await tg_send_text(chat_id, "–ù–∞–ø–∏—à–∏ –ø–æ—Å–ª–µ /image –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏.")
                return {"ok": True}

            flags = CHAT_FLAGS.setdefault(chat_id, {"memory": True, "images": STATE["images_enabled"]})
            if not flags["images"]:
                await tg_send_text(chat_id, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤—ã–∫–ª—é—á–µ–Ω–∞ ‚òùÔ∏è –í–∫–ª—é—á–∏ –≤ –º–µ–Ω—é ¬´üñº –ö–∞—Ä—Ç–∏–Ω–∫–∏¬ª.")
                return {"ok": True}

            url = await ai_image(prompt, IMAGE_SIZE)
            if url:
                await tg_send_photo(chat_id, url, caption=f"<i>{prompt}</i>")
            else:
                await tg_send_text(chat_id, "‚ùóÔ∏è–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
            return {"ok": True}

        # –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç ‚Üí GPT
        reply = await ai_answer(chat_id, text)
        await tg_send_text(chat_id, reply)
        return {"ok": True}

    # —á—Ç–æ-—Ç–æ –∏–Ω–æ–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –æ–∫
    return {"ok": True}
