"""
–ú–æ–¥—É–ª—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –¥–ª—è Telegram-–±–æ—Ç–∞.

–°–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–º–∞–Ω–¥—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏,
–≤–∫–ª—é—á–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞.
"""

from aiogram import types
from aiogram.filters import CommandObject
import asyncpg

from .config import settings


def is_admin(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞.

    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
    :return: True, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    """
    return user_id in settings.ADMINS


def is_super_admin(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.
    
    –û–±—ã—á–Ω—ã–µ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ /,
    –Ω–æ —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.
    
    –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–∞–∫ –ü–ï–†–í–´–ô ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è ADMINS.
    –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ ADMINS="1752390166,123456789", —Ç–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω = 1752390166

    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
    :return: True, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    """
    if settings.ADMINS:
        # –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω - —ç—Ç–æ –ø–µ—Ä–≤—ã–π ID –≤ —Å–ø–∏—Å–∫–µ ADMINS
        super_admin_id = settings.ADMINS[0]
        return user_id == super_admin_id
    else:
        # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ ADMINS –ø—É—Å—Ç - –æ—Ç–∫–∞–∑—ã–≤–∞–µ–º –≤ –¥–æ—Å—Ç—É–ø–µ
        return False


async def is_bot_active(pool: asyncpg.pool.Pool) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –±–æ—Ç.

    :param pool: –ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    :return: True, –µ—Å–ª–∏ –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω, False otherwise
    """
    if not pool:
        return True  # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î, –±–æ—Ç —Å—á–∏—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º
        
    try:
        async with pool.acquire() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã bot_status
            table_exists = await conn.fetchval("""
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_name = 'bot_status'
                )
            """)
            
            if not table_exists:
                # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ—Ç, –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                return True
                
            row = await conn.fetchrow("SELECT is_active FROM bot_status ORDER BY id DESC LIMIT 1")
            if row is None:
                # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç, –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                return True
            return row["is_active"]
    except Exception:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º –±–æ—Ç –∞–∫—Ç–∏–≤–Ω—ã–º
        return True


async def cmd_admin_stats(message: types.Message, pool: asyncpg.pool.Pool):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin_stats - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param pool: –ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    """
    if not pool:
        await message.answer("‚õî –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    try:
        async with pool.acquire() as conn:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            count_users = await conn.fetchval("SELECT COUNT(DISTINCT username) FROM logs WHERE username IS NOT NULL")
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            count_msgs = await conn.fetchval("SELECT COUNT(*) FROM logs")
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ (—Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ—à–∏–±–∫–∞–º–∏)
            count_errors = await conn.fetchval("SELECT COUNT(*) FROM logs WHERE answer LIKE '‚ùå%'")

        await message.answer(
            f"üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:\n"
            f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count_users}\n"
            f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞–∑–µ: {count_msgs}\n"
            f"üí• –û—à–∏–±–æ–∫: {count_errors}"
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")


async def cmd_errors(message: types.Message, pool: asyncpg.pool.Pool):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /errors - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param pool: –ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    """
    if not pool:
        await message.answer("‚õî –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    try:
        async with pool.acquire() as conn:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π —Å –æ—à–∏–±–∫–∞–º–∏
            rows = await conn.fetch("SELECT * FROM logs WHERE answer LIKE '‚ùå%' ORDER BY id DESC LIMIT 10")

        if not rows:
            await message.answer("‚úÖ –û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        text = "\n\n".join(
            [f"üë§ {r['username'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}\nüïí {r['created_at']}\n‚ùì {r['command']} {r['args']}\nüí¨ {r['answer']}" for r in rows]
        )
        await message.answer("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏:\n\n" + text)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {e}")


async def cmd_bot_on(message: types.Message, pool: asyncpg.pool.Pool):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /bot_on - –≤–∫–ª—é—á–∞–µ—Ç –±–æ—Ç–∞.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param pool: –ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    """
    if not pool:
        await message.answer("‚õî –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    try:
        async with pool.acquire() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã bot_status
            table_exists = await conn.fetchval("""
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_name = 'bot_status'
                )
            """)
            
            if not table_exists:
                # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                await conn.execute("""
                    CREATE TABLE IF NOT EXISTS bot_status (
                        id SERIAL PRIMARY KEY,
                        is_active BOOLEAN DEFAULT TRUE
                    )
                """)
            
            await conn.execute("INSERT INTO bot_status (is_active) VALUES (TRUE)")
        await message.answer("‚úÖ –ë–æ—Ç –≤–∫–ª—é—á—ë–Ω!")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –±–æ—Ç–∞: {e}")


async def cmd_bot_off(message: types.Message, pool: asyncpg.pool.Pool):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /bot_off - –≤—ã–∫–ª—é—á–∞–µ—Ç –±–æ—Ç–∞.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param pool: –ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    """
    if not pool:
        await message.answer("‚õî –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    try:
        async with pool.acquire() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã bot_status
            table_exists = await conn.fetchval("""
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_name = 'bot_status'
                )
            """)
            
            if not table_exists:
                # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                await conn.execute("""
                    CREATE TABLE IF NOT EXISTS bot_status (
                        id SERIAL PRIMARY KEY,
                        is_active BOOLEAN DEFAULT TRUE
                    )
                """)
            
            await conn.execute("INSERT INTO bot_status (is_active) VALUES (FALSE)")
        await message.answer("üõë –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω!")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ –±–æ—Ç–∞: {e}")
