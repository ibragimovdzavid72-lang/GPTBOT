import logging
from typing import Any, Dict
from .settings import ADMIN_IDS, BOT_USERNAME, FREE_MSGS_PER_DAY, FREE_IMAGES_PER_DAY
from .tg import tg_send_message
from .openai_api import do_chat, do_image, do_image_edit
from .db import DB_ENABLED, usage_get_today

log = logging.getLogger("gptbot")

CHAT_MODES: Dict[int, str] = {}   # chat_id -> "chat"|"image"
BOT_ENABLED = True                # –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤—ã–∫–ª—é—á–∞—Ç—å –±–æ—Ç–∞

# ---------- –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----------
def kb_main(is_admin: bool = False) -> Dict[str, Any]:
    rows = [
        [{"text": "üí¨ –ß–∞—Ç —Å GPT"}, {"text": "üé® –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"}],
        [{"text": "‚ÑπÔ∏è –ü–æ–º–æ—â—å"}],
    ]
    if is_admin:
        rows.append([{"text": "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"}])
    return {"keyboard": rows, "resize_keyboard": True}

def kb_admin() -> Dict[str, Any]:
    return {
        "keyboard": [
            [{"text": "üü¢ –í–∫–ª—é—á–∏—Ç—å –±–æ—Ç"}, {"text": "üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç"}],
            [{"text": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"}, {"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"}],
        ],
        "resize_keyboard": True,
    }

def remove_keyboard() -> Dict[str, Any]:
    return {"remove_keyboard": True}

# ---------- —É—Ç–∏–ª–∏—Ç—ã ----------
def _is(text: str, *variants: str) -> bool:
    """–ì–∏–±–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞ –∏ —ç–º–æ–¥–∑–∏ –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –∏–ª–∏ –±–µ–∑ —ç–º–æ–¥–∑–∏."""
    low = (text or "").casefold().strip()
    for v in variants:
        vv = v.casefold().strip()
        if low == vv or low.replace("‚ÑπÔ∏è", "").strip() == vv.replace("‚ÑπÔ∏è", "").strip():
            return True
    return False

# ---------- –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ----------
async def handle_update(update: Dict[str, Any]):
    global BOT_ENABLED

    try:
        msg = update.get("message") or update.get("edited_message")
        if not msg:
            return

        chat = msg["chat"]
        chat_id = chat["id"]
        chat_type = chat.get("type")  # private | group | supergroup
        user_id = (msg.get("from") or {}).get("id")
        if not user_id:
            return

        text = (msg.get("text") or "").strip()
        low = text.casefold()
        is_admin = user_id in ADMIN_IDS

        # –í –≥—Ä—É–ø–ø–∞—Ö —Ä–µ–∞–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ @username –∏–ª–∏ —Å–ª—ç—à-–∫–æ–º–∞–Ω–¥—ã
        if chat_type in ("group", "supergroup"):
            if not low.startswith("/") and (BOT_USERNAME and BOT_USERNAME not in low):
                return

        # /whoami ‚Äî –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        if low.startswith("/whoami"):
            txt, img = await usage_get_today(user_id)
            await tg_send_message(
                chat_id,
                "user_id: <code>{}</code>\nchat_id: <code>{}</code>\nDB_ENABLED: <code>{}</code>\n"
                "–°–µ–≥–æ–¥–Ω—è: —Ç–µ–∫—Å—Ç {} / {}, –∫–∞—Ä—Ç–∏–Ω–∫–∏ {} / {}".format(
                    user_id, chat_id, DB_ENABLED, txt, FREE_MSGS_PER_DAY, img, FREE_IMAGES_PER_DAY
                )
            )
            return

        # –µ—Å–ª–∏ –±–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω –∞–¥–º–∏–Ω–æ–º ‚Äî –∏–≥–Ω–æ—Ä–∏–º –≤—Å–µ—Ö, –∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∞
        if not BOT_ENABLED and not is_admin:
            await tg_send_message(chat_id, "‚è∏ –ë–æ—Ç –Ω–∞ –ø–∞—É–∑–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        # ---------- –∫–æ–º–∞–Ω–¥—ã ----------
        if _is(text, "/start", "start", "–º–µ–Ω—é", "–æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é"):
            CHAT_MODES[chat_id] = "chat"
            await tg_send_message(
                chat_id,
                "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GPTBOT!</b>\n\n"
                "üü¢ –†–µ–∂–∏–º—ã:\n‚Ä¢ <b>–ß–∞—Ç</b> ‚Äî –¥–∏–∞–ª–æ–≥ —Å –ø–∞–º—è—Ç—å—é (–µ—Å–ª–∏ –ë–î –≤–∫–ª—é—á–µ–Ω–∞)\n"
                "‚Ä¢ <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</b> ‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Ñ–æ—Ç–æ/–ø–æ–¥–ø–∏—Å–∏",
                reply_markup=kb_main(is_admin)
            )
            return

        if _is(text, "/help", "help", "‚ÑπÔ∏è –ø–æ–º–æ—â—å", "–ø–æ–º–æ—â—å", "–∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è"):
            await tg_send_message(
                chat_id,
                "‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞</b>\n"
                "‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç ‚Äî –æ—Ç–≤–µ—á—É –∫–∞–∫ ChatGPT\n"
                "‚Ä¢ <code>/image —Ç–µ–∫—Å—Ç</code> ‚Äî –Ω–∞—Ä–∏—Å—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É\n"
                "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ + –ø–æ–¥–ø–∏—Å—å ‚Äî —Å–¥–µ–ª–∞—é <i>—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</i>/–≤–∞—Ä–∏–∞—Ü–∏—é\n"
                "‚Ä¢ <code>/whoami</code> ‚Äî –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞\n"
                "‚Ä¢ –ê–¥–º–∏–Ω: <code>/admin</code>, <code>/on</code>, <code>/off</code>, <code>/stats</code>",
                reply_markup=kb_main(is_admin)
            )
            return

        if _is(text, "/admin", "üõ† –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"):
            if not is_admin:
                await tg_send_message(chat_id, "üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                return
            status = "üü¢ –í–ö–õ" if BOT_ENABLED else "üî¥ –í–´–ö–õ"
            dbs = "üü¢" if DB_ENABLED else "üî¥"
            await tg_send_message(
                chat_id, f"üõ† <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: {status}\n–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {dbs}\n",
                reply_markup=kb_admin()
            )
            return

        if _is(text, "/on", "üü¢ –≤–∫–ª—é—á–∏—Ç—å –±–æ—Ç", "–≤–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞"):
            if not is_admin:
                await tg_send_message(chat_id, "üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
                return
            BOT_ENABLED = True
            await tg_send_message(chat_id, "‚úÖ –ë–æ—Ç –≤–∫–ª—é—á—ë–Ω.", reply_markup=kb_admin())
            return

        if _is(text, "/off", "üî¥ –≤—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç", "–≤—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞", "/pause"):
            if not is_admin:
                await tg_send_message(chat_id, "üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
                return
            BOT_ENABLED = False
            await tg_send_message(chat_id, "‚è∏ –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω.", reply_markup=kb_admin())
            return

        if _is(text, "/stats", "üìä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"):
            if not is_admin:
                await tg_send_message(chat_id, "üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
                return
            txt, img = await usage_get_today(user_id)
            await tg_send_message(chat_id, f"üìä –°–µ–≥–æ–¥–Ω—è: —Ç–µ–∫—Å—Ç {txt}/{FREE_MSGS_PER_DAY}, –∫–∞—Ä—Ç–∏–Ω–∫–∏ {img}/{FREE_IMAGES_PER_DAY}\n–ë–î: {'‚úÖ' if DB_ENABLED else '‚ùå'}")
            return

        if _is(text, "‚¨ÖÔ∏è –Ω–∞–∑–∞–¥", "–Ω–∞–∑–∞–¥"):
            await tg_send_message(chat_id, "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é.", reply_markup=kb_main(is_admin))
            return

        # –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤ –∫–Ω–æ–ø–∫–∞–º–∏
        if _is(text, "üí¨ —á–∞—Ç —Å gpt", "—á–∞—Ç", "—Ä–µ–∂–∏–º —á–∞—Ç"):
            CHAT_MODES[chat_id] = "chat"
            await tg_send_message(chat_id, "üó£ –†–µ–∂–∏–º: –ß–∞—Ç", reply_markup=kb_main(is_admin))
            return

        if _is(text, "üé® —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "—Ä–µ–∂–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"):
            CHAT_MODES[chat_id] = "image"
            await tg_send_message(chat_id, "üñº –†–µ–∂–∏–º: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å.", reply_markup=kb_main(is_admin))
            return

        # ---------- /image –∫–æ–º–∞–Ω–¥–∞ ----------
        if low.startswith("/image"):
            parts = text.split(maxsplit=1)
            prompt = parts[1] if len(parts) > 1 else ""
            if not prompt:
                await tg_send_message(chat_id, "üì∏ –ü—Ä–∏–º–µ—Ä: <code>/image –∫–æ—Ç –Ω–∞ —Å–∫–µ–π—Ç–µ</code>")
            else:
                await do_image(user_id, chat_id, prompt)
            return

        # ---------- –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ (image-to-image) ----------
        if msg.get("photo"):
            # –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ ‚Äî –ø—Ä–æ–º–ø—Ç
            caption = (msg.get("caption") or "").strip() or "–°–¥–µ–ª–∞–π –≤–∞—Ä–∏–∞—Ü–∏–∏"
            await do_image_edit(user_id, chat_id, msg["photo"], caption)
            return

        # ---------- –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ —Ç–µ–∫—É—â–µ–º—É —Ä–µ–∂–∏–º—É ----------
        mode = CHAT_MODES.get(chat_id, "chat")
        if mode == "image":
            await do_image(user_id, chat_id, text)
        else:
            await do_chat(user_id, chat_id, text)

    except Exception as e:
        log.exception("handle_update failed: %s", e)
