"""Admin handler for management commands and analytics."""

import logging
from aiogram import Router, types
from aiogram.filters import Command

from app.db import db
from app.config import settings
from app.utils.keyboards import get_main_menu_keyboard

logger = logging.getLogger(__name__)
router = Router(name="admin")


async def is_admin(user_id: int) -> bool:
    """Check if user is admin."""
    if user_id == settings.super_admin_id:
        return True
    
    user = await db.get_user(user_id)
    return user and user.get('is_admin', False)


async def is_super_admin(user_id: int) -> bool:
    """Check if user is super admin."""
    return user_id == settings.super_admin_id


@router.message(Command("stats"))
async def cmd_stats(message: types.Message):
    """Handle /stats command - show platform statistics."""
    try:
        user_id = message.from_user.id
        
        if not await is_admin(user_id):
            await message.answer(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # Get platform statistics
        stats = await db.get_stats()
        
        response = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã</b>\n\n"
        
        # User statistics
        response += f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b> {stats['total_users']}\n"
        
        plan_dist = stats.get('plan_distribution', {})
        response += f"üÜì FREE: {plan_dist.get('FREE', 0)}\n"
        response += f"‚≠ê PRO: {plan_dist.get('PRO', 0)}\n"
        response += f"üë• TEAM: {plan_dist.get('TEAM', 0)}\n\n"
        
        # Today's usage
        usage = stats.get('today_usage', {})
        response += f"üìà <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è:</b>\n"
        response += f"üí¨ –ß–∞—Ç: {usage.get('chat', 0)}\n"
        response += f"üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {usage.get('image_generation', 0) + usage.get('image_analysis', 0) + usage.get('image_editing', 0)}\n"
        response += f"üîä –ì–æ–ª–æ—Å: {usage.get('voice', 0)}\n"
        response += f"üìñ –í–∏–∫–∏–ø–µ–¥–∏—è: {usage.get('wikipedia', 0)}\n"
        response += f"üå§ –ü–æ–≥–æ–¥–∞: {usage.get('weather', 0)}\n"
        response += f"üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä: {usage.get('calculator', 0)}\n"
        response += f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {usage.get('reminder_created', 0)}\n\n"
        
        # Revenue
        monthly_revenue = stats.get('monthly_revenue_rub', 0)
        response += f"üí∞ <b>–î–æ—Ö–æ–¥ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ:</b> {monthly_revenue}‚ÇΩ\n"
        
        await message.answer(response, reply_markup=get_main_menu_keyboard())
        
    except Exception as e:
        logger.error(f"Stats command error: {e}")
        await message.answer(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.",
            reply_markup=get_main_menu_keyboard()
        )


@router.message(Command("makeadmin"))
async def cmd_make_admin(message: types.Message):
    """Handle /makeadmin command - make user admin."""
    try:
        user_id = message.from_user.id
        
        if not await is_super_admin(user_id):
            await message.answer(
                "‚ùå –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # Extract target user ID
        args = message.text.split()
        if len(args) != 2:
            await message.answer(
                "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/makeadmin [user_id]</code>\n"
                "–ü—Ä–∏–º–µ—Ä: <code>/makeadmin 123456789</code>",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        try:
            target_user_id = int(args[1])
        except ValueError:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # Check if user exists
        target_user = await db.get_user(target_user_id)
        if not target_user:
            await message.answer(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # Make admin
        await db.set_admin(target_user_id, True)
        
        target_name = target_user.get('first_name') or target_user.get('username') or f"ID {target_user_id}"
        
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_name} (ID: {target_user_id}) –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=get_main_menu_keyboard()
        )
        
        # Log admin action
        await db.log_usage(
            user_id, 'admin_assigned', None, 'success',
            {'target_user_id': target_user_id, 'target_name': target_name}
        )
        
        logger.info(f"User {target_user_id} made admin by super admin {user_id}")
        
    except Exception as e:
        logger.error(f"Make admin command error: {e}")
        await message.answer(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=get_main_menu_keyboard()
        )


@router.message(Command("revokeadmin"))
async def cmd_revoke_admin(message: types.Message):
    """Handle /revokeadmin command - revoke admin rights."""
    try:
        user_id = message.from_user.id
        
        if not await is_super_admin(user_id):
            await message.answer(
                "‚ùå –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–∑—ã–≤–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # Extract target user ID
        args = message.text.split()
        if len(args) != 2:
            await message.answer(
                "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/revokeadmin [user_id]</code>\n"
                "–ü—Ä–∏–º–µ—Ä: <code>/revokeadmin 123456789</code>",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        try:
            target_user_id = int(args[1])
        except ValueError:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # Cannot revoke super admin
        if target_user_id == settings.super_admin_id:
            await message.answer(
                "‚ùå –ù–µ–ª—å–∑—è –æ—Ç–æ–∑–≤–∞—Ç—å –ø—Ä–∞–≤–∞ —É —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # Check if user exists
        target_user = await db.get_user(target_user_id)
        if not target_user:
            await message.answer(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # Revoke admin rights
        await db.set_admin(target_user_id, False)
        
        target_name = target_user.get('first_name') or target_user.get('username') or f"ID {target_user_id}"
        
        await message.answer(
            f"‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_name} (ID: {target_user_id}) –æ—Ç–æ–∑–≤–∞–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=get_main_menu_keyboard()
        )
        
        # Log admin action
        await db.log_usage(
            user_id, 'admin_revoked', None, 'success',
            {'target_user_id': target_user_id, 'target_name': target_name}
        )
        
        logger.info(f"Admin rights revoked for user {target_user_id} by super admin {user_id}")
        
    except Exception as e:
        logger.error(f"Revoke admin command error: {e}")
        await message.answer(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∑—ã–≤–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=get_main_menu_keyboard()
        )


@router.message(Command("broadcast"))
async def cmd_broadcast(message: types.Message):
    """Handle /broadcast command - send message to all users."""
    try:
        user_id = message.from_user.id
        
        if not await is_super_admin(user_id):
            await message.answer(
                "‚ùå –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏.",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # Extract broadcast message
        text = message.text[10:].strip()  # Remove "/broadcast "
        
        if not text:
            await message.answer(
                "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/broadcast [—Å–æ–æ–±—â–µ–Ω–∏–µ]</code>\n"
                "–ü—Ä–∏–º–µ—Ä: <code>/broadcast –í–∞–∂–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞!</code>",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # This is a simplified version - in production you'd want to:
        # 1. Get all user IDs from database
        # 2. Send messages in batches with delays
        # 3. Handle failed deliveries
        # 4. Show progress to admin
        
        await message.answer(
            f"üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞</b>\n\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ: {text}\n\n"
            f"‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.",
            reply_markup=get_main_menu_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Broadcast command error: {e}")
        await message.answer(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏.",
            reply_markup=get_main_menu_keyboard()
        )


@router.message(Command("mode"))
async def cmd_mode(message: types.Message):
    """Handle /mode command - quick persona change."""
    try:
        from app.utils.keyboards import get_persona_keyboard
        from app.utils.texts import PERSONA_DESCRIPTIONS
        
        user_id = message.from_user.id
        
        # Get current persona
        session = await db.get_user_session(user_id)
        current_persona = session.get('persona', 'default')
        
        text = f"üë§ <b>–°–º–µ–Ω–∞ –ø–µ—Ä—Å–æ–Ω—ã –ò–ò</b>\n\n"
        text += f"–¢–µ–∫—É—â–∞—è: {PERSONA_DESCRIPTIONS[current_persona]}\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:"
        
        await message.answer(text, reply_markup=get_persona_keyboard())
        
    except Exception as e:
        logger.error(f"Mode command error: {e}")
        await message.answer(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞.",
            reply_markup=get_main_menu_keyboard()
        )


@router.message(Command("lang"))
async def cmd_lang(message: types.Message):
    """Handle /lang command - quick language change."""
    try:
        from app.utils.keyboards import get_language_keyboard
        from app.utils.texts import LANGUAGE_NAMES
        
        user_id = message.from_user.id
        
        # Get current language
        session = await db.get_user_session(user_id)
        current_lang = session.get('language', 'ru')
        
        text = f"üåê <b>–°–º–µ–Ω–∞ —è–∑—ã–∫–∞</b>\n\n"
        text += f"–¢–µ–∫—É—â–∏–π: {LANGUAGE_NAMES[current_lang]}\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:"
        
        await message.answer(text, reply_markup=get_language_keyboard())
        
    except Exception as e:
        logger.error(f"Lang command error: {e}")
        await message.answer(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞.",
            reply_markup=get_main_menu_keyboard()
        )