"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è Telegram –±–æ—Ç–∞.
–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫ –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
"""

import logging
from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from ..utils.message_editor import message_flow
from ..main import (
    get_text, is_super_admin, 
    get_main_menu, get_admin_menu
)
from ..services.user_service import user_service

logger = logging.getLogger(__name__)


async def handle_ai_agent_pro(callback_query: types.CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ ‚ö° AI Agent-PRO ‚ö°."""
    try:
        user_lang = await user_service.get_user_language(callback_query.from_user.id)
        await message_flow.show_pro_versions(callback_query, user_lang)
        await callback_query.answer()
        
    except Exception as e:
        logger.error(f"‚ùå Error in handle_ai_agent_pro: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


async def handle_back_to_main(callback_query: types.CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ ‚¨ÖÔ∏è –ù–∞–∑–∞–¥ (–≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)."""
    try:
        user_lang = await user_service.get_user_language(callback_query.from_user.id)
        await message_flow.show_main_menu(callback_query, user_lang)
        await callback_query.answer()
        
    except Exception as e:
        logger.error(f"‚ùå Error in handle_back_to_main: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


async def handle_change_language(callback_query: types.CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞."""
    try:
        user_lang = await user_service.get_user_language(callback_query.from_user.id)
        await message_flow.show_language_menu(callback_query, user_lang)
        await callback_query.answer()
        
    except Exception as e:
        logger.error(f"‚ùå Error in handle_change_language: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


async def handle_set_language(callback_query: types.CallbackQuery, lang_code: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —è–∑—ã–∫–∞ (set_lang_ru, set_lang_en)."""
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success = await user_service.set_user_language(callback_query.from_user.id, lang_code)
        
        if success:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            confirmation_text = get_text("language_set", lang_code, lang=lang_code)
            await callback_query.answer(confirmation_text, show_alert=True)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞ –Ω–æ–≤–æ–º —è–∑—ã–∫–µ
            await message_flow.show_main_menu(callback_query, lang_code)
        else:
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —è–∑—ã–∫–∞", show_alert=True)
            
    except Exception as e:
        logger.error(f"‚ùå Error in handle_set_language: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


async def handle_web_search_menu(callback_query: types.CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –ø–æ–∏—Å–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ."""
    try:
        user_lang = await user_service.get_user_language(callback_query.from_user.id)
        
        search_text = (
            f"üîç <b>{get_text('web_search', user_lang)}</b>\n\n"
            f"{get_text('search_help', user_lang)}\n\n"
            f"üìù <b>{get_text('search_placeholder', user_lang)}</b>\n"
            f"/search –ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ\n"
            f"/search –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            f"/search –Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ 2024"
        )
        
        back_button = [[InlineKeyboardButton(
            text=get_text("back", user_lang), 
            callback_data="ai_chat_menu"
        )]]
        
        menu = InlineKeyboardMarkup(inline_keyboard=back_button)
        
        await message_flow.safe_edit_message(
            callback_query=callback_query,
            text=search_text,
            reply_markup=menu
        )
        await callback_query.answer()
        
    except Exception as e:
        logger.error(f"‚ùå Error in handle_web_search_menu: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


async def handle_news_search_menu(callback_query: types.CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π."""
    try:
        user_lang = await user_service.get_user_language(callback_query.from_user.id)
        
        news_text = (
            f"üì∞ <b>{get_text('search_news', user_lang)}</b>\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /news [–∑–∞–ø—Ä–æ—Å] –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.\n\n"
            f"üìù <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
            f"/news —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏\n"
            f"/news —ç–∫–æ–Ω–æ–º–∏–∫–∞ –†–æ—Å—Å–∏–∏\n"
            f"/news (–±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤) - –æ–±—â–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"
        )
        
        back_button = [[InlineKeyboardButton(
            text=get_text("back", user_lang), 
            callback_data="ai_chat_menu"
        )]]
        
        menu = InlineKeyboardMarkup(inline_keyboard=back_button)
        
        await message_flow.safe_edit_message(
            callback_query=callback_query,
            text=news_text,
            reply_markup=menu
        )
        await callback_query.answer()
        
    except Exception as e:
        logger.error(f"‚ùå Error in handle_news_search_menu: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


# –°–ª–æ–≤–∞—Ä—å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ callback-–æ–≤
CALLBACK_HANDLERS = {
    "ai_agent_pro": handle_ai_agent_pro,
    "back_to_main": handle_back_to_main,
    "change_language": handle_change_language,
    "web_search_menu": handle_web_search_menu,
    "news_search_menu": handle_news_search_menu,
    "set_lang_ru": lambda cb: handle_set_language(cb, "ru"),
    "set_lang_en": lambda cb: handle_set_language(cb, "en"),
}


async def route_callback(callback_query: types.CallbackQuery) -> None:
    """
    –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä callback-–∑–∞–ø—Ä–æ—Å–æ–≤.
    –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –≤—Å–µ—Ö callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.
    """
    handler_name = callback_query.data
    
    if handler_name in CALLBACK_HANDLERS:
        handler = CALLBACK_HANDLERS[handler_name]
        try:
            await handler(callback_query)
        except Exception as e:
            logger.error(f"‚ùå Error in callback handler {handler_name}: {e}")
            await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    else:
        logger.warning(f"‚ö†Ô∏è Unhandled callback: {handler_name}")
        await callback_query.answer("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", show_alert=True)
