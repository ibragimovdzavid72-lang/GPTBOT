"""Reminders handler for scheduling notifications."""

import logging
import re
from datetime import datetime, timedelta
from aiogram import Router, types
from aiogram.filters import Text

from app.db import db
from app.utils.keyboards import get_main_menu_keyboard
from app.services.openai_service import rate_limiter

logger = logging.getLogger(__name__)
router = Router(name="reminders")


def parse_reminder_time(text: str) -> tuple[str, datetime]:
    """
    Parse reminder text and extract reminder time.
    Returns (reminder_text, reminder_datetime)
    """
    # Pattern for "–Ω–∞–ø–æ–º–Ω–∏ [text] –≤ [DD.MM HH:MM]"
    pattern1 = r'–Ω–∞–ø–æ–º–Ω–∏\s+(.+?)\s+–≤\s+(\d{1,2}\.\d{1,2})\s+(\d{1,2}:\d{2})'
    match1 = re.search(pattern1, text, re.IGNORECASE)
    
    if match1:
        reminder_text = match1.group(1).strip()
        date_str = match1.group(2)
        time_str = match1.group(3)
        
        # Parse date
        day, month = map(int, date_str.split('.'))
        hour, minute = map(int, time_str.split(':'))
        
        # Get current year
        current_year = datetime.now().year
        
        try:
            reminder_dt = datetime(current_year, month, day, hour, minute)
            
            # If the date is in the past, assume next year
            if reminder_dt < datetime.now():
                reminder_dt = reminder_dt.replace(year=current_year + 1)
            
            return reminder_text, reminder_dt
        except ValueError:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞ –∏–ª–∏ –≤—Ä–µ–º—è")
    
    # Pattern for "–Ω–∞–ø–æ–º–Ω–∏ [text] —á–µ—Ä–µ–∑ [N] [unit]"
    pattern2 = r'–Ω–∞–ø–æ–º–Ω–∏\s+(.+?)\s+—á–µ—Ä–µ–∑\s+(\d+)\s+(–º–∏–Ω—É—Ç|—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤|–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π)'
    match2 = re.search(pattern2, text, re.IGNORECASE)
    
    if match2:
        reminder_text = match2.group(1).strip()
        amount = int(match2.group(2))
        unit = match2.group(3).lower()
        
        now = datetime.now()
        
        if unit in ['–º–∏–Ω—É—Ç']:
            reminder_dt = now + timedelta(minutes=amount)
        elif unit in ['—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤']:
            reminder_dt = now + timedelta(hours=amount)
        elif unit in ['–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π']:
            reminder_dt = now + timedelta(days=amount)
        else:
            raise ValueError("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–∏")
        
        return reminder_text, reminder_dt
    
    # Pattern for "–Ω–∞–ø–æ–º–Ω–∏ [text] –∑–∞–≤—Ç—Ä–∞ –≤ [HH:MM]"
    pattern3 = r'–Ω–∞–ø–æ–º–Ω–∏\s+(.+?)\s+–∑–∞–≤—Ç—Ä–∞\s+–≤\s+(\d{1,2}:\d{2})'
    match3 = re.search(pattern3, text, re.IGNORECASE)
    
    if match3:
        reminder_text = match3.group(1).strip()
        time_str = match3.group(2)
        
        hour, minute = map(int, time_str.split(':'))
        
        tomorrow = datetime.now() + timedelta(days=1)
        reminder_dt = tomorrow.replace(hour=hour, minute=minute, second=0, microsecond=0)
        
        return reminder_text, reminder_dt
    
    raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")


@router.message(Text(startswith="–Ω–∞–ø–æ–º–Ω–∏ "))
async def handle_reminder(message: types.Message):
    """Handle reminder creation."""
    try:
        user_id = message.from_user.id
        text = message.text.strip()
        
        # Check rate limiting
        if not await rate_limiter.is_allowed(user_id):
            await message.answer("‚è± –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.")
            return
        
        try:
            # Parse reminder
            reminder_text, reminder_time = parse_reminder_time(text)
            
            if len(reminder_text) > 500:
                await message.answer(
                    "‚è∞ –¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤).",
                    reply_markup=get_main_menu_keyboard()
                )
                return
            
            # Check if time is not too far in the future (1 year max)
            if reminder_time > datetime.now() + timedelta(days=365):
                await message.answer(
                    "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ –≥–æ–¥ –≤–ø–µ—Ä–µ–¥.",
                    reply_markup=get_main_menu_keyboard()
                )
                return
            
            # Check if time is not in the past (with 1 minute tolerance)
            if reminder_time < datetime.now() - timedelta(minutes=1):
                await message.answer(
                    "‚è∞ –ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è.",
                    reply_markup=get_main_menu_keyboard()
                )
                return
            
            # Create reminder in database
            reminder_id = await db.add_reminder(user_id, reminder_text, reminder_time)
            
            # Format response
            time_str = reminder_time.strftime("%d.%m.%Y –≤ %H:%M")
            response = f"‚úÖ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!</b>\n\n"
            response += f"üìù <b>–¢–µ–∫—Å—Ç:</b> {reminder_text}\n"
            response += f"‚è∞ <b>–í—Ä–µ–º—è:</b> {time_str}\n\n"
            response += f"ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: #{reminder_id}"
            
            await message.answer(response, reply_markup=get_main_menu_keyboard())
            
            # Log successful usage
            await db.log_usage(
                user_id, 'reminder_created', None, 'success',
                {
                    'reminder_id': reminder_id,
                    'reminder_text': reminder_text,
                    'reminder_time': reminder_time.isoformat()
                }
            )
            
        except ValueError as e:
            # Invalid format
            help_text = """
‚è∞ <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</b>

<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>

1Ô∏è‚É£ <code>–Ω–∞–ø–æ–º–Ω–∏ [—Ç–µ–∫—Å—Ç] –≤ [–î–î.–ú–ú –ß–ß:–ú–ú]</code>
   –ü—Ä–∏–º–µ—Ä: <code>–Ω–∞–ø–æ–º–Ω–∏ –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ –≤ 25.12 18:00</code>

2Ô∏è‚É£ <code>–Ω–∞–ø–æ–º–Ω–∏ [—Ç–µ–∫—Å—Ç] —á–µ—Ä–µ–∑ [N] [–µ–¥–∏–Ω–∏—Ü–∞]</code>
   –ü—Ä–∏–º–µ—Ä: <code>–Ω–∞–ø–æ–º–Ω–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞</code>
   –ï–¥–∏–Ω–∏—Ü—ã: –º–∏–Ω—É—Ç, —á–∞—Å/—á–∞—Å–∞/—á–∞—Å–æ–≤, –¥–µ–Ω—å/–¥–Ω—è/–¥–Ω–µ–π

3Ô∏è‚É£ <code>–Ω–∞–ø–æ–º–Ω–∏ [—Ç–µ–∫—Å—Ç] –∑–∞–≤—Ç—Ä–∞ –≤ [–ß–ß:–ú–ú]</code>
   –ü—Ä–∏–º–µ—Ä: <code>–Ω–∞–ø–æ–º–Ω–∏ –≤—Å—Ç—Ä–µ—á–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 10:30</code>

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º.
"""
            await message.answer(help_text, reply_markup=get_main_menu_keyboard())
        
    except Exception as e:
        logger.error(f"Reminder handler error: {e}")
        await message.answer(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard()
        )