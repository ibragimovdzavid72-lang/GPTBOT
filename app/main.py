"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å Telegram‚Äë–±–æ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–æ–º–∞–Ω–¥—ã /suggest_prompt –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫—É aiogram v3 –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å
Telegram‚ÄëAPI, –∞ —Ç–∞–∫–∂–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥—Ä–∞–π–≤–µ—Ä asyncpg –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤ –≤
PostgreSQL. –û–Ω –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ OpenAI —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å ai –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
–æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
"""

import asyncio
import logging
import os
from datetime import datetime

from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandObject
from aiogram.client.default import DefaultBotProperties
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import asyncpg

from .config import settings
from .suggest import generate_prompt_from_logs
from .ai import openai_chat, openai_image, openai_vision, openai_tts, openai_stt, openai_chat_with_history, openai_chat_with_personal_context
from .admin import is_admin, cmd_admin_stats, cmd_errors, cmd_bot_on, cmd_bot_off, is_bot_active
from .webhook import WebhookManager
from .vector_memory import personal_assistant

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(
    token=settings.TELEGRAM_BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ)
pool: asyncpg.pool.Pool | None = None

# –ö–µ—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
voice_messages_cache = {}

# –ö–µ—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—Ä—Ç–∞
art_prompts_cache = {}

# –ö–µ—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –∞—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_art_sizes = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
user_states = {}

# –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
DEFAULT_SYSTEM_PROMPT = (
    "–¢—ã ‚Äî –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π Telegram-–±–æ—Ç. –¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:\n"
    "- –û—Ç–≤–µ—á–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–Ω—è—Ç–Ω–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.\n"
    "- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã (–∏—Å–ø–æ–ª—å–∑—É–π –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã).\n"
    "- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π OpenAI Images.\n"
    "- –ï—Å–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç –ø—Ä–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–ª–∏ –∏—Å—Ç–æ—Ä–∏—é ‚Äî –¥–æ—Å—Ç–∞–Ω—å –¥–∞–Ω–Ω—ã–µ –∏–∑ PostgreSQL.\n"
    "- –ú–æ–¥–µ–ª—å: " + settings.OPENAI_MODEL + ".\n"
    "- –û–±—â–∞–π—Å—è –∂–∏–≤–æ, –∏–Ω–æ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–π —Å–º–∞–π–ª—ã üôÇ."
)

# –¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
WELCOME_TEXT = """
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}!
–°–µ–≥–æ–¥–Ω—è {date}, –≤–∞—à –ª–∏–º–∏—Ç: 20 –∑–∞–ø—Ä–æ—Å–æ–≤

üß† –í–∞—à AI Agent

ü§ñ –ú—É–ª—å—Ç–∏–º–æ–¥–µ–ª—å–Ω—ã–π AI (GPT-4o)
‚Ä¢ üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π  
‚Ä¢ üìä –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚Ä¢ üíé –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è

üöÄ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º!
–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∏—Ç–µ —É–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –æ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ AI!
"""

# –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–µ–π —Ñ—É–Ω–∫—Ü–∏–π
main_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üí¨ –ò–ò –ß–∞—Ç", callback_data="ai_chat_menu"),
     InlineKeyboardButton(text="üé® –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ", callback_data="creative_menu")],
    [InlineKeyboardButton(text="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="analytics_menu"),
     InlineKeyboardButton(text="üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_menu")],
    [InlineKeyboardButton(text="üß† –õ–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç", callback_data="personal_assistant"),
     InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")],
])

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
admin_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üí¨ –ò–ò –ß–∞—Ç", callback_data="ai_chat_menu"),
     InlineKeyboardButton(text="üé® –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ", callback_data="creative_menu")],
    [InlineKeyboardButton(text="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="analytics_menu"),
     InlineKeyboardButton(text="üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_menu")],
    [InlineKeyboardButton(text="üß† –õ–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç", callback_data="personal_assistant"),
     InlineKeyboardButton(text="üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")],
    [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")],
])

# –ú–µ–Ω—é –ò–ò –ß–∞—Ç–∞
ai_chat_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üí¨ –ù–∞—á–∞—Ç—å —á–∞—Ç", callback_data="start_chat"),
     InlineKeyboardButton(text="ü§ñ –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å", callback_data="select_model")],
    [InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç", callback_data="reset_context"),
     InlineKeyboardButton(text="üí° –£–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç", callback_data="suggest_prompt")],
    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")],
])

# –ú–µ–Ω—é —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞
creative_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üé® –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="create_image")],
    [InlineKeyboardButton(text="üñºÔ∏è –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", callback_data="image_analysis_info")],
    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")],
])

# –ú–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
analytics_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
    [InlineKeyboardButton(text="üìà –ú–æ—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="user_stats")],
    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")],
])

# –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
settings_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="ü§ñ –ú–æ–¥–µ–ª—å –ò–ò", callback_data="select_model"),
     InlineKeyboardButton(text="üîä –ì–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã", callback_data="tts_settings")],
    [InlineKeyboardButton(text="üåê –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞", callback_data="language_settings"),
     InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="notification_settings")],
    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")],
])

# –ú–µ–Ω—é –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
admin_commands_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üìä –ê–¥–º–∏–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
     InlineKeyboardButton(text="‚ö†Ô∏è –û—à–∏–±–∫–∏ —Å–∏—Å—Ç–µ–º—ã", callback_data="errors")],
    [InlineKeyboardButton(text="‚úÖ –í–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞", callback_data="bot_on"),
     InlineKeyboardButton(text="‚ùå –í—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞", callback_data="bot_off")],
    [InlineKeyboardButton(text="üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data="admin_management"),
     InlineKeyboardButton(text="üìã –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã", callback_data="admin_logs")],
    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")],
])

# –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫

model_selection_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="GPT-4o", callback_data="set_model_gpt-4o")],
    [InlineKeyboardButton(text="GPT-4 Turbo", callback_data="set_model_gpt-4-turbo")],
    [InlineKeyboardButton(text="GPT-3.5 Turbo", callback_data="set_model_gpt-3.5-turbo")],
    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")],
])


async def on_startup() -> None:
    """–§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞."""
    global pool
    try:
        pool = await asyncpg.create_pool(settings.DATABASE_URL)
        logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        async with pool.acquire() as conn:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
                tables_exist = await conn.fetchval("""
                    SELECT EXISTS (
                        SELECT FROM information_schema.tables 
                        WHERE table_name IN ('logs', 'bot_config', 'bot_status')
                    )
                """)
                
                # –ß–∏—Ç–∞–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º schema.sql
                with open("schema.sql", "r", encoding="utf-8") as f:
                    schema_sql = f.read()
                    # –†–∞–∑–¥–µ–ª—è–µ–º SQL –∫–æ–º–∞–Ω–¥—ã –ø–æ —Ç–æ—á–∫–µ —Å –∑–∞–ø—è—Ç–æ–π
                    commands = schema_sql.split(";")
                    for command in commands:
                        command = command.strip()
                        if command:
                            try:
                                await conn.execute(command)
                            except Exception as e:
                                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É: {command[:50]}... –û—à–∏–±–∫–∞: {e}")
                
                if not tables_exist:
                    logger.info("–°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞")
                else:
                    logger.info("–¢–∞–±–ª–∏—Ü—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã
                logger.warning("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –±–µ–∑ —Ç–∞–±–ª–∏—Ü –ë–î")
    except Exception as e:
        pool = None
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
        logger.warning("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")


async def on_shutdown() -> None:
    """–§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞."""
    global pool
    if pool:
        await pool.close()
        logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")


@dp.message(Command("start"))
async def cmd_start(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–≤—à–∞—è—Å—è —Å–ª—ç—à –∫–æ–º–∞–Ω–¥–∞."""
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    username = message.from_user.username or message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    current_date = datetime.now().strftime("%d.%m.%Y")
    
    welcome_text = WELCOME_TEXT.format(username=username, date=current_date)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if is_admin(message.from_user.id):
        await message.answer(welcome_text, reply_markup=admin_menu)
    else:
        await message.answer(welcome_text, reply_markup=main_menu)


# ============================================================================
# –£–î–ê–õ–ï–ù–û: –í—Å–µ —Å–ª—ç—à –∫–æ–º–∞–Ω–¥—ã –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
# /help, /stats, /suggest_prompt, /art, /mode, /reset_context, 
# /personal, /admin, /admin_stats, /errors, /bot_on, /bot_off
# –¢–µ–ø–µ—Ä—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–µ –º–µ–Ω—é
# ============================================================================

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤

async def show_user_personal_stats(message: types.Message, user_id: int) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    global pool
    
    if not pool:
        await message.answer("‚õî –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return
    
    try:
        async with pool.acquire() as conn:
            user_logs = await conn.fetchval(
                "SELECT COUNT(*) FROM logs WHERE username = $1",
                message.from_user.username or str(user_id)
            )
            
            user_settings = await conn.fetchrow(
                "SELECT preferred_model, tts_enabled, personal_assistant_enabled FROM user_settings WHERE user_id = $1",
                user_id
            )
            
        stats_text = f"üìà <b>–ú–æ—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</b>\n\n"
        stats_text += f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {user_logs}\n"
        
        if user_settings:
            stats_text += f"ü§ñ –ú–æ–¥–µ–ª—å: {user_settings['preferred_model'] or 'gpt-4o'}\n"
            stats_text += f"üîä TTS: {'\u2705' if user_settings['tts_enabled'] else '\u274c'}\n"
            stats_text += f"üß† –õ–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç: {'\u2705' if user_settings['personal_assistant_enabled'] else '\u274c'}\n"
        
        pa_stats = await personal_assistant.get_user_stats(user_id)
        if pa_stats.get("total_memories", 0) > 0:
            stats_text += f"\nüß† –ü–∞–º—è—Ç—å: {pa_stats['total_memories']} –∑–∞–ø–∏—Å–µ–π"
        
        await message.answer(stats_text, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")


@dp.message(Command("stats"))
async def cmd_stats(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats."""
    if not pool:
        await message.answer("‚õî –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return
    
    try:
        async with pool.acquire() as conn:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–∞—Ö
            total_logs = await conn.fetchval("SELECT COUNT(*) FROM logs")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            unique_users = await conn.fetchval("SELECT COUNT(DISTINCT username) FROM logs WHERE username IS NOT NULL")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            popular_commands = await conn.fetch("""
                SELECT command, COUNT(*) as count 
                FROM logs 
                WHERE command IS NOT NULL 
                GROUP BY command 
                ORDER BY count DESC 
                LIMIT 5
            """)
            
        stats_text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n\n"
        stats_text += f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_logs}\n"
        stats_text += f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {unique_users}\n\n"
        
        if popular_commands:
            stats_text += "<b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            for cmd in popular_commands:
                stats_text += f"{cmd['command']}: {cmd['count']} —Ä–∞–∑(–∞)\n"
        else:
            stats_text += "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."
            
        await message.answer(stats_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.message(Command("suggest_prompt"))
async def cmd_suggest_prompt(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /suggest_prompt –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞."""
    if not pool:
        await message.answer("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return
    try:
        await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞...")
        suggestion = await generate_prompt_from_logs(pool)
        await message.answer(f"üí° <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç:</b>\n\n{suggestion}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ suggest_prompt: {e}")
        await message.answer("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–µ–π—á–∞—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.message(Command("art"))
async def cmd_art(message: types.Message) -> None:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /art –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –≤—ã–±–æ—Ä–æ–º —Ä–∞–∑–º–µ—Ä–∞."""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    text = message.text.replace("/art", "").strip()
    
    if not text:
        size_menu = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì± 512x512 (–±—ã—Å—Ç—Ä–æ)", callback_data="art_size_512")],
            [InlineKeyboardButton(text="üñºÔ∏è 1024x1024 (–∫–∞—á–µ—Å—Ç–≤–æ)", callback_data="art_size_1024")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_main")]
        ])
        await message.answer(
            "üé® <b>–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>\n\n–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å:\n\nüéÜ <i>–ü—Ä–∏–º–µ—Ä: –∫–æ—Ç–µ–Ω–æ–∫ –Ω–∞ —Å–∫–µ–π—Ç–µ –≤ –æ—á–∫–∞—Ö, —Å—Ç–∏–ª—å –∞–Ω–∏–º–µ</i>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
            reply_markup=size_menu,
            parse_mode="HTML"
        )
        return
        
    await generate_art_image(message, text)


@dp.callback_query()
async def process_callback(callback_query: types.CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é."""
    await callback_query.answer()
    
    # üìÇ –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –º–µ–Ω—é
    if callback_query.data == "ai_chat_menu":
        await callback_query.message.answer("üí¨ <b>–ò–ò –ß–∞—Ç</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=ai_chat_menu, parse_mode="HTML")
    elif callback_query.data == "creative_menu":
        await callback_query.message.answer("üé® <b>–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ</b>\n\n–ò—Å–∫—É—Å—Å—Ç–≤–æ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ:", reply_markup=creative_menu, parse_mode="HTML")
    elif callback_query.data == "analytics_menu":
        await callback_query.message.answer("üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</b>\n\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑:", reply_markup=analytics_menu, parse_mode="HTML")
    elif callback_query.data == "settings_menu":
        await callback_query.message.answer("üîß <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞:", reply_markup=settings_menu, parse_mode="HTML")
    
    # üí¨ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ò–ò —á–∞—Ç–∞
    elif callback_query.data == "start_chat":
        await callback_query.message.answer("üí¨ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É!\n\nüé§ –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
    
    # üé® –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞
    elif callback_query.data == "create_image":
        size_menu = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì± 512x512 (–±—ã—Å—Ç—Ä–æ)", callback_data="art_size_512")],
            [InlineKeyboardButton(text="üñºÔ∏è 1024x1024 (–∫–∞—á–µ—Å—Ç–≤–æ)", callback_data="art_size_1024")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="creative_menu")]
        ])
        await callback_query.message.answer(
            "üé® <b>–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>\n\n–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å:\n\nüéÜ <i>–ü—Ä–∏–º–µ—Ä: –∫–æ—Ç–µ–Ω–æ–∫ –Ω–∞ —Å–∫–µ–π—Ç–µ –≤ –æ—á–∫–∞—Ö, —Å—Ç–∏–ª—å –∞–Ω–∏–º–µ</i>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
            reply_markup=size_menu,
            parse_mode="HTML"
        )
    elif callback_query.data == "image_analysis_info":
        await callback_query.message.answer(
            "üñºÔ∏è <b>–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</b>\n\n"
            "üîç –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏ —è:\n\n"
            "‚Ä¢ –û–ø–∏—à—É —á—Ç–æ –Ω–∞ –Ω—ë–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ\n"
            "‚Ä¢ –û—Ç–≤–µ—á—É –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –∫–æ–Ω—Ç–µ–Ω—Ç–µ\n"
            "‚Ä¢ –ü–æ–º–æ–≥—É —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–µ–π\n\n"
            "üì∑ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤—Å–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.",
            parse_mode="HTML"
        )
    
    # üìä –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    elif callback_query.data == "user_stats":
        await show_user_personal_stats(callback_query.message, callback_query.from_user.id)
    
    # üîß –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    elif callback_query.data == "language_settings":
        language_menu = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="set_lang_ru"),
             InlineKeyboardButton(text="üá∫üá∏ English", callback_data="set_lang_en")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings_menu")]
        ])
        await callback_query.message.answer(
            "üåê <b>–Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
            reply_markup=language_menu,
            parse_mode="HTML"
        )
    elif callback_query.data == "notification_settings":
        await callback_query.message.answer(
            "üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>\n\n"
            "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö.",
            parse_mode="HTML"
        )
    elif callback_query.data.startswith("set_lang_"):
        lang = callback_query.data.replace("set_lang_", "")
        lang_names = {"ru": "–†—É—Å—Å–∫–∏–π", "en": "English"}
        await callback_query.message.answer(f"‚úÖ –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {lang_names.get(lang, lang)}")
    elif callback_query.data == "reset_context":
        # –í—ã–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É —Å–±—Ä–æ—Å–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        await cmd_reset_context(callback_query.message)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if is_admin(callback_query.from_user.id):
            await callback_query.message.answer("üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>", reply_markup=admin_menu)
        else:
            await callback_query.message.answer("üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>", reply_markup=main_menu)
    elif callback_query.data == "help":
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é —Å–ø—Ä–∞–≤–∫—É
        help_text = (
            "‚ÑπÔ∏è <b>–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–æ—Ç–∞:</b>\n\n"
            "üéÜ <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>\n"
            "‚Ä¢ –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫–Ω–æ–ø–∫–∞–º –º–µ–Ω—é\n"
            "‚Ä¢ –ü—Ä–æ—Å—Ç–æ–µ –æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º\n"
            "‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n\n"
            "üìã <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:</b>\n"
            "üí¨ –ò–ò –ß–∞—Ç - –û–±—â–µ–Ω–∏–µ —Å –ò–ò\n"
            "üé® –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ - –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n"
            "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
            "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è\n"
            "üß† –õ–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç - –í–µ–∫—Ç–æ—Ä–Ω–∞—è –ø–∞–º—è—Ç—å\n\n"
            "üöÄ <b>–ù–∞—á–Ω–∏—Ç–µ —Å /start</b> –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥–º–∏–Ω—Å–∫–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö
        if is_admin(callback_query.from_user.id):
            help_text += (
                "\n\nüëë <b>–ê–¥–º–∏–Ω-–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
                "‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã\n"
                "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º\n"
                "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—à–∏–±–æ–∫"
            )
        
        await callback_query.message.answer(help_text, parse_mode="HTML")
    elif callback_query.data == "admin_panel":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        user_id = callback_query.from_user.id
        admins_raw = os.getenv("ADMINS", "")
        logger.info(f"üëë –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ê–î–ú–ò–ù –î–û–°–¢–£–ü–ê:")
        logger.info(f"   user_id={user_id} (—Ç–∏–ø: {type(user_id)})")
        logger.info(f"   ADMINS env={repr(admins_raw)}")
        logger.info(f"   ADMINS parsed={settings.ADMINS}")
        logger.info(f"   ADMINS types={[type(x) for x in settings.ADMINS]}")
        
        if is_admin(user_id):
            logger.info(f"‚úÖ –ê–¥–º–∏–Ω—Å–∫–∏–π –¥–æ—Å—Ç—É–ø –†–ê–ó–†–ï–®–Å–ù –¥–ª—è user_id={user_id}")
            await callback_query.message.answer("üëë <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>", reply_markup=admin_commands_menu)
        else:
            logger.warning(f"‚ùå –ê–¥–º–∏–Ω—Å–∫–∏–π –¥–æ—Å—Ç—É–ø –ó–ê–ü–†–ï–©–Å–ù –¥–ª—è user_id={user_id}")
            logger.warning(f"üí° –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø, –¥–æ–±–∞–≤—å—Ç–µ {user_id} –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é ADMINS")
            await callback_query.message.answer(f"‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.\n\nüìù –í–∞—à ID: {user_id}\n\nüí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    elif callback_query.data == "select_model":
        await callback_query.message.answer("ü§ñ <b>–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –ò–ò</b>", reply_markup=model_selection_menu)
    elif callback_query.data == "personal_assistant":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        await show_personal_assistant_menu(callback_query.message, callback_query.from_user.id)
    elif callback_query.data == "tts_settings":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ TTS –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏–∑–º–µ–Ω–∏—Ç—å
        await show_tts_settings(callback_query.message)
    elif callback_query.data == "toggle_tts":
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ TTS
        await toggle_tts(callback_query.message)
        await show_tts_settings(callback_query.message)
    elif callback_query.data == "change_tts_voice":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≥–æ–ª–æ—Å–∞
        voice_menu = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="Alloy", callback_data="set_voice_alloy")],
            [InlineKeyboardButton(text="Echo", callback_data="set_voice_echo")],
            [InlineKeyboardButton(text="Fable", callback_data="set_voice_fable")],
            [InlineKeyboardButton(text="Onyx", callback_data="set_voice_onyx")],
            [InlineKeyboardButton(text="Nova", callback_data="set_voice_nova")],
            [InlineKeyboardButton(text="Shimmer", callback_data="set_voice_shimmer")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="tts_settings")],
        ])
        await callback_query.message.answer("üó£ <b>–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å</b>", reply_markup=voice_menu)
    elif callback_query.data.startswith("set_voice_"):
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–æ–ª–æ—Å TTS
        voice = callback_query.data.replace("set_voice_", "")
        await set_tts_voice(callback_query.message, voice)
        await show_tts_settings(callback_query.message)
    # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
    elif callback_query.data == "admin_stats":
        if is_admin(callback_query.from_user.id):
            await cmd_admin_stats(callback_query.message, pool)
        else:
            await callback_query.message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
    elif callback_query.data == "errors":
        if is_admin(callback_query.from_user.id):
            await cmd_errors(callback_query.message, pool)
        else:
            await callback_query.message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
    elif callback_query.data == "bot_on":
        if is_admin(callback_query.from_user.id):
            await cmd_bot_on(callback_query.message, pool)
        else:
            await callback_query.message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
    elif callback_query.data == "bot_off":
        if is_admin(callback_query.from_user.id):
            await cmd_bot_off(callback_query.message, pool)
        else:
            await callback_query.message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
    elif callback_query.data == "back_to_main":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if is_admin(callback_query.from_user.id):
            await callback_query.message.answer("üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>", reply_markup=admin_menu)
        else:
            await callback_query.message.answer("üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>", reply_markup=main_menu)
    elif callback_query.data == "back_to_settings":
        # –ù–µ –Ω—É–∂–Ω–æ, —Ç–∞–∫ –∫–∞–∫ settings_menu —É–±—Ä–∞–Ω–æ
        if is_admin(callback_query.from_user.id):
            await callback_query.message.answer("üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>", reply_markup=admin_menu)
        else:
            await callback_query.message.answer("üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>", reply_markup=main_menu)
    elif callback_query.data.startswith("voice_response_"):
        # –û—Ç–≤–µ—á–∞–µ–º –≥–æ–ª–æ—Å–æ–º –Ω–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback_query.message.answer("üîä –ì–æ—Ç–æ–≤–ª—é –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç...")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á –∏–∑ callback_data
        key = callback_query.data.replace("voice_response_", "")
        recognized_text = voice_messages_cache.get(key)
        
        if recognized_text:
            await process_voice_text_message(callback_query, recognized_text, voice_response=True)
            # –û—á–∏—â–∞–µ–º –∫–µ—à
            voice_messages_cache.pop(key, None)
        else:
            await callback_query.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–Ω–æ–≤–∞.")
            
    elif callback_query.data.startswith("text_response_"):
        # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        await callback_query.message.answer("üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á –∏–∑ callback_data
        key = callback_query.data.replace("text_response_", "")
        recognized_text = voice_messages_cache.get(key)
        
        if recognized_text:
            await process_voice_text_message(callback_query, recognized_text, voice_response=False)
            # –û—á–∏—â–∞–µ–º –∫–µ—à
            voice_messages_cache.pop(key, None)
        else:
            await callback_query.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–Ω–æ–≤–∞.")
    elif callback_query.data.startswith("set_model_"):
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å –ò–ò
        model = callback_query.data.replace("set_model_", "")
        await set_user_model(callback_query.message, model)
        await callback_query.message.answer(f"‚úÖ –ú–æ–¥–µ–ª—å –ò–ò —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {model}!")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if is_admin(callback_query.from_user.id):
            await callback_query.message.answer("üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>", reply_markup=admin_menu)
        else:
            await callback_query.message.answer("üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>", reply_markup=main_menu)
    
    # üé® –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    elif callback_query.data.startswith("art_size_"):
        # –í—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—Ä—Ç–∞
        size = callback_query.data.replace("art_size_", "")
        size_map = {"512": "512x512", "1024": "1024x1024"}
        actual_size = size_map.get(size, "1024x1024")
        
        await callback_query.message.answer(
            f"üé® –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å:\n\nüìè –†–∞–∑–º–µ—Ä: {actual_size}\n\nüéÜ <i>–ü—Ä–∏–º–µ—Ä: –∫–æ—Ç–µ–Ω–æ–∫ –Ω–∞ —Å–∫–µ–π—Ç–µ –≤ –æ—á–∫–∞—Ö, —Å—Ç–∏–ª—å –∞–Ω–∏–º–µ</i>",
            parse_mode="HTML"
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        user_art_sizes[callback_query.from_user.id] = actual_size
        
    elif callback_query.data.startswith("generate_similar_"):
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Ö–æ–∂–µ–≥–æ –∞—Ä—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        key = callback_query.data.replace("generate_similar_", "")
        description = art_prompts_cache.get(key)
        
        if description:
            await bot.send_chat_action(callback_query.message.chat.id, "upload_photo")
            processing_msg = await callback_query.message.answer("üé® –°–æ–∑–¥–∞—é –ø–æ—Ö–æ–∂–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
            
            # –£–ª—É—á—à–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—Ä—Ç–∞
            art_prompt = f"–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {description}, –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ"
            
            try:
                image_url = await openai_image(art_prompt)
                await processing_msg.delete()
                
                art_menu = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â—ë", callback_data=f"regenerate_art_{hash(art_prompt)%10000}")],
                    [InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="reset_context")]
                ])
                
                art_prompts_cache[f"{hash(art_prompt)%10000}"] = art_prompt
                
                await callback_query.message.answer_photo(
                    image_url,
                    caption=f"‚ö° <b>–ü–æ—Ö–æ–∂–∏–π –∞—Ä—Ç —Å–æ–∑–¥–∞–Ω!</b>\n\nüé® –û—Å–Ω–æ–≤–∞: <i>{description[:100]}...</i>",
                    reply_markup=art_menu,
                    parse_mode="HTML"
                )
                
                # –û—á–∏—â–∞–µ–º –∫–µ—à
                art_prompts_cache.pop(key, None)
                
            except Exception as e:
                await processing_msg.delete()
                logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Ö–æ–∂–µ–≥–æ –∞—Ä—Ç–∞: {e}")
                await callback_query.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ö–æ–∂–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            await callback_query.message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–Ω–æ–≤–∞.")
    
    elif callback_query.data.startswith("regenerate_art_"):
        # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—Ä—Ç–∞
        key = callback_query.data.replace("regenerate_art_", "")
        prompt = art_prompts_cache.get(key)
        
        if prompt:
            await generate_art_image(callback_query.message, prompt)
        else:
            await callback_query.message.answer("‚ùå –ü—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ /art.")
    
    # üß† –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    elif callback_query.data == "pa_add_memory":
        await callback_query.message.answer(
            "üß† <b>–î–æ–±–∞–≤–∏—Ç—å –ø–∞–º—è—Ç—å</b>\n\n"
            "üìù –ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-—Ç–æ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —è –∑–∞–ø–æ–º–Ω–∏–ª –æ –≤–∞—Å:\n\n"
            "üí° <i>–ü—Ä–∏–º–µ—Ä—ã:</i>\n"
            "‚Ä¢ –ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —Å—Ç–∏–ª—å –º–∏–Ω–∏–º–∞–ª–∏–∑–º\n"
            "‚Ä¢ –Ø —Ä–∞–±–æ—Ç–∞—é –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º\n"
            "‚Ä¢ –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é –∫—Ä–∞—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã\n"
            "‚Ä¢ –Ø –∏–∑—É—á–∞—é Python",
            parse_mode="HTML"
        )
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
        # –ë—É–¥–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø–∞–º—è—Ç—å
        user_states[callback_query.from_user.id] = "adding_memory"
    
    elif callback_query.data == "pa_view_stats":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–º—è—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await show_personal_memory_stats(callback_query.message, callback_query.from_user.id)
    
    elif callback_query.data == "pa_clear_memory":
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏
        confirm_menu = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë", callback_data="pa_confirm_clear")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="personal_assistant")]
        ])
        await callback_query.message.answer(
            "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n\n"
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø–∞–º—è—Ç—å?\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.",
            reply_markup=confirm_menu,
            parse_mode="HTML"
        )
    
    elif callback_query.data == "pa_confirm_clear":
        # –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await personal_assistant.clear_user_memory(callback_query.from_user.id)
        await callback_query.message.answer(
            "üóëÔ∏è <b>–ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞</b>\n\n"
            "–í—Å—è –≤–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.",
            parse_mode="HTML"
        )
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if is_admin(callback_query.from_user.id):
            await callback_query.message.answer("üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>", reply_markup=admin_menu)
        else:
            await callback_query.message.answer("üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>", reply_markup=main_menu)
    
    elif callback_query.data == "pa_toggle_mode":
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        await toggle_personal_assistant_mode(callback_query.message, callback_query.from_user.id)
    
    elif callback_query.data == "back_to_pa":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        await show_personal_assistant_menu(callback_query.message, callback_query.from_user.id)


@dp.message(Command("admin_stats"))
async def cmd_admin_stats_handler(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin_stats."""
    await cmd_admin_stats(message, pool)


@dp.message(Command("errors"))
async def cmd_errors_handler(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /errors."""
    await cmd_errors(message, pool)


@dp.message(Command("bot_on"))
async def cmd_bot_on_handler(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /bot_on."""
    await cmd_bot_on(message, pool)


@dp.message(Command("bot_off"))
async def cmd_bot_off_handler(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /bot_off."""
    await cmd_bot_off(message, pool)


@dp.message(Command("mode"))
async def cmd_mode(message: types.Message, command: CommandObject) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /mode –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ AI."""
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
    await message.answer("ü§ñ <b>–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –ò–ò</b>", reply_markup=model_selection_menu)


@dp.message(Command("reset_context"))
async def handle_image_message(message: types.Message) -> None:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏."""
    global pool
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –±–æ—Ç
    if not await is_bot_active(pool):
        await message.answer("‚õî –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç"
    await bot.send_chat_action(message.chat.id, "typing")
    processing_msg = await message.answer("üëÄ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        photo = message.photo[-1]
        file_info = await bot.get_file(photo.file_id)
        file_path = file_info.file_path
        file_url = f"https://api.telegram.org/file/bot{settings.TELEGRAM_BOT_TOKEN}/{file_path}"
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        caption = message.caption or "–û–ø–∏—à–∏ —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —ç—Ç–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ –ø–æ–¥—Ä–æ–±–Ω–æ"
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        import aiohttp
        async with aiohttp.ClientSession() as session:
            async with session.get(file_url) as resp:
                if resp.status != 200:
                    raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å: {resp.status}")
                image_data = await resp.read()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ OpenAI Vision
        try:
            response = await openai_vision(image_data, caption)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            response = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."
        
        # –£—Å–µ—á–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        if len(response) > settings.MAX_TG_REPLY:
            response = response[:settings.MAX_TG_REPLY] + "... (–æ—Ç–≤–µ—Ç —É—Å–µ—á—ë–Ω)"
        
        await processing_msg.delete()
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        image_menu = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ö° –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ö–æ–∂–∏–π –∞—Ä—Ç", callback_data=f"generate_similar_{hash(response)%10000}")],
            [InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="reset_context")]
        ])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        art_prompts_cache[f"{hash(response)%10000}"] = response
        
        await message.answer(
            f"üëÄ <b>–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:</b>\n\n{response}",
            reply_markup=image_menu,
            parse_mode="HTML"
        )
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑—É
        if pool:
            try:
                async with pool.acquire() as conn:
                    await conn.execute(
                        "INSERT INTO logs (username, command, args, answer) VALUES ($1, $2, $3, $4)",
                        message.from_user.username, "vision", caption, response
                    )
                    await conn.execute(
                        "INSERT INTO dialog_history (user_id, role, content) VALUES ($1, $2, $3)",
                        message.from_user.id, "user", f"[–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ] {caption}"
                    )
                    await conn.execute(
                        "INSERT INTO dialog_history (user_id, role, content) VALUES ($1, $2, $3)",
                        message.from_user.id, "assistant", response
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ë–î: {e}")
    
    except Exception as e:
        await processing_msg.delete()
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")


async def generate_art_image(message: types.Message, text: str, size: str = "1024x1024") -> None:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º."""
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await bot.send_chat_action(message.chat.id, "upload_photo")
        processing_msg = await message.answer(f"üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {size}...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_url = await openai_image(text, size=size)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ
        await processing_msg.delete()
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        art_menu = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â—ë", callback_data=f"regenerate_art_{hash(text)%10000}")],
            [InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="reset_context")]
        ])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        art_prompts_cache[f"{hash(text)%10000}"] = text
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await message.answer_photo(
            image_url, 
            caption=f"‚ú® <b>–ê—Ä—Ç –≥–æ—Ç–æ–≤!</b>\n\nüé® –û–ø–∏—Å–∞–Ω–∏–µ: <i>{text}</i>\nüì± –†–∞–∑–º–µ—Ä: {size}",
            reply_markup=art_menu,
            parse_mode="HTML"
        )
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑—É
        if pool:
            try:
                async with pool.acquire() as conn:
                    await conn.execute(
                        "INSERT INTO logs (username, command, args, answer) VALUES ($1, $2, $3, $4)",
                        message.from_user.username,
                        "art",
                        f"{text} ({size})",
                        f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {image_url}",
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ë–î: {e}")
                
    except Exception as e:
        if 'processing_msg' in locals():
            await processing_msg.delete()
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–ø—Ä–æ—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ.")


async def cmd_reset_context(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset_context –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞."""
    global pool
    
    if not pool:
        await message.answer("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–±—Ä–æ—à–µ–Ω.")
        return
    
    try:
        async with pool.acquire() as conn:
            # –£–¥–∞–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await conn.execute(
                "DELETE FROM dialog_history WHERE user_id = $1",
                message.from_user.id
            )
        
        await message.answer("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω. –ù–∞—á–Ω—ë–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.message(Command("personal"))
async def cmd_personal(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /personal –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É."""
    await show_personal_assistant_menu(message, message.from_user.id)


@dp.message(Command("admin"))
async def cmd_admin(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    admin_panel_text = (
        "üëë <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/admin_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n"
        "/errors - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏\n"
        "/bot_on - –í–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞\n"
        "/bot_off - –í—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º."
    )
    await message.answer(admin_panel_text)


@dp.message()
async def handle_message(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    global pool
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.voice:
        await handle_voice_message(message)
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if message.photo:
        await handle_image_message(message)
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await process_text_message(message)


async def handle_voice_message(message: types.Message) -> None:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏."""
    global pool
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –±–æ—Ç
    if not await is_bot_active(pool):
        await message.answer("‚õî –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç"
    await bot.send_chat_action(message.chat.id, "typing")
    processing_msg = await message.answer("‚öôÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        file_info = await bot.get_file(message.voice.file_id)
        file_path = file_info.file_path
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        file_url = f"https://api.telegram.org/file/bot{settings.TELEGRAM_BOT_TOKEN}/{file_path}"
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        import tempfile
        import aiohttp
        import os
        
        with tempfile.NamedTemporaryFile(suffix=".ogg", delete=False) as temp_file:
            temp_filename = temp_file.name
            
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(file_url) as response:
                    if response.status == 200:
                        with open(temp_filename, 'wb') as f:
                            f.write(await response.read())
                    else:
                        raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {response.status}")
        except Exception as e:
            await processing_msg.delete()
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return
        
        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å —Å –ø–æ–º–æ—â—å—é OpenAI Whisper
        try:
            await bot.send_chat_action(message.chat.id, "typing")
            recognized_text = await openai_stt(temp_filename)
            
            if not recognized_text or len(recognized_text.strip()) == 0:
                raise Exception("–ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")
                
        except Exception as e:
            await processing_msg.delete()
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏: {e}")
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                os.unlink(temp_filename)
            except Exception:
                pass
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–∏ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            os.unlink(temp_filename)
        except Exception:
            pass
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ
        await processing_msg.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞
        voice_menu = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîä –û—Ç–≤–µ—Ç–∏—Ç—å –≥–æ–ª–æ—Å–æ–º", callback_data=f"voice_response_{message.from_user.id}_{hash(recognized_text)%10000}")],
            [InlineKeyboardButton(text="üìù –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç", callback_data=f"text_response_{message.from_user.id}_{hash(recognized_text)%10000}")],
            [InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="reset_context")]
        ])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –∫–µ—à–µ
        cache_key = f"{message.from_user.id}_{hash(recognized_text)%10000}"
        voice_messages_cache[cache_key] = recognized_text
        
        await message.answer(
            f"üé§ <b>–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:</b>\n\n<i>{recognized_text}</i>\n\nü§î –ö–∞–∫ –æ—Ç–≤–µ—Ç–∏—Ç—å?",
            reply_markup=voice_menu,
            parse_mode="HTML"
        )
        
    except Exception as e:
        await processing_msg.delete()
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


async def set_user_model(message: types.Message, model: str) -> None:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—É—é –º–æ–¥–µ–ª—å –ò–ò –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    global pool
    
    if not pool:
        await message.answer("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        return
    
    try:
        async with pool.acquire() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            existing = await conn.fetchrow(
                "SELECT user_id FROM user_settings WHERE user_id = $1",
                message.from_user.id
            )
            
            if existing:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                await conn.execute(
                    "UPDATE user_settings SET preferred_model = $1, updated_at = now() WHERE user_id = $2",
                    model, message.from_user.id
                )
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –≤—Å–µ–º–∏ –ø–æ–ª—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                await conn.execute(
                    "INSERT INTO user_settings (user_id, preferred_model, tts_enabled, tts_voice) VALUES ($1, $2, $3, $4)",
                    message.from_user.id, model, False, "alloy"
                )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∏–∑–º–µ–Ω–∏–ª –º–æ–¥–µ–ª—å –Ω–∞ {model}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def show_tts_settings(message: types.Message) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ TTS."""
    global pool
    
    tts_enabled = False
    tts_voice = "alloy"
    
    if pool:
        try:
            async with pool.acquire() as conn:
                row = await conn.fetchrow(
                    "SELECT tts_enabled, tts_voice FROM user_settings WHERE user_id = $1",
                    message.from_user.id
                )
                if row:
                    tts_enabled = row["tts_enabled"]
                    tts_voice = row["tts_voice"]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ TTS: {e}")
    
    status = "–í–∫–ª—é—á–µ–Ω—ã" if tts_enabled else "–í—ã–∫–ª—é—á–µ–Ω—ã"
    tts_menu = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üîä –ì–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã: {status}", callback_data="toggle_tts")],
        [InlineKeyboardButton(text=f"üó£ –ì–æ–ª–æ—Å: {tts_voice.title()}", callback_data="change_tts_voice")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")],
    ])
    
    await message.answer("üîä <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤</b>", reply_markup=tts_menu)


async def toggle_tts(message: types.Message) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ TTS."""
    global pool
    
    if not pool:
        await message.answer("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        return
    
    try:
        async with pool.acquire() as conn:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            row = await conn.fetchrow(
                "SELECT tts_enabled FROM user_settings WHERE user_id = $1",
                message.from_user.id
            )
            
            current_tts = False
            if row:
                current_tts = row["tts_enabled"]
            
            new_tts = not current_tts
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            existing = await conn.fetchrow(
                "SELECT user_id FROM user_settings WHERE user_id = $1",
                message.from_user.id
            )
            
            if existing:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                await conn.execute(
                    "UPDATE user_settings SET tts_enabled = $1, updated_at = now() WHERE user_id = $2",
                    new_tts, message.from_user.id
                )
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –≤—Å–µ–º–∏ –ø–æ–ª—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                await conn.execute(
                    "INSERT INTO user_settings (user_id, tts_enabled, preferred_model, tts_voice, created_at, updated_at) VALUES ($1, $2, $3, $4, now(), now())",
                    message.from_user.id, new_tts, "gpt-4o", "alloy"
                )
        
        status = "–≤–∫–ª—é—á–µ–Ω—ã" if new_tts else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∏–∑–º–µ–Ω–∏–ª TTS –Ω–∞ {status}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ TTS: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def set_tts_voice(message: types.Message, voice: str) -> None:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–æ–ª–æ—Å –¥–ª—è TTS."""
    global pool
    
    if not pool:
        await message.answer("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        return
    
    try:
        async with pool.acquire() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            existing = await conn.fetchrow(
                "SELECT user_id FROM user_settings WHERE user_id = $1",
                message.from_user.id
            )
            
            if existing:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                await conn.execute(
                    "UPDATE user_settings SET tts_voice = $1, updated_at = now() WHERE user_id = $2",
                    voice, message.from_user.id
                )
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –≤—Å–µ–º–∏ –ø–æ–ª—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                await conn.execute(
                    "INSERT INTO user_settings (user_id, tts_voice, preferred_model, tts_enabled, created_at, updated_at) VALUES ($1, $2, $3, $4, now(), now())",
                    message.from_user.id, voice, "gpt-4o", False
                )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∏–∑–º–µ–Ω–∏–ª –≥–æ–ª–æ—Å TTS –Ω–∞ {voice}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–∞ TTS: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def handle_image_message(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏."""
    global pool
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –±–æ—Ç
    if not await is_bot_active(pool):
        await message.answer("‚õî –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã—Ö
        photo = message.photo[-1]
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        file_info = await bot.get_file(photo.file_id)
        file_path = file_info.file_path
        
        # –°–æ–∑–¥–∞–µ–º URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        file_url = f"https://api.telegram.org/file/bot{settings.TELEGRAM_BOT_TOKEN}/{file_path}"
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        caption = message.caption or "–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —ç—Ç–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ?"
        
        await message.answer("üëÄ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        import aiohttp
        async with aiohttp.ClientSession() as session:
            async with session.get(file_url) as resp:
                if resp.status != 200:
                    raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {resp.status}")
                image_data = await resp.read()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ OpenAI Vision
        try:
            response = await openai_vision(image_data, caption)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            response = "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ —á—Ç–æ –Ω–∞ –Ω—ë–º —Ç–µ–∫—Å—Ç–æ–º."
        
        # –£—Å–µ—á–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è Telegram
        if len(response) > settings.MAX_TG_REPLY:
            response = response[: settings.MAX_TG_REPLY] + "... (–æ—Ç–≤–µ—Ç —É—Å–µ—á—ë–Ω)"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(response)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –≤ –±–∞–∑—É
        if pool:
            try:
                async with pool.acquire() as conn:
                    await conn.execute(
                        "INSERT INTO logs (username, command, args, answer) VALUES ($1, $2, $3, $4)",
                        message.from_user.username,
                        "vision",
                        caption,
                        response,
                    )
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
                    await conn.execute(
                        "INSERT INTO dialog_history (user_id, role, content) VALUES ($1, $2, $3)",
                        message.from_user.id, "user", f"[–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ] {caption}"
                    )
                    await conn.execute(
                        "INSERT INTO dialog_history (user_id, role, content) VALUES ($1, $2, $3)",
                        message.from_user.id, "assistant", response
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
        else:
            logger.warning("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å –ª–æ–≥–∞")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await message.answer("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")


async def process_voice_text_message(callback_query: types.CallbackQuery, text: str, voice_response: bool = False) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    global pool
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –±–æ—Ç
    if not await is_bot_active(pool):
        await callback_query.message.answer("‚õî –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return
    
    text_lower = text.lower()
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    image_keywords = ["–∫–∞—Ä—Ç–∏–Ω–∫—É", "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "–Ω–∞—Ä–∏—Å—É–π", "–∞—Ä—Ç", "–∫–∞—Ä—Ç–∏–Ω–∞", "—Ä–∏—Å—É–Ω–æ–∫", "—Ñ–æ—Ç–æ", "–∏–∑–æ–±—Ä–∞–∑–∏"]
    if any(word in text_lower for word in image_keywords):
        try:
            image_url = await openai_image(text)
            await callback_query.message.answer_photo(image_url, caption=f"‚ú® –í–æ—Ç —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å!")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑—É
            if pool:
                try:
                    async with pool.acquire() as conn:
                        await conn.execute(
                            "INSERT INTO logs (username, command, args, answer) VALUES ($1, $2, $3, $4)",
                            callback_query.from_user.username,
                            "voice_art",
                            text,
                            f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ: {image_url}",
                        )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
            return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await callback_query.message.answer("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_model = None
        if pool:
            try:
                async with pool.acquire() as conn:
                    row = await conn.fetchrow(
                        "SELECT preferred_model FROM user_settings WHERE user_id = $1",
                        callback_query.from_user.id
                    )
                    if row:
                        user_model = row["preferred_model"]
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        dialog_history = []
        if pool:
            try:
                async with pool.acquire() as conn:
                    rows = await conn.fetch(
                        "SELECT role, content FROM dialog_history WHERE user_id = $1 ORDER BY id DESC LIMIT 10",
                        callback_query.from_user.id
                    )
                    dialog_history = [{"role": row["role"], "content": row["content"]} for row in reversed(rows)]
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞: {e}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        dialog_history.append({"role": "user", "content": text})
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç OpenAI
        try:
            response = await openai_chat_with_history(DEFAULT_SYSTEM_PROMPT, dialog_history, user_model)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ OpenAI API: {e}")
            response = "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å –ø—Ä–æ–±–ª–µ–º—ã —Å AI —Å–µ—Ä–≤–∏—Å–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        if len(response) > settings.MAX_TG_REPLY:
            response = response[:settings.MAX_TG_REPLY] + "... (–æ—Ç–≤–µ—Ç —É—Å–µ—á—ë–Ω)"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç (–≥–æ–ª–æ—Å–æ–≤–æ–π –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π)
        if voice_response and len(response) < 4000:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è TTS
            try:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–∞
                tts_voice = "alloy"
                if pool:
                    try:
                        async with pool.acquire() as conn:
                            row = await conn.fetchrow(
                                "SELECT tts_voice FROM user_settings WHERE user_id = $1",
                                callback_query.from_user.id
                            )
                            if row:
                                tts_voice = row["tts_voice"]
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ TTS: {e}")
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                audio_content = await openai_tts(response, tts_voice)
                
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                import tempfile
                import os
                
                with tempfile.NamedTemporaryFile(suffix=".mp3", delete=False) as temp_file:
                    temp_filename = temp_file.name
                    temp_file.write(audio_content)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                from aiogram.types import FSInputFile
                audio = FSInputFile(temp_filename, filename="response.mp3")
                caption = response[:1000] + "..." if len(response) > 1000 else response
                await callback_query.message.answer_voice(audio, caption=caption)
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.unlink(temp_filename)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {e}")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                await callback_query.message.answer(response)
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            await callback_query.message.answer(response)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑—É
        if pool:
            try:
                async with pool.acquire() as conn:
                    await conn.execute(
                        "INSERT INTO logs (username, command, args, answer) VALUES ($1, $2, $3, $4)",
                        callback_query.from_user.username,
                        "voice_message",
                        text,
                        response,
                    )
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
                    await conn.execute(
                        "INSERT INTO dialog_history (user_id, role, content) VALUES ($1, $2, $3)",
                        callback_query.from_user.id, "user", text
                    )
                    await conn.execute(
                        "INSERT INTO dialog_history (user_id, role, content) VALUES ($1, $2, $3)",
                        callback_query.from_user.id, "assistant", response
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await callback_query.message.answer("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")


async def process_text_message(message) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ–±—ã—á–Ω–æ–µ –∏–ª–∏ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ)."""
    global pool
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
    if not message.text:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    user_id = message.from_user.id
    user_state = user_states.get(user_id)
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–∞–º—è—Ç—å
    if user_state == "adding_memory":
        try:
            await personal_assistant.add_user_memory(
                user_id, 
                message.text, 
                "custom",
                {"category": "user_added"}
            )
            user_states.pop(user_id, None)  # –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            
            await message.answer(
                "‚úÖ <b>–ü–∞–º—è—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!</b>\n\n"
                "üß† –Ø –∑–∞–ø–æ–º–Ω–∏–ª —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –±—É–¥—É —É—á–∏—Ç—ã–≤–∞—Ç—å –µ—ë –≤ –±—É–¥—É—â–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö.",
                parse_mode="HTML"
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            await show_personal_assistant_menu(message, user_id)
            return
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–∞–º—è—Ç–∏: {e}")
            user_states.pop(user_id, None)  # –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–∞–º—è—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –±–æ—Ç
    if not await is_bot_active(pool):
        await message.answer("‚õî –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return
    
    text = message.text.lower()
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω–æ –ø—Ä–æ—Å–∏—Ç "–Ω–∞—Ä–∏—Å—É–π", "—Å–¥–µ–ª–∞–π –∫–∞—Ä—Ç–∏–Ω–∫—É", "—Å–æ–∑–¥–∞–π –∞—Ä—Ç"
    image_keywords = ["–∫–∞—Ä—Ç–∏–Ω–∫—É", "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "–Ω–∞—Ä–∏—Å—É–π", "–∞—Ä—Ç", "–∫–∞—Ä—Ç–∏–Ω–∞", "—Ä–∏—Å—É–Ω–æ–∫", "—Ñ–æ—Ç–æ", "–∏–∑–æ–±—Ä–∞–∑–∏"]
    if any(word in text for word in image_keywords):
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ OpenAI
            image_url = await openai_image(message.text)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.answer_photo(image_url, caption=f"‚ú® –í–æ—Ç —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å!")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –≤ –±–∞–∑—É
            if pool:
                try:
                    async with pool.acquire() as conn:
                        await conn.execute(
                            "INSERT INTO logs (username, command, args, answer) VALUES ($1, $2, $3, $4)",
                            message.from_user.username,
                            "auto_art",
                            message.text,
                            f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_url}",
                        )
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
                        await conn.execute(
                            "INSERT INTO dialog_history (user_id, role, content) VALUES ($1, $2, $3)",
                            message.from_user.id, "user", message.text
                        )
                        await conn.execute(
                            "INSERT INTO dialog_history (user_id, role, content) VALUES ($1, $2, $3)",
                            message.from_user.id, "assistant", f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_url}"
                        )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤ –ë–î
            else:
                logger.warning("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å –ª–æ–≥–∞")
            return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await message.answer("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –º–æ–¥–µ–ª—å
        user_model = None
        if pool:
            try:
                async with pool.acquire() as conn:
                    row = await conn.fetchrow(
                        "SELECT preferred_model FROM user_settings WHERE user_id = $1",
                        message.from_user.id
                    )
                    if row:
                        user_model = row["preferred_model"]
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        dialog_history = []
        if pool:
            try:
                async with pool.acquire() as conn:
                    rows = await conn.fetch(
                        "SELECT role, content FROM dialog_history WHERE user_id = $1 ORDER BY id DESC LIMIT 10",
                        message.from_user.id
                    )
                    # –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é, —á—Ç–æ–±—ã –æ–Ω–∞ –±—ã–ª–∞ –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
                    dialog_history = [{"role": row["role"], "content": row["content"]} for row in reversed(rows)]
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞: {e}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        dialog_history.append({"role": "user", "content": message.text})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á—ë–Ω –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
        pa_enabled = await get_personal_assistant_mode(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç OpenAI —Å —É—á—ë—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        try:
            if pa_enabled:
                # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_context = await personal_assistant.get_user_context(user_id, message.text)
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
                response = await openai_chat_with_personal_context(
                    DEFAULT_SYSTEM_PROMPT, 
                    dialog_history, 
                    user_context,
                    user_model
                )
                
                # –û–±—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∏–∞–ª–æ–≥–∞
                await personal_assistant.learn_from_dialogue(user_id, message.text, response)
            else:
                # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º –±–µ–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                response = await openai_chat_with_history(DEFAULT_SYSTEM_PROMPT, dialog_history, user_model)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ OpenAI API: {e}")
            # Fallback –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
            response = "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å –ø—Ä–æ–±–ª–µ–º—ã —Å AI —Å–µ—Ä–≤–∏—Å–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ –ª–æ–≥–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            if pool:
                try:
                    async with pool.acquire() as conn:
                        await conn.execute(
                            "INSERT INTO logs (username, command, args, answer) VALUES ($1, $2, $3, $4)",
                            message.from_user.username,
                            "error_api",
                            str(e),
                            "‚ùå OpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                        )
                except Exception:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        
        # –£—Å–µ—á–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è Telegram
        if len(response) > settings.MAX_TG_REPLY:
            response = response[: settings.MAX_TG_REPLY] + "... (–æ—Ç–≤–µ—Ç —É—Å–µ—á—ë–Ω)"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã
        tts_enabled = False
        tts_voice = "alloy"
        if pool:
            try:
                async with pool.acquire() as conn:
                    row = await conn.fetchrow(
                        "SELECT tts_enabled, tts_voice FROM user_settings WHERE user_id = $1",
                        message.from_user.id
                    )
                    if row:
                        tts_enabled = row["tts_enabled"]
                        tts_voice = row["tts_voice"]
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ TTS: {e}")
        
        if tts_enabled and len(response) < 4000:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –¥–ª–∏–Ω—É –¥–ª—è TTS
            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                audio_content = await openai_tts(response, tts_voice)
                
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∞—É–¥–∏–æ
                import tempfile
                import os
                
                with tempfile.NamedTemporaryFile(suffix=".mp3", delete=False) as temp_file:
                    temp_filename = temp_file.name
                    temp_file.write(audio_content)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                from aiogram.types import FSInputFile
                audio = FSInputFile(temp_filename, filename="response.mp3")
                await message.answer_voice(audio, caption=response[:1000] + "..." if len(response) > 1000 else response)
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.unlink(temp_filename)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {e}")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                await message.answer(response)
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            await message.answer(response)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –≤ –±–∞–∑—É
        if pool:
            try:
                async with pool.acquire() as conn:
                    await conn.execute(
                        "INSERT INTO logs (username, command, args, answer) VALUES ($1, $2, $3, $4)",
                        message.from_user.username,
                        "message",
                        message.text,
                        response,
                    )
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
                    await conn.execute(
                        "INSERT INTO dialog_history (user_id, role, content) VALUES ($1, $2, $3)",
                        message.from_user.id, "user", message.text
                    )
                    await conn.execute(
                        "INSERT INTO dialog_history (user_id, role, content) VALUES ($1, $2, $3)",
                        message.from_user.id, "assistant", response
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤ –ë–î
        else:
            logger.warning("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å –ª–æ–≥–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")


# üß† –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞

async def show_personal_assistant_menu(message: types.Message, user_id: int) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–º—è—Ç–∏
        stats = await personal_assistant.get_user_stats(user_id)
        total_memories = stats.get("total_memories", 0)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
        pa_enabled = await get_personal_assistant_mode(user_id)
        pa_status = "üü¢ –í–∫–ª—é—á—ë–Ω" if pa_enabled else "üî¥ –í—ã–∫–ª—é—á–µ–Ω"
        
        pa_menu = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ({total_memories})", callback_data="pa_view_stats")],
            [InlineKeyboardButton(text="üß† –î–æ–±–∞–≤–∏—Ç—å –ø–∞–º—è—Ç—å", callback_data="pa_add_memory")],
            [InlineKeyboardButton(text=f"üéõÔ∏è –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º: {pa_status}", callback_data="pa_toggle_mode")],
            [InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å", callback_data="pa_clear_memory")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
        
        await message.answer(
            f"üß† <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç</b>\n\n"
            f"üí´ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ø–∞–º—è—Ç—å –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤\n\n"
            f"üìã <b>–°—Ç–∞—Ç—É—Å:</b> {pa_status}\n"
            f"üì¶ <b>–ó–∞–ø–æ–º–Ω–µ–Ω–æ:</b> {total_memories} –∑–∞–ø–∏—Å–µ–π\n\n"
            f"üí° –ö–æ–≥–¥–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á—ë–Ω, —è –±—É–¥—É —É—á–∏—Ç—ã–≤–∞—Ç—å –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏ –æ–ø—ã—Ç –ø—Ä–∏ –æ—Ç–≤–µ—Ç–∞—Ö.",
            reply_markup=pa_menu,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.")


async def show_personal_memory_stats(message: types.Message, user_id: int) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–º—è—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        stats = await personal_assistant.get_user_stats(user_id)
        total_memories = stats.get("total_memories", 0)
        by_type = stats.get("by_type", {})
        
        stats_text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏</b>\n\n"
        stats_text += f"üì¶ <b>–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π:</b> {total_memories}\n\n"
        
        if by_type:
            stats_text += "üìä <b>–ü–æ —Ç–∏–ø–∞–º:</b>\n"
            for memory_type, count in by_type.items():
                type_names = {
                    "dialogue": "üí¨ –î–∏–∞–ª–æ–≥–∏",
                    "preference": "‚ù§Ô∏è –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è",
                    "fact": "üìù –§–∞–∫—Ç—ã",
                    "custom": "üè∑Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ"
                }
                type_name = type_names.get(memory_type, memory_type.title())
                stats_text += f"‚Ä¢ {type_name}: {count}\n"
        else:
            stats_text += "üòä –ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π."
        
        stats_text += "\n\nüí° –î–æ–±–∞–≤–ª—è–π—Ç–µ –Ω–æ–≤—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è, —á—Ç–æ–±—ã —è –ª—É—á—à–µ –≤–∞—Å –ø–æ–Ω–∏–º–∞–ª!"
        
        back_menu = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data="back_to_pa")]
        ])
        
        await message.answer(stats_text, reply_markup=back_menu, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞–º—è—Ç–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")


async def get_personal_assistant_mode(user_id: int) -> bool:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    global pool
    
    if not pool:
        return False
    
    try:
        async with pool.acquire() as conn:
            row = await conn.fetchrow(
                "SELECT personal_assistant_enabled FROM user_settings WHERE user_id = $1",
                user_id
            )
            if row:
                return row["personal_assistant_enabled"] or False
            return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {e}")
        return False


async def set_personal_assistant_mode(user_id: int, enabled: bool) -> None:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–∂–∏–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."""
    global pool
    
    if not pool:
        return
    
    try:
        async with pool.acquire() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            existing = await conn.fetchrow(
                "SELECT user_id FROM user_settings WHERE user_id = $1",
                user_id
            )
            
            if existing:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                await conn.execute(
                    "UPDATE user_settings SET personal_assistant_enabled = $1, updated_at = now() WHERE user_id = $2",
                    enabled, user_id
                )
            else:
                # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                await conn.execute(
                    "INSERT INTO user_settings (user_id, personal_assistant_enabled, preferred_model, tts_enabled, tts_voice) VALUES ($1, $2, $3, $4, $5)",
                    user_id, enabled, "gpt-4o", False, "alloy"
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {e}")


async def toggle_personal_assistant_mode(message: types.Message, user_id: int) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."""
    try:
        current_mode = await get_personal_assistant_mode(user_id)
        new_mode = not current_mode
        await set_personal_assistant_mode(user_id, new_mode)
        
        status = "üü¢ –≤–∫–ª—é—á—ë–Ω" if new_mode else "üî¥ –≤—ã–∫–ª—é—á–µ–Ω"
        await message.answer(f"üéõÔ∏è –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º {status}!")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
        await show_personal_assistant_menu(message, user_id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞.")


async def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    import os
    
    logger.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: webhook –∏–ª–∏ polling
    webhook_url = os.getenv("WEBHOOK_URL")
    use_webhook = webhook_url is not None
    
    if use_webhook:
        logger.info(f"üåê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è WEBHOOK —Ä–µ–∂–∏–º: {webhook_url}")
        try:
            # –°–æ–∑–¥–∞–µ–º webhook –º–µ–Ω–µ–¥–∂–µ—Ä
            webhook_manager = WebhookManager(bot, dp)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º webhook —Å–µ—Ä–≤–µ—Ä
            runner = await webhook_manager.run_webhook_server()
            
            logger.info("‚úÖ Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å webhook
            webhook_info = await webhook_manager.get_telegram_webhook_info()
            if webhook_info:
                logger.info(f"üìä Webhook URL: {webhook_info.url}")
                if webhook_info.last_error_date:
                    logger.warning(f"‚ö†Ô∏è –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {webhook_info.last_error_message}")
            
            # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            try:
                while True:
                    await asyncio.sleep(3600)  # –ü—Ä–æ—Å—ã–ø–∞–µ–º—Å—è 1 —á–∞—Å
            except KeyboardInterrupt:
                logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            finally:
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
                await runner.cleanup()
                await webhook_manager.remove_webhook()
                
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –≤ webhook —Ä–µ–∂–∏–º–µ: {e}")
            logger.info("üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ polling —Ä–µ–∂–∏–º...")
            use_webhook = False
    
    if not use_webhook:
        logger.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è POLLING —Ä–µ–∂–∏–º")
        try:
            # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ polling —Ä–µ–∂–∏–º–µ
            await dp.start_polling(bot, skip_updates=True)
        except KeyboardInterrupt:
            logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        finally:
            logger.info("üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    asyncio.run(main())
