"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram –±–æ—Ç–µ.
–ü–∞—Ç—Ç–µ—Ä–Ω Anti-clutter Message Editing –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
"""

import logging
from typing import Optional, List
# Note: These imports may show errors in IDE but work at runtime
from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

logger = logging.getLogger(__name__)


async def safe_edit_message(
    callback_query: types.CallbackQuery,
    text: str,
    reply_markup: Optional[InlineKeyboardMarkup] = None,
    parse_mode: str = "HTML"
) -> bool:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å fallback.
    
    Args:
        callback_query: Callback –∑–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏
        text: –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è  
        reply_markup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ (HTML/Markdown)
    
    Returns:
        bool: True –µ—Å–ª–∏ edit —É–¥–∞–ª—Å—è, False –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è fallback
    """
    try:
        await callback_query.message.edit_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode=parse_mode
        )
        logger.debug(f"‚úÖ Message edited successfully for user {callback_query.from_user.id}")
        return True
        
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Edit failed, using fallback: {e}")
        
        # Fallback –∫ –Ω–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        try:
            await callback_query.message.answer(
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
            logger.debug(f"‚úÖ Fallback message sent for user {callback_query.from_user.id}")
            # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –º–µ–Ω—é –±—ã–ª–æ "–∏—Å—á–µ–∑–∞—é—â–∏–º"
            try:
                await callback_query.message.delete()
            except Exception as del_err:
                logger.debug(f"(ignore) failed to delete previous message: {del_err}")
            return False
            
        except Exception as fallback_error:
            logger.error(f"‚ùå Both edit and fallback failed: {fallback_error}")
            await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start", show_alert=True)
            return False


async def safe_edit_with_navigation(
    callback_query: types.CallbackQuery,
    content_text: str,
    back_callback: str = "back_to_main",
    back_text: str = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
    additional_buttons: Optional[List[List[InlineKeyboardButton]]] = None,
    parse_mode: str = "HTML"
) -> bool:
    """
    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π "–ù–∞–∑–∞–¥".
    
    Args:
        callback_query: Callback –∑–∞–ø—Ä–æ—Å
        content_text: –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        back_callback: Callback data –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" 
        back_text: –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        additional_buttons: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ [[button1, button2], [button3]]
        parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞
    
    Returns:
        bool: True –µ—Å–ª–∏ edit —É–¥–∞–ª—Å—è
    """
    
    # –°—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    if additional_buttons:
        keyboard.extend(additional_buttons)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.append([InlineKeyboardButton(text=back_text, callback_data=back_callback)])
    
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    return await safe_edit_message(
        callback_query=callback_query,
        text=content_text,
        reply_markup=reply_markup,
        parse_mode=parse_mode
    )


class MessageFlow:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–æ—Ç–µ."""
    
    def __init__(self):
        self.user_states = {}
    
    async def show_main_menu(self, callback_query: types.CallbackQuery, user_lang: str = "ru"):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        from ..main import get_text, get_main_menu, get_admin_menu, is_super_admin
        
        welcome_text = get_text("welcome", user_lang)
        
        if is_super_admin(callback_query.from_user.id):
            menu = get_admin_menu(user_lang)
        else:
            menu = get_main_menu(user_lang)
        
        return await safe_edit_message(
            callback_query=callback_query,
            text=welcome_text,
            reply_markup=menu
        )
    
    async def show_pro_versions(self, callback_query: types.CallbackQuery, user_lang: str = "ru"):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–µ—Ä—Å–∏–π AI Agent-PRO —Å RU/EN –∏ –∫–Ω–æ–ø–∫–æ–π üåê."""
        from ..main import get_text

        if user_lang == "en":
            versions_text = (
                "<b>‚ö° AI Agent ‚Äì Versions</b>\n\n"
                "üîπ FREE\n"
                "‚Äì Basic functions (chat, translations, simple texts)\n"
                "‚Äì Limited number of messages\n"
                "‚Äì No visual content\n\n"
                "üîπ PRO\n"
                "‚Äì Everything from FREE +\n"
                "‚Äì Work with files and documents\n"
                "‚Äì Image generation\n"
                "‚Äì Copywriting, rewriting, SEO\n"
                "‚Äì OCR (text recognition from images)\n\n"
                "üîπ ULTRA\n"
                "‚Äì Everything from PRO +\n"
                "‚Äì API integration (ChatGPT, MidJourney)\n"
                "‚Äì Unlimited visual content\n"
                "‚Äì Team collaboration\n"
                "‚Äì Priority processing speed\n\n"
                "‚∏ª\n\n"
                "üìå <b>AI Agent Features</b>\n"
                "‚Ä¢ üë©‚Äçüéì Students (essays, theses, coursework, reports)\n"
                "‚Ä¢ ‚úçÔ∏è Copywriters (100% unique texts, rewriting, bypass AI detectors, plagiarism check bypass)\n"
                "‚Ä¢ üì± Bloggers (content plans, headlines, storytelling, scripts for blogs & Reels)\n"
                "‚Ä¢ üîé SEO specialists (articles, search engine parsing, keyword analysis)\n"
                "‚Ä¢ üñºÔ∏è OCR ‚Äî text recognition from images (photos)\n"
                "‚Ä¢ üöÄ And much more!"
            )
            toggle_text = "üåê –†—É—Å—Å–∫–∏–π"
            back_text = get_text("back", "en")
        else:
            versions_text = (
                "<b>‚ö° AI Agent ‚Äì –≤–µ—Ä—Å–∏–∏</b>\n\n"
                "üîπ FREE\n"
                "‚Äì –ë–∞–∑–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª (—á–∞—Ç, –ø–µ—Ä–µ–≤–æ–¥—ã, –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ–∫—Å—Ç—ã)\n"
                "‚Äì –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                "‚Äì –ë–µ–∑ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n\n"
                "üîπ PRO\n"
                "‚Äì –í—Å—ë –∏–∑ FREE +\n"
                "‚Äì –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏\n"
                "‚Äì –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n"
                "‚Äì –ö–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥, —Ä–µ—Ä–∞–π—Ç–∏–Ω–≥, SEO\n"
                "‚Äì OCR (—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –∫–∞—Ä—Ç–∏–Ω–æ–∫)\n\n"
                "üîπ ULTRA\n"
                "‚Äì –í—Å—ë –∏–∑ PRO +\n"
                "‚Äì –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API (ChatGPT, MidJourney)\n"
                "‚Äì –í–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n"
                "‚Äì –ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞\n"
                "‚Äì –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å\n\n"
                "‚∏ª\n\n"
                "üìå <b>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª AI Agent</b>\n"
                "‚Ä¢ üë©‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç—ã (–¥–∏–ø–ª–æ–º—ã, —ç—Å—Å–µ, –∫—É—Ä—Å–æ–≤—ã–µ, —Ä–µ—Ñ–µ—Ä–∞—Ç—ã)\n"
                "‚Ä¢ ‚úçÔ∏è –ö–æ–ø–∏—Ä–∞–π—Ç–µ—Ä—ã (100% —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã, —Ä–µ—Ä–∞–π—Ç, –æ–±—Ö–æ–¥ –ò–ò-–¥–µ—Ç–µ–∫—Ç–æ—Ä–∞, –æ–±—Ö–æ–¥ ¬´–ê–Ω—Ç–∏–ø–ª–∞–≥–∏–∞—Ç¬ª)\n"
                "‚Ä¢ üì± –ë–ª–æ–≥–µ—Ä—ã (–∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω—ã, –∑–∞–≥–æ–ª–æ–≤–∫–∏, —Å—Ç–æ—Ä–∏—Ç–µ–ª–ª–∏–Ω–≥, —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –±–ª–æ–≥–∞ –∏ Reels)\n"
                "‚Ä¢ üîé SEO-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã (—Å—Ç–∞—Ç—å–∏, –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º, –∞–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤)\n"
                "‚Ä¢ üñºÔ∏è OCR ‚Äî —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –∫–∞—Ä—Ç–∏–Ω–æ–∫ (—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏)\n"
                "‚Ä¢ üöÄ –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!"
            )
            toggle_text = "üåê English"
            back_text = get_text("back", "ru")

        toggle_button = [[InlineKeyboardButton(text=toggle_text, callback_data="toggle_versions_lang")]]

        return await safe_edit_with_navigation(
            callback_query=callback_query,
            content_text=versions_text,
            additional_buttons=toggle_button,
            back_callback="back_to_main",
            back_text=back_text
        )
    
    async def show_language_menu(self, callback_query: types.CallbackQuery, user_lang: str = "ru"):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞."""
        from ..main import get_text
        
        menu_text = f"<b>{get_text('language_interface', user_lang)}</b>\n\n{get_text('select_language', user_lang)}"
        
        language_buttons = [
            [
                InlineKeyboardButton(text=get_text("russian", user_lang), callback_data="set_lang_ru"),
                InlineKeyboardButton(text=get_text("english", user_lang), callback_data="set_lang_en")
            ]
        ]
        
        return await safe_edit_with_navigation(
            callback_query=callback_query,
            content_text=menu_text,
            additional_buttons=language_buttons,
            back_callback="back_to_main",
            back_text=get_text("back", user_lang)
        )

    async def show_welcome_screen(self, callback_query: types.CallbackQuery, user_lang: str = "ru"):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —Å –∫–Ω–æ–ø–∫–æ–π –°—Ç–∞—Ä—Ç / Start."""
        if user_lang == "en":
            title = "<b>‚ö° AI Agent ‚ö°</b>\n"
            features = (
                "\n"  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                "üìÇ Documents & files\n"
                "üß† Problem solving\n"
                "üòâ Content creation\n"
                "üíª Code assistance\n"
                "‚úçÔ∏è Copywriting & rewriting\n"
                "üé® Visual content\n"
                "üñºÔ∏è Image generation\n"
                "üåç Translation & summarization"
            )
            start_text = "üöÄ Start / Start"
            lang_toggle = "üåê –†—É—Å—Å–∫–∏–π"
            lang_callback = "set_lang_ru"
        else:
            title = "<b>‚ö° AI Agent ‚ö°</b>\n"
            features = (
                "\n"
                "üìÇ –†–∞–±–æ—Ç–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –∏ —Ñ–∞–π–ª–∞–º–∏\n"
                "üß† –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á —Ä–∞–∑–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è\n"
                "üòâ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n"
                "üíª –†–∞–±–æ—Ç–∞ —Å –∫–æ–¥–æ–º\n"
                "‚úçÔ∏è –ö–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥ –∏ —Ä–µ—Ä–∞–π—Ç–∏–Ω–≥\n"
                "üé® –í–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç\n"
                "üñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n"
                "üåç –ü–µ—Ä–µ–≤–æ–¥ –∏ –∫—Ä–∞—Ç–∫–∏–π –ø–µ—Ä–µ—Å–∫–∞–∑"
            )
            start_text = "üöÄ –°—Ç–∞—Ä—Ç / Start"
            lang_toggle = "üåê English"
            lang_callback = "set_lang_en"

        content_text = f"{title}{features}"

        buttons = [
            [InlineKeyboardButton(text=start_text, callback_data="back_to_main")],
            [InlineKeyboardButton(text=lang_toggle, callback_data=lang_callback)],
        ]

        return await safe_edit_with_navigation(
            callback_query=callback_query,
            content_text=content_text,
            additional_buttons=buttons,
            back_callback="back_to_main",
            back_text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
        )


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ handlers
message_flow = MessageFlow()