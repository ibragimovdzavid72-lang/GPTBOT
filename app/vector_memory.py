"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ø–∞–º—è—Ç—å—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç ChromaDB –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏
–æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π.
"""

import logging
import os
import hashlib
from typing import List, Dict, Optional, Tuple
import asyncio
from concurrent.futures import ThreadPoolExecutor

import chromadb
from chromadb.config import Settings
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity

from .config import settings
from .ai import client as openai_client

logger = logging.getLogger(__name__)


class PersonalAssistant:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º —Å –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ø–∞–º—è—Ç—å—é."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        self.executor = ThreadPoolExecutor(max_workers=2)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ChromaDB
        self.chroma_client = None
        self.collection = None
        self._initialize_db()
    
    def _initialize_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ChromaDB."""
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            data_dir = os.path.join(os.getcwd(), "vector_data")
            os.makedirs(data_dir, exist_ok=True)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ChromaDB —Å –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
            self.chroma_client = chromadb.PersistentClient(
                path=data_dir,
                settings=Settings(
                    anonymized_telemetry=False,
                    allow_reset=True
                )
            )
            
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            self.collection = self.chroma_client.get_or_create_collection(
                name="user_memory",
                metadata={"description": "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"}
            )
            
            logger.info("‚úÖ –í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î: {e}")
            self.chroma_client = None
            self.collection = None
    
    async def create_embedding(self, text: str) -> Optional[List[float]]:
        """
        –°–æ–∑–¥–∞–µ—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é OpenAI.
        
        :param text: –¢–µ–∫—Å—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞
        :return: –í–µ–∫—Ç–æ—Ä —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
            if len(text) > 8000:
                text = text[:8000] + "..."
            
            response = await openai_client.embeddings.create(
                model="text-embedding-3-small",
                input=text
            )
            return response.data[0].embedding
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {e}")
            return None
    
    async def add_user_memory(self, user_id: int, content: str, memory_type: str = "dialogue", metadata: Dict = None):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É.
        
        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–º—è—Ç–∏
        :param memory_type: –¢–∏–ø –ø–∞–º—è—Ç–∏ (dialogue, preference, fact, etc.)
        :param metadata: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        """
        if not self.collection:
            logger.warning("–í–µ–∫—Ç–æ—Ä–Ω–∞—è –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        try:
            # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥
            embedding = await self.create_embedding(content)
            if not embedding:
                return
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            doc_metadata = {
                "user_id": user_id,
                "memory_type": memory_type,
                "timestamp": str(asyncio.get_event_loop().time()),
                **(metadata or {})
            }
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
            doc_id = hashlib.md5(f"{user_id}_{content}_{memory_type}".encode()).hexdigest()
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            await asyncio.get_event_loop().run_in_executor(
                self.executor,
                lambda: self.collection.add(
                    ids=[doc_id],
                    embeddings=[embedding],
                    documents=[content],
                    metadatas=[doc_metadata]
                )
            )
            
            logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–∞–º—è—Ç—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {memory_type}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏: {e}")
    
    async def search_user_memory(self, user_id: int, query: str, limit: int = 5) -> List[Dict]:
        """
        –ò—â–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        :param limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        :return: –°–ø–∏—Å–æ–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
        """
        if not self.collection:
            return []
        
        try:
            # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            query_embedding = await self.create_embedding(query)
            if not query_embedding:
                return []
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            results = await asyncio.get_event_loop().run_in_executor(
                self.executor,
                lambda: self.collection.query(
                    query_embeddings=[query_embedding],
                    n_results=limit,
                    where={"user_id": user_id}
                )
            )
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            memories = []
            if results and results['documents']:
                for i, doc in enumerate(results['documents'][0]):
                    memory = {
                        "content": doc,
                        "score": results['distances'][0][i] if results['distances'] else 1.0,
                        "metadata": results['metadatas'][0][i] if results['metadatas'] else {}
                    }
                    memories.append(memory)
            
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(memories)} –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return memories
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–∞–º—è—Ç–∏: {e}")
            return []
    
    async def get_user_context(self, user_id: int, current_message: str) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤.
        
        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param current_message: –¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :return: –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
        """
        try:
            # –ò—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
            memories = await self.search_user_memory(user_id, current_message, limit=3)
            
            if not memories:
                return ""
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
            context_parts = []
            context_parts.append("–ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ô –ö–û–ù–¢–ï–ö–°–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:")
            
            for memory in memories:
                score = memory['score']
                content = memory['content']
                memory_type = memory['metadata'].get('memory_type', 'unknown')
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è (score < 0.3 –æ–∑–Ω–∞—á–∞–µ—Ç –≤—ã—Å–æ–∫—É—é —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å)
                if score < 0.5:
                    context_parts.append(f"- [{memory_type.upper()}] {content}")
            
            if len(context_parts) > 1:
                context_parts.append("–£–ß–ò–¢–´–í–ê–ô –≠–¢–û–¢ –ö–û–ù–¢–ï–ö–°–¢ –ü–†–ò –û–¢–í–ï–¢–ï.")
                return "\n".join(context_parts)
            
            return ""
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            return ""
    
    async def add_user_preference(self, user_id: int, preference: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        await self.add_user_memory(
            user_id, 
            preference, 
            "preference",
            {"category": "user_preference"}
        )
    
    async def add_user_fact(self, user_id: int, fact: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ñ–∞–∫—Ç –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
        await self.add_user_memory(
            user_id,
            fact,
            "fact", 
            {"category": "user_fact"}
        )
    
    async def learn_from_dialogue(self, user_id: int, user_message: str, bot_response: str):
        """
        –û–±—É—á–∞–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
        
        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param user_message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param bot_response: –û—Ç–≤–µ—Ç –±–æ—Ç–∞
        """
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–ª–æ–≥ –≤ –ø–∞–º—è—Ç—å
        dialogue_entry = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_message}\n–ë–æ—Ç: {bot_response}"
        await self.add_user_memory(
            user_id,
            dialogue_entry,
            "dialogue",
            {"interaction_type": "qa_pair"}
        )
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        preferences = await self._extract_preferences(user_message)
        for pref in preferences:
            await self.add_user_preference(user_id, pref)
    
    async def _extract_preferences(self, message: str) -> List[str]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è.
        
        :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :return: –°–ø–∏—Å–æ–∫ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
        """
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —ç–≤—Ä–∏—Å—Ç–∏–∫—É –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
            preference_indicators = [
                "–º–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è", "—è –ª—é–±–ª—é", "–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é", "–Ω–µ –ª—é–±–ª—é", 
                "–Ω–µ–Ω–∞–≤–∏–∂—É", "–º–æ–π —Å—Ç–∏–ª—å", "—è –≤—Å–µ–≥–¥–∞", "—è –Ω–∏–∫–æ–≥–¥–∞",
                "i like", "i love", "i prefer", "i hate", "i always", "i never"
            ]
            
            preferences = []
            message_lower = message.lower()
            
            for indicator in preference_indicators:
                if indicator in message_lower:
                    # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
                    start_idx = message_lower.find(indicator)
                    preference_text = message[start_idx:start_idx + 100]  # –ë–µ—Ä–µ–º –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤
                    preferences.append(f"–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ: {preference_text.strip()}")
            
            return preferences
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: {e}")
            return []
    
    async def get_user_stats(self, user_id: int) -> Dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–º—è—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :return: –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        if not self.collection:
            return {"total_memories": 0, "by_type": {}}
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            results = await asyncio.get_event_loop().run_in_executor(
                self.executor,
                lambda: self.collection.get(where={"user_id": user_id})
            )
            
            stats = {
                "total_memories": len(results['ids']) if results['ids'] else 0,
                "by_type": {}
            }
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ —Ç–∏–ø–∞–º
            if results['metadatas']:
                for metadata in results['metadatas']:
                    memory_type = metadata.get('memory_type', 'unknown')
                    stats['by_type'][memory_type] = stats['by_type'].get(memory_type, 0) + 1
            
            return stats
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {"total_memories": 0, "by_type": {}}
    
    async def clear_user_memory(self, user_id: int, memory_type: Optional[str] = None):
        """
        –û—á–∏—â–∞–µ—Ç –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param memory_type: –¢–∏–ø –ø–∞–º—è—Ç–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (None = –≤—Å–µ)
        """
        if not self.collection:
            return
        
        try:
            where_clause = {"user_id": user_id}
            if memory_type:
                where_clause["memory_type"] = memory_type
            
            # –ü–æ–ª—É—á–∞–µ–º ID –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            results = await asyncio.get_event_loop().run_in_executor(
                self.executor,
                lambda: self.collection.get(where=where_clause)
            )
            
            if results['ids']:
                # –£–¥–∞–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
                await asyncio.get_event_loop().run_in_executor(
                    self.executor,
                    lambda: self.collection.delete(ids=results['ids'])
                )
                
                logger.info(f"üóëÔ∏è –û—á–∏—â–µ–Ω–∞ –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {len(results['ids'])} –∑–∞–ø–∏—Å–µ–π")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
personal_assistant = PersonalAssistant()
