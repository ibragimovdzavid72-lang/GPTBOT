"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Webhook –¥–ª—è Telegram –±–æ—Ç–∞.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ polling, —Ç–∞–∫ –∏ webhook —Ä–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã.
"""

import logging
import os
from aiohttp import web
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application

logger = logging.getLogger(__name__)


class WebhookManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è webhook –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏."""
    
    def __init__(self, bot, dp):
        self.bot = bot
        self.dp = dp
        
    async def setup_webhook(self) -> bool:
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è –±–æ—Ç–∞.
        
        :return: True –µ—Å–ª–∏ webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è polling
        """
        webhook_url = os.getenv("WEBHOOK_URL")
        webhook_secret = os.getenv("WEBHOOK_SECRET", "telegram_webhook_secret")
        
        if not webhook_url:
            logger.info("WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è polling —Ä–µ–∂–∏–º")
            return False
            
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
            await self.bot.set_webhook(
                url=webhook_url,
                secret_token=webhook_secret,
                allowed_updates=["message", "callback_query", "inline_query"]
            )
            logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
            return False
    
    async def remove_webhook(self) -> None:
        """–£–¥–∞–ª–µ–Ω–∏–µ webhook."""
        try:
            await self.bot.delete_webhook(drop_pending_updates=True)
            logger.info("Webhook —É–¥–∞–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook: {e}")
    
    def create_webhook_app(self) -> web.Application:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è webhook.
        
        :return: Configured aiohttp application
        """
        webhook_path = os.getenv("WEBHOOK_PATH", "/")
        webhook_secret = os.getenv("WEBHOOK_SECRET", "telegram_webhook_secret")
        
        # –°–æ–∑–¥–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = web.Application()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook
        handler = SimpleRequestHandler(
            dispatcher=self.dp,
            bot=self.bot,
            secret_token=webhook_secret
        )
        handler.register(app, path=webhook_path)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        setup_application(app, self.dp, bot=self.bot)
        
        # –î–æ–±–∞–≤–ª—è–µ–º health check endpoint
        async def health_check(request):
            return web.json_response({"status": "ok", "bot": "telegram_ai_agent_v2"})
        
        app.router.add_get("/health", health_check)
        
        # –ï—Å–ª–∏ webhook –ø—É—Ç—å –Ω–µ –∫–æ—Ä–Ω–µ–≤–æ–π, –¥–æ–±–∞–≤–ª—è–µ–º health check –Ω–∞ –∫–æ—Ä–µ–Ω—å
        if webhook_path != "/":
            app.router.add_get("/", health_check)
        
        logger.info(f"Webhook app —Å–æ–∑–¥–∞–Ω —Å –ø—É—Ç–µ–º: {webhook_path}")
        return app
    
    async def run_webhook_server(self, port: int = None) -> None:
        """
        –ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞.
        
        :param port: –ü–æ—Ä—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è)
        """
        if port is None:
            port = int(os.getenv("PORT", "8443"))
        
        host = os.getenv("HOST", "0.0.0.0")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = self.create_webhook_app()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        runner = web.AppRunner(app)
        await runner.setup()
        
        site = web.TCPSite(runner, host, port)
        await site.start()
        
        logger.info(f"üåê Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {host}:{port}")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook
        webhook_set = await self.setup_webhook()
        if not webhook_set:
            logger.warning("‚ö†Ô∏è Webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–æ —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        return runner
    
    async def get_telegram_webhook_info(self):
        """–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook –æ—Ç Telegram."""
        try:
            webhook_info = await self.bot.get_webhook_info()
            logger.info(f"üìä Webhook —Å—Ç–∞—Ç—É—Å: {webhook_info}")
            return webhook_info
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è webhook –∏–Ω—Ñ–æ: {e}")
            return None
    
    @staticmethod
    def get_webhook_info():
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."""
        return {
            "webhook_url": os.getenv("WEBHOOK_URL"),
            "webhook_path": os.getenv("WEBHOOK_PATH", "/"),
            "webhook_secret": os.getenv("WEBHOOK_SECRET", "telegram_webhook_secret"),
            "port": int(os.getenv("PORT", "8443")),
            "host": os.getenv("HOST", "0.0.0.0")
        }
