"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Webhook –¥–ª—è Telegram –±–æ—Ç–∞.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ polling, —Ç–∞–∫ –∏ webhook —Ä–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã.
"""

import logging
import os
from aiohttp import web
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application

logger = logging.getLogger(__name__)


class WebhookManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è webhook –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏."""
    
    def __init__(self, bot, dp):
        self.bot = bot
        self.dp = dp
        
    async def setup_webhook(self) -> bool:
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è –±–æ—Ç–∞.
        
        :return: True –µ—Å–ª–∏ webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è polling
        """
        webhook_url = os.getenv("WEBHOOK_URL")
        webhook_secret = os.getenv("WEBHOOK_SECRET", "telegram_webhook_secret")
        
        if not webhook_url:
            logger.info("WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è polling —Ä–µ–∂–∏–º")
            return False
            
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
            await self.bot.set_webhook(
                url=webhook_url,
                secret_token=webhook_secret,
                allowed_updates=["message", "callback_query", "inline_query"]
            )
            logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
            return False
    
    async def remove_webhook(self) -> None:
        """–£–¥–∞–ª–µ–Ω–∏–µ webhook."""
        try:
            await self.bot.delete_webhook(drop_pending_updates=True)
            logger.info("Webhook —É–¥–∞–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook: {e}")
    
    def create_webhook_app(self) -> web.Application:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è webhook.
        
        :return: Configured aiohttp application
        """
        webhook_path = os.getenv("WEBHOOK_PATH", "/")
        webhook_secret = os.getenv("WEBHOOK_SECRET", "telegram_webhook_secret")
        
        # –°–æ–∑–¥–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = web.Application()
        
        # –°–æ–∑–¥–∞–µ–º —Ä—É—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ —Ä–∞–±–æ—Ç—ã
        async def handle_webhook(request):
            """–†—É—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —É—Å–∏–ª–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é."""
            try:
                logger.info(f"üåê –ü–æ–ª—É—á–µ–Ω webhook POST –∑–∞–ø—Ä–æ—Å –Ω–∞ {request.path} –æ—Ç {request.remote}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º method
                if request.method != 'POST':
                    logger.warning(f"‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π HTTP method: {request.method}")
                    return web.Response(status=405)  # Method Not Allowed
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º Content-Type
                content_type = request.headers.get("Content-Type", "")
                if "application/json" not in content_type:
                    logger.warning(f"‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Content-Type: {content_type}")
                    return web.Response(status=400)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º secret token –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                if webhook_secret and webhook_secret != "telegram_webhook_secret":
                    secret_header = request.headers.get("X-Telegram-Bot-Api-Secret-Token")
                    if secret_header != webhook_secret:
                        logger.warning(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π secret token: expected '{webhook_secret}', got '{secret_header}'")
                        logger.warning(f"üïµÔ∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç {request.remote}")
                        return web.Response(status=401)  # Unauthorized
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                try:
                    data = await request.json()
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                    return web.Response(status=400)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
                if not isinstance(data, dict) or 'update_id' not in data:
                    logger.warning(f"‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {data}")
                    return web.Response(status=400)
                
                logger.info(f"üìÑ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: update_id={data.get('update_id', '?')}")
                
                from aiogram import types
                update = types.Update(**data)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
                await self.dp.feed_update(self.bot, update)
                logger.info("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
                
                return web.Response(status=200)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
                import traceback
                logger.error(f"‚ùå –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞: {traceback.format_exc()}")
                return web.Response(status=500)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –∫–æ—Ä–Ω–µ–≤–æ–º –ø—É—Ç–∏ –ò –Ω–∞ /webhook –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        app.router.add_post("/", handle_webhook)
        app.router.add_post("/webhook", handle_webhook)
        
        # –î–æ–±–∞–≤–ª—è–µ–º health check endpoint
        async def health_check(request):
            return web.json_response({"status": "ok", "bot": "telegram_ai_agent_v2", "webhook_path": webhook_path})
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ favicon –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è 404
        async def favicon_handler(request):
            return web.Response(status=204)  # No Content
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        async def log_requests(request, handler):
            logger.info(f"üì• –í—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å: {request.method} {request.path} –æ—Ç {request.remote}")
            try:
                response = await handler(request)
                logger.info(f"üì§ –û—Ç–≤–µ—Ç: {response.status}")
                return response
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ {request.path}: {e}")
                return web.Response(status=500)
        
        # –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        app.middlewares.append(log_requests)
        
        app.router.add_get("/health", health_check)
        app.router.add_get("/", health_check)  # GET –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –∫–æ—Ä–µ–Ω—å –¥–ª—è health check
        app.router.add_get("/favicon.ico", favicon_handler)
        app.router.add_head("/favicon.ico", favicon_handler)  # HEAD –∑–∞–ø—Ä–æ—Å—ã —Ç–æ–∂–µ
        
        logger.info(f"Webhook app —Å–æ–∑–¥–∞–Ω —Å –ø—É—Ç—è–º–∏: / –∏ /webhook")
        return app
    
    async def run_webhook_server(self, port: int = None) -> None:
        """
        –ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞.
        
        :param port: –ü–æ—Ä—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è)
        """
        if port is None:
            port = int(os.getenv("PORT", "8443"))
        
        host = os.getenv("HOST", "0.0.0.0")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = self.create_webhook_app()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        runner = web.AppRunner(app)
        await runner.setup()
        
        site = web.TCPSite(runner, host, port)
        await site.start()
        
        logger.info(f"üåê Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {host}:{port}")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook
        webhook_set = await self.setup_webhook()
        if not webhook_set:
            logger.warning("‚ö†Ô∏è Webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–æ —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        return runner
    
    async def get_telegram_webhook_info(self):
        """–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook –æ—Ç Telegram."""
        try:
            webhook_info = await self.bot.get_webhook_info()
            logger.info(f"üìä Webhook —Å—Ç–∞—Ç—É—Å: {webhook_info}")
            return webhook_info
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è webhook –∏–Ω—Ñ–æ: {e}")
            return None
    
    @staticmethod
    def get_webhook_info():
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."""
        return {
            "webhook_url": os.getenv("WEBHOOK_URL"),
            "webhook_path": os.getenv("WEBHOOK_PATH", "/"),
            "webhook_secret": os.getenv("WEBHOOK_SECRET", "telegram_webhook_secret"),
            "port": int(os.getenv("PORT", "8443")),
            "host": os.getenv("HOST", "0.0.0.0")
        }
