"""
Настройки Русского AI Телеграм Бота
===================================
Полная конфигурация с русскими настройками по умолчанию,
тарифными планами и локализацией для русскоязычных пользователей.
"""

import os
from functools import lru_cache
from typing import Dict, List, Optional, Any
from dataclasses import dataclass

from pydantic import Field, validator
from pydantic_settings import BaseSettings


@dataclass
class ЛимитыТарифа:
    """Лимиты для разных тарифов подписки."""
    название: str
    сообщений_в_день: int
    изображений_в_день: int
    минут_голоса_в_день: int
    максимальный_размер_файла_мб: int
    сообщений_контекста: int
    приоритетная_поддержка: bool
    расширенные_функции: bool
    цена_рублей: int
    цена_долларов: int


class НастройкиБазыДанных(BaseSettings):
    """Конфигурация базы данных."""
    ссылка: str = Field("", env="DATABASE_URL")
    мин_соединений: int = Field(2, env="DB_MIN_CONNECTIONS")
    макс_соединений: int = Field(20, env="DB_MAX_CONNECTIONS")
    таймаут_пула: int = Field(30, env="DB_POOL_TIMEOUT")
    
    class Config:
        env_prefix = "DB_"


class НастройкиТелеграм(BaseSettings):
    """Конфигурация Telegram бота."""
    токен_бота: str = Field("", env="TELEGRAM_BOT_TOKEN")
    ссылка_вебхука: str = Field("", env="TELEGRAM_WEBHOOK_URL")
    путь_вебхука: str = Field("/webhook", env="TELEGRAM_WEBHOOK_PATH")
    секрет_вебхука: str = Field("", env="TELEGRAM_WEBHOOK_SECRET")
    таймаут: int = Field(30, env="TELEGRAM_TIMEOUT")
    макс_соединений: int = Field(100, env="TELEGRAM_MAX_CONNECTIONS")
    
    # Токен провайдера платежей для Telegram Платежей
    токен_провайдера_платежей: str = Field("", env="TELEGRAM_PAYMENT_PROVIDER_TOKEN")
    
    @property
    def полная_ссылка_вебхука(self) -> str:
        """Получить полную ссылку вебхука."""
        if not self.ссылка_вебхука:
            return ""
        return f"{self.ссылка_вебхука.rstrip('/')}{self.путь_вебхука}"
    
    class Config:
        env_prefix = "TELEGRAM_"


class НастройкиОпенАИ(BaseSettings):
    """Конфигурация OpenAI API."""
    апи_ключ: str = Field("", env="OPENAI_API_KEY")
    
    # Модели
    модель_чата: str = Field("gpt-4o", env="OPENAI_CHAT_MODEL")
    резервная_модель: str = Field("gpt-4o-mini", env="OPENAI_FALLBACK_MODEL")
    модель_изображений: str = Field("dall-e-3", env="OPENAI_IMAGE_MODEL")
    модель_видения: str = Field("gpt-4o", env="OPENAI_VISION_MODEL")
    модель_озвучки: str = Field("tts-1", env="OPENAI_TTS_MODEL")
    модель_распознавания: str = Field("whisper-1", env="OPENAI_STT_MODEL")
    
    # Параметры
    максимальных_токенов: int = Field(2000, env="OPENAI_MAX_TOKENS")
    температура: float = Field(0.7, env="OPENAI_TEMPERATURE")
    
    # Таймауты и повторы
    таймаут: int = Field(60, env="OPENAI_TIMEOUT")
    максимальных_повторов: int = Field(3, env="OPENAI_MAX_RETRIES")
    
    class Config:
        env_prefix = "OPENAI_"


class НастройкиБезопасности(BaseSettings):
    """Конфигурация безопасности и ограничения скорости."""
    окно_ограничения_скорости: int = Field(3600, env="RATE_LIMIT_WINDOW")  # секунды
    запросов_ограничения_скорости: int = Field(100, env="RATE_LIMIT_REQUESTS")
    
    # Безопасность файлов
    максимальный_размер_файла: int = Field(50 * 1024 * 1024, env="MAX_FILE_SIZE")  # 50МБ
    разрешенные_типы_файлов: List[str] = Field(
        [
            "image/jpeg", "image/png", "image/gif", "image/webp",
            "audio/ogg", "audio/mpeg", "audio/wav", "audio/mp4",
            "video/mp4", "video/mpeg", "video/quicktime",
            "application/pdf", "text/plain", "application/json"
        ],
        env="ALLOWED_FILE_TYPES"
    )
    
    # Модерация контента
    включить_модерацию_контента: bool = Field(True, env="ENABLE_CONTENT_MODERATION")
    порог_модерации: float = Field(0.8, env="MODERATION_THRESHOLD")
    
    class Config:
        env_prefix = "SECURITY_"


class НастройкиФункций(BaseSettings):
    """Конфигурация переключения функций."""
    включить_голос: bool = Field(True, env="ENABLE_VOICE")
    включить_изображения: bool = Field(True, env="ENABLE_IMAGES")
    включить_видение: bool = Field(True, env="ENABLE_VISION")
    включить_инструменты: bool = Field(True, env="ENABLE_TOOLS")
    включить_напоминания: bool = Field(True, env="ENABLE_REMINDERS")
    включить_платежи: bool = Field(True, env="ENABLE_PAYMENTS")
    включить_аналитику: bool = Field(True, env="ENABLE_ANALYTICS")
    включить_админ_панель: bool = Field(True, env="ENABLE_ADMIN_PANEL")
    
    # Специфичные настройки инструментов
    включить_погоду: bool = Field(True, env="ENABLE_WEATHER")
    включить_википедию: bool = Field(True, env="ENABLE_WIKIPEDIA")
    включить_калькулятор: bool = Field(True, env="ENABLE_CALCULATOR")
    включить_переводчик: bool = Field(True, env="ENABLE_TRANSLATOR")
    
    class Config:
        env_prefix = "FEATURES_"


class НастройкиВнешнихАПИ(BaseSettings):
    """Конфигурация внешних API."""
    ключ_погоды: str = Field("", env="WEATHER_API_KEY")
    ссылка_апи_погоды: str = Field("http://api.openweathermap.org/data/2.5", env="WEATHER_API_URL")
    
    # Настройки Wikipedia
    язык_википедии: str = Field("ru", env="WIKIPEDIA_LANG")
    предложений_википедии: int = Field(3, env="WIKIPEDIA_SENTENCES")
    
    class Config:
        env_prefix = "EXTERNAL_"


class НастройкиПриложения(BaseSettings):
    """Основные настройки приложения."""
    # Базовая конфигурация приложения
    отладка: bool = Field(False, env="DEBUG")
    версия: str = Field("3.0.0", env="APP_VERSION")
    среда: str = Field("production", env="ENVIRONMENT")
    порт: int = Field(8000, env="PORT")
    хост: str = Field("0.0.0.0", env="HOST")
    
    # Логирование
    уровень_лога: str = Field("INFO", env="LOG_LEVEL")
    
    # Конфигурация админа
    ид_супер_админа: int = Field(0, env="SUPER_ADMIN_ID")
    иды_админов: List[int] = Field([], env="ADMIN_IDS")
    
    # Локализация (русские настройки по умолчанию)
    язык_по_умолчанию: str = Field("ru", env="DEFAULT_LANGUAGE")
    поддерживаемые_языки: List[str] = Field(["ru", "en"], env="SUPPORTED_LANGUAGES")
    часовой_пояс: str = Field("Europe/Moscow", env="TIMEZONE")
    
    # Управление сессиями
    таймаут_сессии_часов: int = Field(24, env="SESSION_TIMEOUT_HOURS")
    максимальная_длина_разговора: int = Field(50, env="MAX_CONVERSATION_LENGTH")
    
    # Фоновые задачи
    интервал_проверки_напоминаний: int = Field(60, env="REMINDER_CHECK_INTERVAL")  # секунды
    интервал_аналитики: int = Field(300, env="ANALYTICS_INTERVAL")  # секунды
    интервал_обслуживания: int = Field(3600, env="MAINTENANCE_INTERVAL")  # секунды
    
    # Под-конфигурации
    база_данных: НастройкиБазыДанных = НастройкиБазыДанных()
    телеграм: НастройкиТелеграм = НастройкиТелеграм()
    опенаи: НастройкиОпенАИ = НастройкиОпенАИ()
    безопасность: НастройкиБезопасности = НастройкиБезопасности()
    функции: НастройкиФункций = НастройкиФункций()
    внешние_апи: НастройкиВнешнихАПИ = НастройкиВнешнихАПИ()
    
    @validator("иды_админов", pre=True)
    def парсить_иды_админов(cls, v):
        """Парсинг ID админов из строки через запятую или списка."""
        if isinstance(v, str):
            if not v.strip():
                return []
            return [int(x.strip()) for x in v.split(",") if x.strip().isdigit()]
        return v or []
    
    @validator("поддерживаемые_языки", pre=True)
    def парсить_языки(cls, v):
        """Парсинг поддерживаемых языков."""
        if isinstance(v, str):
            return [lang.strip() for lang in v.split(",") if lang.strip()]
        return v or ["ru", "en"]
    
    @property
    def это_админ(self) -> callable:
        """Проверить, является ли пользователь админом."""
        def проверить(ид_пользователя: int) -> bool:
            return ид_пользователя == self.ид_супер_админа or ид_пользователя in self.иды_админов
        return проверить
    
    @property
    def это_супер_админ(self) -> callable:
        """Проверить, является ли пользователь супер админом."""
        def проверить(ид_пользователя: int) -> bool:
            return ид_пользователя == self.ид_супер_админа
        return проверить
    
    class Config:
        env_file = ".env"
        env_file_encoding = "utf-8"


# Конфигурация тарифов подписки
ТАРИФЫ_ПОДПИСОК: Dict[str, ЛимитыТарифа] = {
    "БЕСПЛАТНЫЙ": ЛимитыТарифа(
        название="Бесплатный",
        сообщений_в_день=20,
        изображений_в_день=5,
        минут_голоса_в_день=10,
        максимальный_размер_файла_мб=10,
        сообщений_контекста=10,
        приоритетная_поддержка=False,
        расширенные_функции=False,
        цена_рублей=0,
        цена_долларов=0
    ),
    "ПРО": ЛимитыТарифа(
        название="Про",
        сообщений_в_день=200,
        изображений_в_день=50,
        минут_голоса_в_день=60,
        максимальный_размер_файла_мб=50,
        сообщений_контекста=30,
        приоритетная_поддержка=True,
        расширенные_функции=True,
        цена_рублей=500,
        цена_долларов=5
    ),
    "КОМАНДА": ЛимитыТарифа(
        название="Команда",
        сообщений_в_день=1000,
        изображений_в_день=200,
        минут_голоса_в_день=300,
        максимальный_размер_файла_мб=100,
        сообщений_контекста=50,
        приоритетная_поддержка=True,
        расширенные_функции=True,
        цена_рублей=1500,
        цена_долларов=15
    )
}

# Тексты локализации
ТЕКСТЫ: Dict[str, Dict[str, str]] = {
    "ru": {
        # Приветствие и базовые команды
        "приветствие": "🚀 **Добро пожаловать в AI CHAT 2, {имя}!**\n\n🧠 **НОВЫЕ возможности:**\n• 🤖 Мультимодельный AI (GPT-4o)\n• 🎨 Генерация изображений DALL-E 3\n• 👁️ Анализ изображений\n• 🔊 Голосовые сообщения\n• 📊 Продвинутая аналитика\n• 💎 Персонализация\n\n✨ **Инновационные функции:**\n• 🧙‍♂️ AI Персоны (Эйнштейн, да Винчи, Джобс)\n• 🎮 Интерактивные игры\n• 🛠️ Умные инструменты\n• ⏰ Фоновые напоминания\n\n💫 **Начните прямо сейчас:**\nПросто напишите любой вопрос и испытайте современного AI!",
        "помощь": "📖 <b>Руководство по использованию бота</b>\n\n<b>Основные возможности:</b>\n💬 Просто напишите сообщение для общения\n🎨 Опишите желаемое изображение для создания\n📸 Отправьте фото для анализа\n🎤 Отправьте голосовое сообщение\n\n<b>Инструменты:</b>\n🌤 Прогноз погоды для любого города\n📚 Поиск информации в Википедии\n🧮 Математические вычисления\n⏰ Установка напоминаний\n\n<b>Управление:</b>\n⚙️ Настройки и конфигурация\n📊 Личная статистика использования\n💳 Управление подпиской",
        
        # Подписка и лимиты
        "лимиты_превышены": "⚠️ Вы достигли дневного лимита использования.\n\n📊 Ваша активность сегодня:\n💬 Сообщения: {использовано_сообщений}/{лимит_сообщений}\n🎨 Изображения: {использовано_изображений}/{лимит_изображений}\n\n💎 Получите больше возможностей с подпиской Про!",
        "предложение_апгрейда": "🚀 Хотите расширить возможности?\n\n💎 <b>Подписка Про</b> включает:\n✅ 200 сообщений в день\n✅ 50 изображений в день\n✅ 60 минут голоса в день\n✅ Приоритетная поддержка\n✅ Все продвинутые функции\n\n💰 Всего 500₽/месяц",
        
        # Инструменты
        "запрос_погоды": "🌤 Введите название города для получения прогноза погоды:",
        "запрос_википедии": "📚 Введите ваш запрос для поиска в Википедии:",
        "запрос_калькулятора": "🧮 Введите математическое выражение для вычисления:",
        "запрос_напоминания": "⏰ Введите напоминание в формате:\n<code>ГГГГ-ММ-ДД ЧЧ:ММ текст напоминания</code>\n\nПример: <code>2024-12-31 15:30 Купить новогодние подарки</code>",
        
        # Админ
        "админ_панель": "👑 <b>Панель администратора</b>\n\n📊 Системная статистика:\n👥 Всего пользователей: {всего_пользователей}\n💬 Сообщений сегодня: {сообщений_сегодня}\n🎨 Изображений сегодня: {изображений_сегодня}\n⚡ Среднее время ответа: {среднее_время_ответа}с",
        "пользователь_повышен": "✅ Пользователь {ид_пользователя} назначен администратором",
        "пользователь_понижен": "✅ Права администратора у пользователя {ид_пользователя} отозваны",
        
        # Ошибки
        "ошибка_общая": "😔 Произошла ошибка. Попробуйте позже или обратитесь в поддержку.",
        "ошибка_большой_файл": "📁 Файл слишком большой. Максимальный размер: {максимальный_размер}МБ",
        "ошибка_неподдерживаемый_файл": "❌ Неподдерживаемый тип файла. Поддерживаются: изображения, аудио, документы.",
        "ошибка_модерации": "🚫 Ваш запрос не прошел модерацию. Пожалуйста, соблюдайте правила сообщества.",
        "ошибка_платежа": "💳 Ошибка при обработке платежа. Попробуйте снова или обратитесь в поддержку.",
        
        # Сообщения об успехе
        "платеж_успешен": "✅ Платеж успешно обработан! Ваша подписка {тариф} активирована до {дата_окончания}.",
        "напоминание_установлено": "⏰ Напоминание успешно установлено на {дата_время}",
        "настройки_обновлены": "⚙️ Настройки успешно сохранены",
        
        # Кнопки
        "кнопка_чат": "💬 Чат",
        "кнопка_изображения": "🎨 Изображения", 
        "кнопка_голос": "🔊 Голос",
        "кнопка_инструменты": "🛠 Инструменты",
        "кнопка_настройки": "⚙️ Настройки",
        "кнопка_помощь": "📖 Помощь",
        "кнопка_статистика": "📊 Статистика",
        "кнопка_подписка": "💎 Подписка",
        "кнопка_админ": "👑 Админ",
        "кнопка_назад": "⬅️ Назад",
        "кнопка_отмена": "❌ Отмена",
        
        # Кнопки инструментов
        "кнопка_погода": "🌤 Погода",
        "кнопка_википедия": "📚 Википедия",
        "кнопка_калькулятор": "🧮 Калькулятор",
        "кнопка_напоминания": "⏰ Напоминания",
        "кнопка_переводчик": "🌐 Переводчик",
        
        # Кнопки настроек
        "кнопка_язык": "🌍 Язык",
        "кнопка_уведомления": "🔔 Уведомления",
        "кнопка_приватность": "🔒 Приватность",
    }
}


@lru_cache()
def получить_настройки() -> НастройкиПриложения:
    """Получить кешированные настройки приложения."""
    return НастройкиПриложения()


def получить_лимиты_тарифа(тариф: str) -> ЛимитыТарифа:
    """Получить лимиты для тарифа подписки."""
    return ТАРИФЫ_ПОДПИСОК.get(тариф.upper(), ТАРИФЫ_ПОДПИСОК["БЕСПЛАТНЫЙ"])


def получить_текст(ключ: str, язык: str = "ru", **kwargs) -> str:
    """Получить локализованный текст с форматированием."""
    тексты = ТЕКСТЫ.get(язык, ТЕКСТЫ["ru"])
    текст = тексты.get(ключ, ключ)
    
    if kwargs:
        try:
            return текст.format(**kwargs)
        except (KeyError, ValueError):
            return текст
    
    return текст


def это_админ(ид_пользователя: int) -> bool:
    """Проверить, является ли пользователь админом."""
    настройки = получить_настройки()
    return ид_пользователя == настройки.ид_супер_админа or ид_пользователя in настройки.иды_админов


def это_супер_админ(ид_пользователя: int) -> bool:
    """Проверить, является ли пользователь супер админом."""
    настройки = получить_настройки()
    return ид_пользователя == настройки.ид_супер_админа


# Экспорт основного экземпляра настроек
настройки = получить_настройки()