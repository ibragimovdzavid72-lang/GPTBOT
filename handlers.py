import logging
from typing import Any, Dict, Optional
import httpx

from db import (
    upsert_user, set_mode, get_mode, append_msg, history, inc_limits
)
from openai_api import (
    moderate, respond_text, respond_vision, generate_image, stt_transcribe, tts_speak
)
from telegram_api import (
    tg_send_message, tg_send_photo, tg_send_document, tg_send_voice, tg_get_file
)
from settings import HISTORY_LIMIT, FREE_MSGS_PER_DAY, FREE_IMAGES_PER_DAY

log = logging.getLogger("handlers")

def kb_main() -> Dict[str, Any]:
    rows = [
        [{"text": "üí¨ –ß–∞—Ç"}, {"text": "üõ† –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"}],
        [{"text": "üé® –ö–∞—Ä—Ç–∏–Ω–∫–∞"}, {"text": "üîä –ì–æ–ª–æ—Å"}],
        [{"text": "‚ÑπÔ∏è –ü–æ–º–æ—â—å"}, {"text": "üßπ –°–±—Ä–æ—Å–∏—Ç—å –ø–∞–º—è—Ç—å"}],
    ]
    return {"keyboard": rows, "resize_keyboard": True}

def _msg(update: Dict[str, Any]) -> Dict[str, Any]:
    return update.get("message") or {}

def _text(update: Dict[str, Any]) -> Optional[str]:
    return _msg(update).get("text")

def _ids(update: Dict[str, Any]) -> tuple[int, int, Optional[str]]:
    m = _msg(update); c = m.get("chat", {}); f = m.get("from", {})
    return int(f.get("id", 0)), int(c.get("id", 0)), f.get("username")

def _photos(update: Dict[str, Any]) -> list[Dict[str, Any]]:
    return _msg(update).get("photo") or []

def _voice(update: Dict[str, Any]) -> Optional[Dict[str, Any]]:
    return _msg(update).get("voice")

async def handle_update(update: Dict[str, Any], *, pool):
    text = _text(update)
    user_id, chat_id, username = _ids(update)
    await upsert_user(pool, user_id, username)

    # –∫–æ–º–∞–Ω–¥—ã
    if text:
        low = text.strip().lower()
        if low in ("/start", "start"):
            await tg_send_message(chat_id,
                "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ GPT‚Äë4o: —á–∞—Ç, –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –∫–∞—Ä—Ç–∏–Ω–∫–∏, –≥–æ–ª–æ—Å.
"
                "–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ –∏ –Ω–∞–ø–∏—à–∏/—Å–∫–∞–∂–∏ –º–Ω–µ.",
            )
            await tg_send_message(chat_id, "–ì–æ—Ç–æ–≤–æ.", reply_markup=kb_main())
            return
        if low in ("/help", "‚ÑπÔ∏è –ø–æ–º–æ—â—å", "help"):
            await tg_send_message(chat_id,
                "–†–µ–∂–∏–º—ã:
"
                "‚Ä¢ üí¨ –ß–∞—Ç ‚Äî –æ–±—ã—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã.
"
                "‚Ä¢ üõ† –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã ‚Äî web-–ø–æ–∏—Å–∫ (–≤–∏–∫–∏), –ø–æ–≥–æ–¥–∞, –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
"
                "‚Ä¢ üé® –ö–∞—Ä—Ç–∏–Ω–∫–∞ ‚Äî –≥–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é.
"
                "‚Ä¢ üîä –ì–æ–ª–æ—Å ‚Äî –ø—Ä–∏—Å—ã–ª–∞–π voice; –æ—Ç–≤–µ—á—É –≥–æ–ª–æ—Å–æ–º –∏ —Ç–µ–∫—Å—Ç–æ–º.
"
                "–°–±—Ä–æ—Å –ø–∞–º—è—Ç–∏: ¬´üßπ –°–±—Ä–æ—Å–∏—Ç—å –ø–∞–º—è—Ç—å¬ª.",
            )
            return
        if low in ("üí¨ —á–∞—Ç", "chat"):
            await set_mode(pool, user_id, "chat")
            await tg_send_message(chat_id, "üó£ –†–µ–∂–∏–º: –ß–∞—Ç")
            return
        if low in ("üõ† –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", "tools"):
            await set_mode(pool, user_id, "tools")
            await tg_send_message(chat_id, "üîß –†–µ–∂–∏–º: –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
            return
        if low in ("üé® –∫–∞—Ä—Ç–∏–Ω–∫–∞", "image"):
            await set_mode(pool, user_id, "image")
            await tg_send_message(chat_id, "üé® –†–µ–∂–∏–º: –ö–∞—Ä—Ç–∏–Ω–∫–∞. –û–ø–∏—à–∏, —á—Ç–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å.")
            return
        if low in ("üîä –≥–æ–ª–æ—Å", "voice"):
            await set_mode(pool, user_id, "voice")
            await tg_send_message(chat_id, "üîä –†–µ–∂–∏–º: –ì–æ–ª–æ—Å. –ü—Ä–∏—à–ª–∏ voice ‚Äî —Ä–∞—Å–ø–æ–∑–Ω–∞—é; –æ—Ç–≤–µ—á—É –≥–æ–ª–æ—Å–æ–º.")
            return
        if low in ("üßπ —Å–±—Ä–æ—Å–∏—Ç—å –ø–∞–º—è—Ç—å", "reset", "/reset"):
            await pool.execute("DELETE FROM messages USING users WHERE messages.user_id=users.id AND users.telegram_id=$1", user_id)
            await tg_send_message(chat_id, "‚úÖ –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞.")
            return

    mode = await get_mode(pool, user_id)

    # voice?
    v = _voice(update)
    if v:
        counters = await inc_limits(pool, user_id, is_image=False)
        if counters["daily_msgs"] > FREE_MSGS_PER_DAY:
            await tg_send_message(chat_id, "‚ö†Ô∏è –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å—á–µ—Ä–ø–∞–Ω.")
            return
        file_url = await tg_get_file(v["file_id"])
        async with httpx.AsyncClient() as h:
            r = await h.get(file_url); r.raise_for_status()
            ogg_bytes = r.content
        try:
            text = await stt_transcribe(ogg_bytes, filename="audio.ogg")
        except Exception:
            from pydub import AudioSegment; import io
            audio = AudioSegment.from_file(io.BytesIO(ogg_bytes), format="ogg")
            buf = io.BytesIO(); audio.export(buf, format="mp3"); buf.seek(0)
            text = await stt_transcribe(buf.read(), filename="audio.mp3")
        if not text.strip():
            await tg_send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å.")
            return
        await append_msg(pool, user_id, "user", text)
        hist = await history(pool, user_id, HISTORY_LIMIT)
        sys = {"role":"system","content":"–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."}
        reply = await respond_text(hist + [sys, {"role":"user","content":text}], use_tools=False, pool=pool, telegram_id=user_id, chat_id=chat_id)
        await append_msg(pool, user_id, "assistant", reply or "")
        if reply:
            await tg_send_message(chat_id, reply)
            try:
                voice_bytes = await tts_speak(reply)
                await tg_send_voice(chat_id, voice_bytes, filename="reply.ogg")
            except Exception as e:
                log.warning("TTS failed: %s", e)
        return

    # photo?
    phs = _photos(update)
    if phs:
        counters = await inc_limits(pool, user_id, is_image=False)
        if counters["daily_msgs"] > FREE_MSGS_PER_DAY:
            await tg_send_message(chat_id, "‚ö†Ô∏è –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å—á–µ—Ä–ø–∞–Ω.")
            return
        best = sorted(phs, key=lambda p: p.get("file_size", 0))[-1]
        furl = await tg_get_file(best["file_id"])
        prompt = _text(update) or "–û–ø–∏—à–∏, —á—Ç–æ –Ω–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏."
        await append_msg(pool, user_id, "user", f"[image]\n{prompt}")
        reply = await respond_vision(prompt, furl)
        await append_msg(pool, user_id, "assistant", reply or "")
        await tg_send_message(chat_id, reply or "–ì–æ—Ç–æ–≤–æ.")
        return

    # text?
    if text:
        if not await moderate(text):
            await tg_send_message(chat_id, "‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π.")
            return

        if mode == "image":
            counters = await inc_limits(pool, user_id, is_image=True)
            if counters["daily_imgs"] > FREE_IMAGES_PER_DAY:
                await tg_send_message(chat_id, "‚ö†Ô∏è –õ–∏–º–∏—Ç –∫–∞—Ä—Ç–∏–Ω–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å—á–µ—Ä–ø–∞–Ω.")
                return
            await append_msg(pool, user_id, "user", text)
            img = await generate_image(text)
            await tg_send_document(chat_id, img, filename="image.png", caption=f"üñº {text}")
            await append_msg(pool, user_id, "assistant", f"[generated image: {text}]")
            return

        counters = await inc_limits(pool, user_id, is_image=False)
        if counters["daily_msgs"] > FREE_MSGS_PER_DAY:
            await tg_send_message(chat_id, "‚ö†Ô∏è –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å—á–µ—Ä–ø–∞–Ω.")
            return
        await append_msg(pool, user_id, "user", text)
        hist = await history(pool, user_id, HISTORY_LIMIT)
        sys = {"role":"system","content":"–¢—ã —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –æ—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ."}
        use_tools = (mode == "tools")
        reply = await respond_text(hist + [sys, {"role":"user","content":text}], use_tools=use_tools, pool=pool, telegram_id=user_id, chat_id=chat_id)
        await append_msg(pool, user_id, "assistant", reply or "")
        await tg_send_message(chat_id, reply or "–ì–æ—Ç–æ–≤–æ.")
        return

    return
