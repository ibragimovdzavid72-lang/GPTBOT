from __future__ import annotations
import httpx
from typing import Any, Dict
from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums import ChatAction
from settings import FREE_MSGS_PER_DAY, FREE_IMAGES_PER_DAY, HISTORY_LIMIT, RATE_PER_MIN, ADMIN_IDS, BOT_TOKEN
from db import SessionLocal, upsert_user, get_active_session, append_message, get_history, set_mode, inc_limits, add_reminder
from openai_api import moderate, respond_text, respond_vision, generate_image, stt_transcribe, tts_speak

router = Router()

KB = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üí¨ –¢–µ–∫—Å—Ç"), KeyboardButton(text="üß∞ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")],
        [KeyboardButton(text="üñº –ö–∞—Ä—Ç–∏–Ω–∫–∞"), KeyboardButton(text="üéô –ì–æ–ª–æ—Å")],
        [KeyboardButton(text="üß† –ü–∞–º—è—Ç—å –í–ö–õ/–í–´–ö–õ"), KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")],
    ],
    resize_keyboard=True
)

_last_hits: dict[int, list[float]] = {}
def rate_ok(uid: int) -> bool:
    if RATE_PER_MIN <= 0: return True
    import time
    now = time.time()
    wins = _last_hits.setdefault(uid, [])
    _last_hits[uid] = [t for t in wins if now - t <= 60]
    if len(_last_hits[uid]) >= RATE_PER_MIN: return False
    _last_hits[uid].append(now); return True

@router.message(F.text == "/start")
async def cmd_start(msg: Message):
    await msg.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –º—É–ª—å—Ç–∏–±–æ—Ç (GPT‚Äë4o): —Ç–µ–∫—Å—Ç, –∫–∞—Ä—Ç–∏–Ω–∫–∏, –≥–æ–ª–æ—Å –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã. –í—ã–±–∏—Ä–∞–π —Ä–µ–∂–∏–º –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ.", reply_markup=KB)

@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def cmd_help(msg: Message):
    await msg.answer("–†–µ–∂–∏–º—ã:\n‚Ä¢ üí¨ –¢–µ–∫—Å—Ç ‚Äî –æ–±—ã—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã\n‚Ä¢ üß∞ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã ‚Äî –ø–æ–∏—Å–∫/–ø–æ–≥–æ–¥–∞/–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä/–≤–∏–∫–∏\n‚Ä¢ üñº –ö–∞—Ä—Ç–∏–Ω–∫–∞ ‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (DALL¬∑E 3)\n‚Ä¢ üéô –ì–æ–ª–æ—Å ‚Äî –ø—Ä–∏—à–ª–∏ voice; –æ—Ç–≤–µ—á—É –≥–æ–ª–æ—Å–æ–º\n‚Ä¢ üß† –ü–∞–º—è—Ç—å ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –≤ –ë–î")

@router.message(F.text.in_({"üí¨ –¢–µ–∫—Å—Ç","üß∞ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã","üñº –ö–∞—Ä—Ç–∏–Ω–∫–∞","üéô –ì–æ–ª–æ—Å","üß† –ü–∞–º—è—Ç—å –í–ö–õ/–í–´–ö–õ"}))
async def switch_mode(msg: Message):
    uid = msg.from_user.id
    async with SessionLocal() as s:
        u = await upsert_user(s, uid, msg.from_user.username)
        if msg.text == "üí¨ –¢–µ–∫—Å—Ç":
            await set_mode(s, u, "chat"); await s.commit(); await msg.answer("üó£ –†–µ–∂–∏–º: –¢–µ–∫—Å—Ç")
        elif msg.text == "üß∞ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã":
            await set_mode(s, u, "tools"); await s.commit(); await msg.answer("üß∞ –†–µ–∂–∏–º: –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
        elif msg.text == "üñº –ö–∞—Ä—Ç–∏–Ω–∫–∞":
            await set_mode(s, u, "image"); await s.commit(); await msg.answer("üñº –†–µ–∂–∏–º: –ö–∞—Ä—Ç–∏–Ω–∫–∞")
        elif msg.text == "üéô –ì–æ–ª–æ—Å":
            await set_mode(s, u, "voice"); await s.commit(); await msg.answer("üéô –†–µ–∂–∏–º: –ì–æ–ª–æ—Å. –ü—Ä–∏—à–ª–∏ voice-—Å–æ–æ–±—â–µ–Ω–∏–µ.")
        else:
            sess = await get_active_session(s, u); sess.memory_enabled = not sess.memory_enabled; await s.commit()
            await msg.answer(f"üß† –ü–∞–º—è—Ç—å: {'–í–ö–õ' if sess.memory_enabled else '–í–´–ö–õ'}")

@router.message(F.photo)
async def on_photo(msg: Message):
    uid = msg.from_user.id; chat_id = msg.chat.id
    async with SessionLocal() as s:
        u = await upsert_user(s, uid, msg.from_user.username)
        if not rate_ok(uid): await msg.answer("‚è≥ –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥."); return
        sess = await get_active_session(s, u)
        ph = msg.photo[-1]
        file = await msg.bot.get_file(ph.file_id)
        url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file.file_path}"
        prompt = msg.caption or "–û–ø–∏—à–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."
        await msg.bot.send_chat_action(chat_id, ChatAction.TYPING)
        reply = await respond_vision(prompt, url)
        await append_message(s, sess.id, "user", f"[image]\n{prompt}")
        await append_message(s, sess.id, "assistant", reply or ""); await s.commit()
        await msg.answer(reply or "–ì–æ—Ç–æ–≤–æ.")

@router.message(F.voice)
async def on_voice(msg: Message):
    uid = msg.from_user.id; chat_id = msg.chat.id
    async with SessionLocal() as s:
        u = await upsert_user(s, uid, msg.from_user.username)
        if not rate_ok(uid): await msg.answer("‚è≥ –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥."); return
        counters = await inc_limits(s, u, is_image=False); await s.commit()
        file = await msg.bot.get_file(msg.voice.file_id)
        url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file.file_path}"
        async with httpx.AsyncClient() as h:
            r = await h.get(url); r.raise_for_status(); ogg = r.content
        await msg.bot.send_chat_action(chat_id, ChatAction.TYPING)
        try: text = await stt_transcribe(ogg, filename="audio.ogg")
        except Exception: await msg.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å."); return
        if not await moderate(text): await msg.answer("‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π."); return
        sess = await get_active_session(s, u)
        await append_message(s, sess.id, "user", text)
        hist = await get_history(s, sess.id, 20)
        reply = await respond_text(hist + [{"role":"user","content":text}], use_tools=False)
        await append_message(s, sess.id, "assistant", reply or ""); await s.commit()
        if reply:
            audio = await tts_speak(reply)
            await msg.answer_audio(audio, title="–û—Ç–≤–µ—Ç", performer="GPT‚Äë4o")
        else:
            await msg.answer("–ì–æ—Ç–æ–≤–æ.")

@router.message(F.text)
async def on_text(msg: Message):
    uid = msg.from_user.id; chat_id = msg.chat.id; text = msg.text.strip()
    async with SessionLocal() as s:
        u = await upsert_user(s, uid, msg.from_user.username)
        if u.is_banned: await msg.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω."); return
        if not rate_ok(uid): await msg.answer("‚è≥ –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥."); return
        sess = await get_active_session(s, u)
        mode = u.mode or "chat"
        if mode == "image":
            counters = await inc_limits(s, u, is_image=True); await s.commit()
            if counters["daily_imgs"] > FREE_IMAGES_PER_DAY and not u.is_premium:
                await msg.answer("‚ö†Ô∏è –õ–∏–º–∏—Ç –∫–∞—Ä—Ç–∏–Ω–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å—á–µ—Ä–ø–∞–Ω."); return
            size = "1024x1024"; lt = text.lower()
            if "16:9" in lt or "–≥–æ—Ä–∏–∑–æ–Ω—Ç" in lt or "wide" in lt: size="1792x1024"
            if "9:16" in lt or "–≤–µ—Ä—Ç–∏–∫" in lt or "tiktok" in lt: size="1024x1792"
            await msg.bot.send_chat_action(chat_id, ChatAction.UPLOAD_PHOTO)
            try:
                url = await generate_image(text, size=size)
                await msg.answer_photo(url, caption=f"üñº {text}")
                await append_message(s, sess.id, "assistant", f"[generated image: {text}]"); await s.commit()
            except Exception as e:
                await msg.answer(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            return
        counters = await inc_limits(s, u, is_image=False); await s.commit()
        if counters["daily_msgs"] > FREE_MSGS_PER_DAY and not u.is_premium:
            await msg.answer("‚ö†Ô∏è –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å—á–µ—Ä–ø–∞–Ω."); return
        if not await moderate(text): await msg.answer("‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π."); return
        await append_message(s, sess.id, "user", text)
        hist = await get_history(s, sess.id, 20)
        await msg.bot.send_chat_action(chat_id, ChatAction.TYPING)
        use_tools = (mode == "tools")
        reply = await respond_text(hist + [{"role":"user","content":text}], use_tools=use_tools)
        await append_message(s, sess.id, "assistant", reply or ""); await s.commit()
        await msg.answer(reply or "–ì–æ—Ç–æ–≤–æ.")
