import base64
import io
import logging
import re
from typing import Any, Dict, List, Optional

import httpx
from dateutil import parser as dtparser
from dateutil.tz import gettz
from openai import AsyncOpenAI

from settings import (
    OPENAI_API_KEY, OPENAI_MODEL, OPENAI_FALLBACK_MODEL, OPENAI_IMAGE_MODEL,
    OPENAI_TTS_MODEL, OPENAI_STT_MODEL, TZ
)
from db import add_reminder

log = logging.getLogger("openai")
client = AsyncOpenAI(api_key=OPENAI_API_KEY)
tz = gettz(TZ)

# ---------- Moderation ----------
async def moderate(text: str) -> bool:
    try:
        r = await client.moderations.create(model="omni-moderation-latest", input=text)
        return not bool(r.results[0].flagged)
    except Exception:
        return True  # –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏

# ---------- Tools ----------
TOOLS = [
    {"type": "function", "function": {
        "name": "web_search",
        "description": "–£–ø—Ä–æ—â—ë–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –í–∏–∫–∏–ø–µ–¥–∏–∏",
        "parameters": {"type":"object","properties":{"query":{"type":"string"}},"required":["query"]}
    }},
    {"type": "function", "function": {
        "name": "calculator",
        "description": "–ü–æ—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–µ –∞—Ä–∏—Ä–∏—Ç–º–µ—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ",
        "parameters": {"type":"object","properties":{"expression":{"type":"string"}},"required":["expression"]}
    }},
    {"type": "function", "function": {
        "name": "weather",
        "description": "–ü–æ–≥–æ–¥–∞ —á–µ—Ä–µ–∑ OpenWeather (–µ—Å–ª–∏ –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω)",
        "parameters": {"type":"object","properties":{"location":{"type":"string"}},"required":["location"]}
    }},
    {"type": "function", "function": {
        "name": "set_reminder",
        "description": "–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
        "parameters": {"type":"object","properties":{"when":{"type":"string"},"task":{"type":"string"}},"required":["when","task"]}
    }},
]

# ---------- Images ----------
async def generate_image(prompt: str, *, size: str = "1024x1024", quality: str = "standard", style: str = "vivid") -> bytes:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è: DALL¬∑E 3 (–µ—Å–ª–∏ OPENAI_IMAGE_MODEL=dall-e-3) –∏–ª–∏ gpt-image-1."""
    try:
        gen = await client.images.generate(
            model=OPENAI_IMAGE_MODEL,
            prompt=prompt,
            size=size,
            quality=quality,
            style=style,
        )
        url = gen.data[0].url
        async with httpx.AsyncClient(timeout=60.0) as h:
            r = await h.get(url); r.raise_for_status()
            return r.content
    except httpx.HTTPStatusError as e:
        if e.response.status_code == 403:
            raise RuntimeError("üö´ –ú–æ–¥–µ–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü—Ä–æ–π–¥–∏ Verify Organization –≤ OpenAI, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–∞—Ä—Ç–∏–Ω–æ–∫.")
        raise
    except Exception as e:
        raise RuntimeError(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")

async def edit_image(image_bytes: bytes, *, prompt: str, mask_bytes: Optional[bytes] = None) -> bytes:
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ REST /v1/images/edits (gpt-image-1)."""
    url = "https://api.openai.com/v1/images/edits"
    headers = {"Authorization": f"Bearer {OPENAI_API_KEY}"}
    files = [
        ("model", (None, OPENAI_IMAGE_MODEL)),
        ("prompt", (None, prompt)),
        ("image", ("image.png", image_bytes, "image/png")),
    ]
    if mask_bytes:
        files.append(("mask", ("mask.png", mask_bytes, "image/png")))

    async with httpx.AsyncClient(timeout=90.0) as h:
        r = await h.post(url, headers=headers, files=files)
        if r.status_code == 403:
            raise RuntimeError("üö´ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü—Ä–æ–π–¥–∏ Verify Organization –≤ OpenAI, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å edits.")
        if r.is_error:
            raise RuntimeError(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {r.status_code} ‚Äî {r.text}")

        data = r.json()
        img_url = data["data"][0]["url"]
        rr = await h.get(img_url)
        rr.raise_for_status()
        return rr.content
