"""–ú–æ–¥—É–ª—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –º–æ–¥–µ–ª—è–º–∏ PostgreSQL –∏ –º–∏–≥—Ä–∞—Ü–∏—è–º–∏."""

import asyncio
import asyncpg
from datetime import datetime, date
from typing import Optional, List, Dict, Any
from config_ru import –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
import logging

logger = logging.getLogger(__name__)

# SQL –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Å–æ–≥–ª–∞—Å–Ω–æ –ø–∞–º—è—Ç–∏ –æ Database Configuration)
MIGRATIONS_SQL = """
-- –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
CREATE TABLE IF NOT EXISTS –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (
    id BIGINT PRIMARY KEY,
    username VARCHAR(255),
    first_name VARCHAR(255),
    last_name VARCHAR(255),
    language_code VARCHAR(10) DEFAULT 'ru',
    is_admin BOOLEAN DEFAULT FALSE,
    plan VARCHAR(20) DEFAULT 'FREE',
    plan_expires_at TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- –¢–∞–±–ª–∏—Ü–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
CREATE TABLE IF NOT EXISTS —Ä–∞–∑–≥–æ–≤–æ—Ä—ã (
    id SERIAL PRIMARY KEY,
    user_id BIGINT REFERENCES –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏(id) ON DELETE CASCADE,
    session_data JSONB DEFAULT '{}',
    persona VARCHAR(50) DEFAULT 'default',
    language VARCHAR(10) DEFAULT 'ru',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
CREATE TABLE IF NOT EXISTS —Å–æ–æ–±—â–µ–Ω–∏—è (
    id SERIAL PRIMARY KEY,
    user_id BIGINT REFERENCES –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏(id) ON DELETE CASCADE,
    role VARCHAR(20) NOT NULL,
    content TEXT NOT NULL,
    message_type VARCHAR(20) DEFAULT 'text',
    metadata JSONB DEFAULT '{}',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
CREATE TABLE IF NOT EXISTS —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞_–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (
    id SERIAL PRIMARY KEY,
    user_id BIGINT REFERENCES –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏(id) ON DELETE CASCADE,
    action VARCHAR(50) NOT NULL,
    duration_ms INTEGER,
    status VARCHAR(20) DEFAULT 'success',
    metadata JSONB DEFAULT '{}',
    cost_tokens INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- –¢–∞–±–ª–∏—Ü–∞ –ø–ª–∞—Ç–µ–∂–µ–π
CREATE TABLE IF NOT EXISTS –ø–ª–∞—Ç–µ–∂–∏ (
    id SERIAL PRIMARY KEY,
    user_id BIGINT REFERENCES –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏(id) ON DELETE CASCADE,
    telegram_payment_charge_id VARCHAR(255) UNIQUE,
    provider_payment_charge_id VARCHAR(255),
    amount INTEGER NOT NULL,
    currency VARCHAR(10) DEFAULT 'RUB',
    plan VARCHAR(20) NOT NULL,
    status VARCHAR(20) DEFAULT 'pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
CREATE TABLE IF NOT EXISTS –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (
    id SERIAL PRIMARY KEY,
    user_id BIGINT REFERENCES –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏(id) ON DELETE CASCADE,
    text TEXT NOT NULL,
    remind_at TIMESTAMP NOT NULL,
    sent BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
CREATE INDEX IF NOT EXISTS idx_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏_plan ON –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏(plan);
CREATE INDEX IF NOT EXISTS idx_—Å–æ–æ–±—â–µ–Ω–∏—è_user_id ON —Å–æ–æ–±—â–µ–Ω–∏—è(user_id);
CREATE INDEX IF NOT EXISTS idx_—Å–æ–æ–±—â–µ–Ω–∏—è_created_at ON —Å–æ–æ–±—â–µ–Ω–∏—è(created_at);
CREATE INDEX IF NOT EXISTS idx_—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞_–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è_user_id ON —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞_–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è(user_id);
CREATE INDEX IF NOT EXISTS idx_—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞_–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è_created_at ON —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞_–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è(created_at);
CREATE INDEX IF NOT EXISTS idx_—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞_–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è_action ON —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞_–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è(action);
CREATE INDEX IF NOT EXISTS idx_–ø–ª–∞—Ç–µ–∂–∏_user_id ON –ø–ª–∞—Ç–µ–∂–∏(user_id);
CREATE INDEX IF NOT EXISTS idx_–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è_user_id ON –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è(user_id);
CREATE INDEX IF NOT EXISTS idx_–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è_remind_at ON –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è(remind_at);
CREATE INDEX IF NOT EXISTS idx_–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è_sent ON –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è(sent);
"""


class –ú–µ–Ω–µ–¥–∂–µ—Ä–ë–∞–∑—ã–î–∞–Ω–Ω—ã—Ö:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π PostgreSQL."""
    
    def __init__(self):
        self.pool: Optional[asyncpg.Pool] = None
    
    async def –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å_–±–¥(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ DATABASE_URL (—Å–æ–≥–ª–∞—Å–Ω–æ –ø–∞–º—è—Ç–∏)
            database_url = –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.–±–∞–∑–∞_–¥–∞–Ω–Ω—ã—Ö.—Å—Å—ã–ª–∫–∞
            if not database_url:
                raise ValueError("DATABASE_URL –Ω–µ –∑–∞–¥–∞–Ω")
            
            if database_url.startswith("postgresql+asyncpg:"):
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç DATABASE_URL. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'postgresql://' –≤–º–µ—Å—Ç–æ 'postgresql+asyncpg:'")
            
            self.pool = await asyncpg.create_pool(
                database_url,
                min_size=5,
                max_size=20,
                command_timeout=60
            )
            logger.info("–ü—É–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
            
            # –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π (—Å–æ–≥–ª–∞—Å–Ω–æ –ø–∞–º—è—Ç–∏ –æ Database Initialization)
            await self.–∑–∞–ø—É—Å—Ç–∏—Ç—å_–º–∏–≥—Ä–∞—Ü–∏–∏()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ (—Å–æ–≥–ª–∞—Å–Ω–æ –ø–∞–º—è—Ç–∏)
            await self.–ø—Ä–æ–≤–µ—Ä–∏—Ç—å_—Å—Ç–æ–ª–±—Ü—ã()
            
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
            # Graceful error handling (—Å–æ–≥–ª–∞—Å–Ω–æ –ø–∞–º—è—Ç–∏)
            print(f"""
‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}

üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:
1. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL –∑–∞–ø—É—â–µ–Ω–∞
2. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å DATABASE_URL: {–Ω–∞—Å—Ç—Ä–æ–π–∫–∏.–±–∞–∑–∞_–¥–∞–Ω–Ω—ã—Ö.—Å—Å—ã–ª–∫–∞}
3. –§–æ—Ä–º–∞—Ç: postgresql://username:password@host:port/database

üí° –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
   docker-compose up postgres -d
            """)
            raise
    
    async def –∑–∞–ø—É—Å—Ç–∏—Ç—å_–º–∏–≥—Ä–∞—Ü–∏–∏(self):
        """–ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        if not self.pool:
            raise RuntimeError("–ü—É–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        async with self.pool.acquire() as conn:
            try:
                await conn.execute(MIGRATIONS_SQL)
                logger.info("–ú–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
                raise
    
    async def –ø—Ä–æ–≤–µ—Ä–∏—Ç—å_—Å—Ç–æ–ª–±—Ü—ã(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ (—Å–æ–≥–ª–∞—Å–Ω–æ –ø–∞–º—è—Ç–∏)."""
        required_columns = {
            '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏': ['id', 'username', 'plan', 'is_admin'],
            '—Å–æ–æ–±—â–µ–Ω–∏—è': ['id', 'user_id', 'role', 'content'],
            '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞_–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è': ['id', 'user_id', 'action', 'status'],
            '–ø–ª–∞—Ç–µ–∂–∏': ['id', 'user_id', 'plan', 'amount'],
            '–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è': ['id', 'user_id', 'text', 'remind_at', 'sent']
        }
        
        async with self.pool.acquire() as conn:
            for table_name, columns in required_columns.items():
                for column in columns:
                    result = await conn.fetchval("""
                        SELECT column_name FROM information_schema.columns 
                        WHERE table_name = $1 AND column_name = $2
                    """, table_name, column)
                    
                    if not result:
                        logger.warning(f"–°—Ç–æ–ª–±–µ—Ü {column} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ {table_name}")
        
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    async def –∑–∞–∫—Ä—ã—Ç—å(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        if self.pool:
            await self.pool.close()
            logger.info("–ü—É–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç")
    
    async def –ø–æ–ª—É—á–∏—Ç—å_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(self, user_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID."""
        async with self.pool.acquire() as conn:
            row = await conn.fetchrow(
                "SELECT * FROM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ WHERE id = $1", user_id
            )
            return dict(row) if row else None
    
    async def —Å–æ–∑–¥–∞—Ç—å_–∏–ª–∏_–æ–±–Ω–æ–≤–∏—Ç—å_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(self, user_data: Dict[str, Any]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        async with self.pool.acquire() as conn:
            user_id = user_data['id']
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            existing = await conn.fetchrow("SELECT id FROM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ WHERE id = $1", user_id)
            
            if existing:
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await conn.execute("""
                    UPDATE –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ SET 
                        username = $2, 
                        first_name = $3, 
                        last_name = $4,
                        language_code = $5,
                        updated_at = CURRENT_TIMESTAMP
                    WHERE id = $1
                """, user_id, user_data.get('username'), user_data.get('first_name'),
                user_data.get('last_name'), user_data.get('language_code', 'ru'))
            else:
                # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await conn.execute("""
                    INSERT INTO –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (id, username, first_name, last_name, language_code)
                    VALUES ($1, $2, $3, $4, $5)
                """, user_id, user_data.get('username'), user_data.get('first_name'),
                user_data.get('last_name'), user_data.get('language_code', 'ru'))
            
            # –í–æ–∑–≤—Ä–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            row = await conn.fetchrow("SELECT * FROM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ WHERE id = $1", user_id)
            return dict(row)
    
    async def –ø–æ–ª—É—á–∏—Ç—å_—Å–µ—Å—Å–∏—é_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(self, user_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        async with self.pool.acquire() as conn:
            row = await conn.fetchrow(
                "SELECT * FROM —Ä–∞–∑–≥–æ–≤–æ—Ä—ã WHERE user_id = $1 ORDER BY updated_at DESC LIMIT 1",
                user_id
            )
            
            if row:
                return dict(row)
            else:
                # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
                new_session = await conn.fetchrow("""
                    INSERT INTO —Ä–∞–∑–≥–æ–≤–æ—Ä—ã (user_id, session_data, persona, language)
                    VALUES ($1, '{}', 'default', 'ru')
                    RETURNING *
                """, user_id)
                return dict(new_session)
    
    async def –æ–±–Ω–æ–≤–∏—Ç—å_—Å–µ—Å—Å–∏—é_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(self, user_id: int, session_data: Dict[str, Any]):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        async with self.pool.acquire() as conn:
            await conn.execute("""
                UPDATE —Ä–∞–∑–≥–æ–≤–æ—Ä—ã SET 
                    session_data = $2,
                    persona = $3,
                    language = $4,
                    updated_at = CURRENT_TIMESTAMP
                WHERE user_id = $1
            """, user_id, session_data.get('session_data', {}),
            session_data.get('persona', 'default'), session_data.get('language', 'ru'))
    
    async def –¥–æ–±–∞–≤–∏—Ç—å_—Å–æ–æ–±—â–µ–Ω–∏–µ(self, user_id: int, role: str, content: str, 
                         message_type: str = 'text', metadata: Dict = None):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é."""
        async with self.pool.acquire() as conn:
            await conn.execute("""
                INSERT INTO —Å–æ–æ–±—â–µ–Ω–∏—è (user_id, role, content, message_type, metadata)
                VALUES ($1, $2, $3, $4, $5)
            """, user_id, role, content, message_type, metadata or {})
    
    async def –ø–æ–ª—É—á–∏—Ç—å_–ø–æ—Å–ª–µ–¥–Ω–∏–µ_—Å–æ–æ–±—â–µ–Ω–∏—è(self, user_id: int, limit: int = None) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        if limit is None:
            limit = –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.max_history_messages
        
        async with self.pool.acquire() as conn:
            rows = await conn.fetch("""
                SELECT role, content, message_type, metadata, created_at
                FROM —Å–æ–æ–±—â–µ–Ω–∏—è 
                WHERE user_id = $1 
                ORDER BY created_at DESC 
                LIMIT $2
            """, user_id, limit)
            
            # –í–æ–∑–≤—Ä–∞—Ç –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å—Ç–∞—Ä—ã–µ –ø–µ—Ä–≤—ã–µ)
            return [dict(row) for row in reversed(rows)]
    
    async def –∑–∞–ø–∏—Å–∞—Ç—å_—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É(self, user_id: int, action: str, duration_ms: int = None,
                       status: str = 'success', metadata: Dict = None, cost_tokens: int = 0):
        """–ó–∞–ø–∏—Å–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."""
        async with self.pool.acquire() as conn:
            await conn.execute("""
                INSERT INTO —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞_–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (user_id, action, duration_ms, status, metadata, cost_tokens)
                VALUES ($1, $2, $3, $4, $5, $6)
            """, user_id, action, duration_ms, status, metadata or {}, cost_tokens)
    
    async def –ø–æ–ª—É—á–∏—Ç—å_–¥–Ω–µ–≤–Ω—É—é_—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É(self, user_id: int, action: str = None) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è."""
        async with self.pool.acquire() as conn:
            if action:
                count = await conn.fetchval("""
                    SELECT COUNT(*) FROM —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞_–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è 
                    WHERE user_id = $1 AND action = $2 
                    AND DATE(created_at) = CURRENT_DATE
                    AND status = 'success'
                """, user_id, action)
            else:
                count = await conn.fetchval("""
                    SELECT COUNT(*) FROM —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞_–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è 
                    WHERE user_id = $1 
                    AND DATE(created_at) = CURRENT_DATE
                    AND status = 'success'
                """, user_id)
            return count or 0
    
    async def —Å–æ–∑–¥–∞—Ç—å_–ø–ª–∞—Ç–µ–∂(self, user_id: int, plan: str, amount: int) -> int:
        """–°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –ø–ª–∞—Ç–µ–∂–∞."""
        async with self.pool.acquire() as conn:
            payment_id = await conn.fetchval("""
                INSERT INTO –ø–ª–∞—Ç–µ–∂–∏ (user_id, plan, amount, status)
                VALUES ($1, $2, $3, 'pending')
                RETURNING id
            """, user_id, plan, amount)
            return payment_id
    
    async def –æ–±–Ω–æ–≤–∏—Ç—å_–ø–ª–∞—Ç–µ–∂(self, payment_id: int, telegram_charge_id: str,
                           provider_charge_id: str, status: str = 'completed'):
        """–û–±–Ω–æ–≤–∏—Ç—å –ø–ª–∞—Ç–µ–∂ —Å ID –∑–∞—Ä—è–¥–æ–≤."""
        async with self.pool.acquire() as conn:
            await conn.execute("""
                UPDATE –ø–ª–∞—Ç–µ–∂–∏ SET 
                    telegram_payment_charge_id = $2,
                    provider_payment_charge_id = $3,
                    status = $4
                WHERE id = $1
            """, payment_id, telegram_charge_id, provider_charge_id, status)
    
    async def –æ–±–Ω–æ–≤–∏—Ç—å_–ø–ª–∞–Ω_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(self, user_id: int, plan: str, expires_at: datetime = None):
        """–û–±–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        async with self.pool.acquire() as conn:
            await conn.execute("""
                UPDATE –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ SET 
                    plan = $2,
                    plan_expires_at = $3,
                    updated_at = CURRENT_TIMESTAMP
                WHERE id = $1
            """, user_id, plan, expires_at)
    
    async def –¥–æ–±–∞–≤–∏—Ç—å_–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ(self, user_id: int, text: str, remind_at: datetime) -> int:
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ."""
        async with self.pool.acquire() as conn:
            reminder_id = await conn.fetchval("""
                INSERT INTO –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (user_id, text, remind_at)
                VALUES ($1, $2, $3)
                RETURNING id
            """, user_id, text, remind_at)
            return reminder_id
    
    async def –ø–æ–ª—É—á–∏—Ç—å_–æ–∂–∏–¥–∞—é—â–∏–µ_–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å."""
        async with self.pool.acquire() as conn:
            rows = await conn.fetch("""
                SELECT * FROM –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è 
                WHERE sent = FALSE AND remind_at <= CURRENT_TIMESTAMP
                ORDER BY remind_at
            """)
            return [dict(row) for row in rows]
    
    async def –æ—Ç–º–µ—Ç–∏—Ç—å_–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ_–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º(self, reminder_id: int):
        """–û—Ç–º–µ—Ç–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ."""
        async with self.pool.acquire() as conn:
            await conn.execute("""
                UPDATE –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è SET sent = TRUE WHERE id = $1
            """, reminder_id)
    
    async def —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å_–∞–¥–º–∏–Ω–∞(self, user_id: int, is_admin: bool):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        async with self.pool.acquire() as conn:
            await conn.execute("""
                UPDATE –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ SET is_admin = $2 WHERE id = $1
            """, user_id, is_admin)
    
    async def –ø–æ–ª—É—á–∏—Ç—å_—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã."""
        async with self.pool.acquire() as conn:
            total_users = await conn.fetchval("SELECT COUNT(*) FROM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
            
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –ø–ª–∞–Ω–∞–º
            plan_stats = await conn.fetch("""
                SELECT plan, COUNT(*) as count FROM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ GROUP BY plan
            """)
            
            # –°–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
            today_usage = await conn.fetch("""
                SELECT action, COUNT(*) as count 
                FROM —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞_–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è 
                WHERE DATE(created_at) = CURRENT_DATE 
                GROUP BY action
            """)
            
            # –î–æ—Ö–æ–¥ –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü
            monthly_revenue = await conn.fetchval("""
                SELECT COALESCE(SUM(amount), 0) FROM –ø–ª–∞—Ç–µ–∂–∏ 
                WHERE status = 'completed' 
                AND DATE_TRUNC('month', created_at) = DATE_TRUNC('month', CURRENT_DATE)
            """) or 0
            
            return {
                'total_users': total_users,
                'plan_distribution': {row['plan']: row['count'] for row in plan_stats},
                'today_usage': {row['action']: row['count'] for row in today_usage},
                'monthly_revenue_rub': monthly_revenue
            }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
–±–∞–∑–∞_–¥–∞–Ω–Ω—ã—Ö = –ú–µ–Ω–µ–¥–∂–µ—Ä–ë–∞–∑—ã–î–∞–Ω–Ω—ã—Ö()